
final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd60  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000c764  0800bef0  0800bef0  0001bef0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018654  08018654  000302c4  2**0
                  CONTENTS
  4 .ARM          00000008  08018654  08018654  00028654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801865c  0801865c  000302c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0801865c  0801865c  0002865c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018668  08018668  00028668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c4  20000000  0801866c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  200002c4  08018930  000302c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000474  08018930  00030474  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023a56  00000000  00000000  000302f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000580c  00000000  00000000  00053d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fc8  00000000  00000000  00059558  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e20  00000000  00000000  0005a520  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c77c  00000000  00000000  0005b340  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017aa3  00000000  00000000  00087abc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f2e06  00000000  00000000  0009f55f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00192365  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058f4  00000000  00000000  001923e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bed8 	.word	0x0800bed8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800bed8 	.word	0x0800bed8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_ldivmod>:
 8000c68:	b97b      	cbnz	r3, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6a:	b972      	cbnz	r2, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bfbe      	ittt	lt
 8000c70:	2000      	movlt	r0, #0
 8000c72:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c76:	e006      	blt.n	8000c86 <__aeabi_ldivmod+0x1e>
 8000c78:	bf08      	it	eq
 8000c7a:	2800      	cmpeq	r0, #0
 8000c7c:	bf1c      	itt	ne
 8000c7e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c82:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c86:	f000 b9a5 	b.w	8000fd4 <__aeabi_idiv0>
 8000c8a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c92:	2900      	cmp	r1, #0
 8000c94:	db09      	blt.n	8000caa <__aeabi_ldivmod+0x42>
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db1a      	blt.n	8000cd0 <__aeabi_ldivmod+0x68>
 8000c9a:	f000 f835 	bl	8000d08 <__udivmoddi4>
 8000c9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca6:	b004      	add	sp, #16
 8000ca8:	4770      	bx	lr
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db1b      	blt.n	8000cec <__aeabi_ldivmod+0x84>
 8000cb4:	f000 f828 	bl	8000d08 <__udivmoddi4>
 8000cb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc0:	b004      	add	sp, #16
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	4252      	negs	r2, r2
 8000cca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cce:	4770      	bx	lr
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	f000 f817 	bl	8000d08 <__udivmoddi4>
 8000cda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce2:	b004      	add	sp, #16
 8000ce4:	4240      	negs	r0, r0
 8000ce6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cea:	4770      	bx	lr
 8000cec:	4252      	negs	r2, r2
 8000cee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf2:	f000 f809 	bl	8000d08 <__udivmoddi4>
 8000cf6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cfe:	b004      	add	sp, #16
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	4604      	mov	r4, r0
 8000d10:	4688      	mov	r8, r1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d14b      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d16:	428a      	cmp	r2, r1
 8000d18:	4615      	mov	r5, r2
 8000d1a:	d967      	bls.n	8000dec <__udivmoddi4+0xe4>
 8000d1c:	fab2 f282 	clz	r2, r2
 8000d20:	b14a      	cbz	r2, 8000d36 <__udivmoddi4+0x2e>
 8000d22:	f1c2 0720 	rsb	r7, r2, #32
 8000d26:	fa01 f302 	lsl.w	r3, r1, r2
 8000d2a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d2e:	4095      	lsls	r5, r2
 8000d30:	ea47 0803 	orr.w	r8, r7, r3
 8000d34:	4094      	lsls	r4, r2
 8000d36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d3a:	0c23      	lsrs	r3, r4, #16
 8000d3c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d40:	fa1f fc85 	uxth.w	ip, r5
 8000d44:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d48:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d50:	4299      	cmp	r1, r3
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x60>
 8000d54:	18eb      	adds	r3, r5, r3
 8000d56:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d5a:	f080 811b 	bcs.w	8000f94 <__udivmoddi4+0x28c>
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	f240 8118 	bls.w	8000f94 <__udivmoddi4+0x28c>
 8000d64:	3f02      	subs	r7, #2
 8000d66:	442b      	add	r3, r5
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d78:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d7c:	45a4      	cmp	ip, r4
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x8c>
 8000d80:	192c      	adds	r4, r5, r4
 8000d82:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d86:	f080 8107 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d8a:	45a4      	cmp	ip, r4
 8000d8c:	f240 8104 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d90:	3802      	subs	r0, #2
 8000d92:	442c      	add	r4, r5
 8000d94:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d98:	eba4 040c 	sub.w	r4, r4, ip
 8000d9c:	2700      	movs	r7, #0
 8000d9e:	b11e      	cbz	r6, 8000da8 <__udivmoddi4+0xa0>
 8000da0:	40d4      	lsrs	r4, r2
 8000da2:	2300      	movs	r3, #0
 8000da4:	e9c6 4300 	strd	r4, r3, [r6]
 8000da8:	4639      	mov	r1, r7
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0xbe>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80eb 	beq.w	8000f8e <__udivmoddi4+0x286>
 8000db8:	2700      	movs	r7, #0
 8000dba:	e9c6 0100 	strd	r0, r1, [r6]
 8000dbe:	4638      	mov	r0, r7
 8000dc0:	4639      	mov	r1, r7
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	fab3 f783 	clz	r7, r3
 8000dca:	2f00      	cmp	r7, #0
 8000dcc:	d147      	bne.n	8000e5e <__udivmoddi4+0x156>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0xd0>
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	f200 80fa 	bhi.w	8000fcc <__udivmoddi4+0x2c4>
 8000dd8:	1a84      	subs	r4, r0, r2
 8000dda:	eb61 0303 	sbc.w	r3, r1, r3
 8000dde:	2001      	movs	r0, #1
 8000de0:	4698      	mov	r8, r3
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	d0e0      	beq.n	8000da8 <__udivmoddi4+0xa0>
 8000de6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dea:	e7dd      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000dec:	b902      	cbnz	r2, 8000df0 <__udivmoddi4+0xe8>
 8000dee:	deff      	udf	#255	; 0xff
 8000df0:	fab2 f282 	clz	r2, r2
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	f040 808f 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000dfa:	1b49      	subs	r1, r1, r5
 8000dfc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e00:	fa1f f885 	uxth.w	r8, r5
 8000e04:	2701      	movs	r7, #1
 8000e06:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e0a:	0c23      	lsrs	r3, r4, #16
 8000e0c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e14:	fb08 f10c 	mul.w	r1, r8, ip
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1c:	18eb      	adds	r3, r5, r3
 8000e1e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4299      	cmp	r1, r3
 8000e26:	f200 80cd 	bhi.w	8000fc4 <__udivmoddi4+0x2bc>
 8000e2a:	4684      	mov	ip, r0
 8000e2c:	1a59      	subs	r1, r3, r1
 8000e2e:	b2a3      	uxth	r3, r4
 8000e30:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e34:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e38:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e3c:	fb08 f800 	mul.w	r8, r8, r0
 8000e40:	45a0      	cmp	r8, r4
 8000e42:	d907      	bls.n	8000e54 <__udivmoddi4+0x14c>
 8000e44:	192c      	adds	r4, r5, r4
 8000e46:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x14a>
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	f200 80b6 	bhi.w	8000fbe <__udivmoddi4+0x2b6>
 8000e52:	4618      	mov	r0, r3
 8000e54:	eba4 0408 	sub.w	r4, r4, r8
 8000e58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e5c:	e79f      	b.n	8000d9e <__udivmoddi4+0x96>
 8000e5e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e62:	40bb      	lsls	r3, r7
 8000e64:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e68:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e6c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e70:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e74:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e78:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e7c:	4325      	orrs	r5, r4
 8000e7e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e82:	0c2c      	lsrs	r4, r5, #16
 8000e84:	fb08 3319 	mls	r3, r8, r9, r3
 8000e88:	fa1f fa8e 	uxth.w	sl, lr
 8000e8c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e90:	fb09 f40a 	mul.w	r4, r9, sl
 8000e94:	429c      	cmp	r4, r3
 8000e96:	fa02 f207 	lsl.w	r2, r2, r7
 8000e9a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1e 0303 	adds.w	r3, lr, r3
 8000ea4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ea8:	f080 8087 	bcs.w	8000fba <__udivmoddi4+0x2b2>
 8000eac:	429c      	cmp	r4, r3
 8000eae:	f240 8084 	bls.w	8000fba <__udivmoddi4+0x2b2>
 8000eb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb6:	4473      	add	r3, lr
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	b2ad      	uxth	r5, r5
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ec4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ec8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ecc:	45a2      	cmp	sl, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ed4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ed8:	d26b      	bcs.n	8000fb2 <__udivmoddi4+0x2aa>
 8000eda:	45a2      	cmp	sl, r4
 8000edc:	d969      	bls.n	8000fb2 <__udivmoddi4+0x2aa>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4474      	add	r4, lr
 8000ee2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eea:	eba4 040a 	sub.w	r4, r4, sl
 8000eee:	454c      	cmp	r4, r9
 8000ef0:	46c2      	mov	sl, r8
 8000ef2:	464b      	mov	r3, r9
 8000ef4:	d354      	bcc.n	8000fa0 <__udivmoddi4+0x298>
 8000ef6:	d051      	beq.n	8000f9c <__udivmoddi4+0x294>
 8000ef8:	2e00      	cmp	r6, #0
 8000efa:	d069      	beq.n	8000fd0 <__udivmoddi4+0x2c8>
 8000efc:	ebb1 050a 	subs.w	r5, r1, sl
 8000f00:	eb64 0403 	sbc.w	r4, r4, r3
 8000f04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f08:	40fd      	lsrs	r5, r7
 8000f0a:	40fc      	lsrs	r4, r7
 8000f0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f10:	e9c6 5400 	strd	r5, r4, [r6]
 8000f14:	2700      	movs	r7, #0
 8000f16:	e747      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f18:	f1c2 0320 	rsb	r3, r2, #32
 8000f1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f20:	4095      	lsls	r5, r2
 8000f22:	fa01 f002 	lsl.w	r0, r1, r2
 8000f26:	fa21 f303 	lsr.w	r3, r1, r3
 8000f2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f2e:	4338      	orrs	r0, r7
 8000f30:	0c01      	lsrs	r1, r0, #16
 8000f32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f36:	fa1f f885 	uxth.w	r8, r5
 8000f3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f42:	fb07 f308 	mul.w	r3, r7, r8
 8000f46:	428b      	cmp	r3, r1
 8000f48:	fa04 f402 	lsl.w	r4, r4, r2
 8000f4c:	d907      	bls.n	8000f5e <__udivmoddi4+0x256>
 8000f4e:	1869      	adds	r1, r5, r1
 8000f50:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f54:	d22f      	bcs.n	8000fb6 <__udivmoddi4+0x2ae>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d92d      	bls.n	8000fb6 <__udivmoddi4+0x2ae>
 8000f5a:	3f02      	subs	r7, #2
 8000f5c:	4429      	add	r1, r5
 8000f5e:	1acb      	subs	r3, r1, r3
 8000f60:	b281      	uxth	r1, r0
 8000f62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f6e:	fb00 f308 	mul.w	r3, r0, r8
 8000f72:	428b      	cmp	r3, r1
 8000f74:	d907      	bls.n	8000f86 <__udivmoddi4+0x27e>
 8000f76:	1869      	adds	r1, r5, r1
 8000f78:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f7c:	d217      	bcs.n	8000fae <__udivmoddi4+0x2a6>
 8000f7e:	428b      	cmp	r3, r1
 8000f80:	d915      	bls.n	8000fae <__udivmoddi4+0x2a6>
 8000f82:	3802      	subs	r0, #2
 8000f84:	4429      	add	r1, r5
 8000f86:	1ac9      	subs	r1, r1, r3
 8000f88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f8c:	e73b      	b.n	8000e06 <__udivmoddi4+0xfe>
 8000f8e:	4637      	mov	r7, r6
 8000f90:	4630      	mov	r0, r6
 8000f92:	e709      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f94:	4607      	mov	r7, r0
 8000f96:	e6e7      	b.n	8000d68 <__udivmoddi4+0x60>
 8000f98:	4618      	mov	r0, r3
 8000f9a:	e6fb      	b.n	8000d94 <__udivmoddi4+0x8c>
 8000f9c:	4541      	cmp	r1, r8
 8000f9e:	d2ab      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000fa4:	eb69 020e 	sbc.w	r2, r9, lr
 8000fa8:	3801      	subs	r0, #1
 8000faa:	4613      	mov	r3, r2
 8000fac:	e7a4      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fae:	4660      	mov	r0, ip
 8000fb0:	e7e9      	b.n	8000f86 <__udivmoddi4+0x27e>
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	e795      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb6:	4667      	mov	r7, ip
 8000fb8:	e7d1      	b.n	8000f5e <__udivmoddi4+0x256>
 8000fba:	4681      	mov	r9, r0
 8000fbc:	e77c      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fbe:	3802      	subs	r0, #2
 8000fc0:	442c      	add	r4, r5
 8000fc2:	e747      	b.n	8000e54 <__udivmoddi4+0x14c>
 8000fc4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fc8:	442b      	add	r3, r5
 8000fca:	e72f      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fcc:	4638      	mov	r0, r7
 8000fce:	e708      	b.n	8000de2 <__udivmoddi4+0xda>
 8000fd0:	4637      	mov	r7, r6
 8000fd2:	e6e9      	b.n	8000da8 <__udivmoddi4+0xa0>

08000fd4 <__aeabi_idiv0>:
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <_ZN7DisplayC1E7PinNameS0_S0_S0_S0_S0_PKc>:
 */

#include <Display.hpp>
#include <lcd.hpp>

Display::Display(PinName mosi, PinName miso, PinName sclk, PinName cs, PinName reset, PinName dc, const char *name)
 8000fd8:	b5b0      	push	{r4, r5, r7, lr}
 8000fda:	b094      	sub	sp, #80	; 0x50
 8000fdc:	af10      	add	r7, sp, #64	; 0x40
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	4638      	mov	r0, r7
 8000fe2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	: SPI_TFT_ILI9341(mosi, miso, sclk, cs, reset, dc, name) {
 8000fe6:	68fd      	ldr	r5, [r7, #12]
 8000fe8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000fea:	930f      	str	r3, [sp, #60]	; 0x3c
 8000fec:	ac0c      	add	r4, sp, #48	; 0x30
 8000fee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ff2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000ff6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000ffa:	ac09      	add	r4, sp, #36	; 0x24
 8000ffc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001000:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001004:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001008:	ac06      	add	r4, sp, #24
 800100a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800100e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001012:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001016:	ac03      	add	r4, sp, #12
 8001018:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800101c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001020:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001024:	466b      	mov	r3, sp
 8001026:	f107 0220 	add.w	r2, r7, #32
 800102a:	ca07      	ldmia	r2, {r0, r1, r2}
 800102c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001030:	463b      	mov	r3, r7
 8001032:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001034:	4628      	mov	r0, r5
 8001036:	f003 fb1f 	bl	8004678 <_ZN15SPI_TFT_ILI9341C1E7PinNameS0_S0_S0_S0_S0_PKc>
 800103a:	4a04      	ldr	r2, [pc, #16]	; (800104c <_ZN7DisplayC1E7PinNameS0_S0_S0_S0_S0_PKc+0x74>)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	601a      	str	r2, [r3, #0]
}
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bdb0      	pop	{r4, r5, r7, pc}
 800104a:	bf00      	nop
 800104c:	0800c25c 	.word	0x0800c25c

08001050 <_ZN7Display10print_textEPciiPh>:

void Display::print_text(char* text, int x, int y, unsigned char* font) {
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b08b      	sub	sp, #44	; 0x2c
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
 800105c:	603b      	str	r3, [r7, #0]
	int i = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
	char * less_space = (char*) "fijlrtI1.[/";
 8001062:	4b41      	ldr	r3, [pc, #260]	; (8001168 <_ZN7Display10print_textEPciiPh+0x118>)
 8001064:	623b      	str	r3, [r7, #32]
	char * more_space = (char*) "mwMWP";
 8001066:	4b41      	ldr	r3, [pc, #260]	; (800116c <_ZN7Display10print_textEPciiPh+0x11c>)
 8001068:	61fb      	str	r3, [r7, #28]

	int less = font[1] * 0.5;
 800106a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800106c:	3301      	adds	r3, #1
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fa67 	bl	8000544 <__aeabi_i2d>
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	4b3d      	ldr	r3, [pc, #244]	; (8001170 <_ZN7Display10print_textEPciiPh+0x120>)
 800107c:	f7ff facc 	bl	8000618 <__aeabi_dmul>
 8001080:	4603      	mov	r3, r0
 8001082:	460c      	mov	r4, r1
 8001084:	4618      	mov	r0, r3
 8001086:	4621      	mov	r1, r4
 8001088:	f7ff fd76 	bl	8000b78 <__aeabi_d2iz>
 800108c:	4603      	mov	r3, r0
 800108e:	61bb      	str	r3, [r7, #24]
	int norm = font[1] * 0.7;
 8001090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001092:	3301      	adds	r3, #1
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fa54 	bl	8000544 <__aeabi_i2d>
 800109c:	a330      	add	r3, pc, #192	; (adr r3, 8001160 <_ZN7Display10print_textEPciiPh+0x110>)
 800109e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a2:	f7ff fab9 	bl	8000618 <__aeabi_dmul>
 80010a6:	4603      	mov	r3, r0
 80010a8:	460c      	mov	r4, r1
 80010aa:	4618      	mov	r0, r3
 80010ac:	4621      	mov	r1, r4
 80010ae:	f7ff fd63 	bl	8000b78 <__aeabi_d2iz>
 80010b2:	4603      	mov	r3, r0
 80010b4:	617b      	str	r3, [r7, #20]
	int more = font[1];
 80010b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010b8:	3301      	adds	r3, #1
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	613b      	str	r3, [r7, #16]

	set_font(font);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80010c2:	4618      	mov	r0, r3
 80010c4:	f004 face 	bl	8005664 <_ZN15SPI_TFT_ILI93418set_fontEPh>

	do {
		locate(x, y);
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	3314      	adds	r3, #20
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	683a      	ldr	r2, [r7, #0]
 80010d4:	6879      	ldr	r1, [r7, #4]
 80010d6:	4798      	blx	r3
		character(0, 0, text[i]);
 80010d8:	68f8      	ldr	r0, [r7, #12]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681c      	ldr	r4, [r3, #0]
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	4413      	add	r3, r2
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2200      	movs	r2, #0
 80010ea:	2100      	movs	r1, #0
 80010ec:	47a0      	blx	r4

		if (strchr(less_space, text[i])) x += less;
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	4413      	add	r3, r2
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	4619      	mov	r1, r3
 80010f8:	6a38      	ldr	r0, [r7, #32]
 80010fa:	f007 fca8 	bl	8008a4e <strchr>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d004      	beq.n	800110e <_ZN7Display10print_textEPciiPh+0xbe>
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	4413      	add	r3, r2
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	e013      	b.n	8001136 <_ZN7Display10print_textEPciiPh+0xe6>
		else if (strchr(more_space, text[i])) x += more;
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	68ba      	ldr	r2, [r7, #8]
 8001112:	4413      	add	r3, r2
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	4619      	mov	r1, r3
 8001118:	69f8      	ldr	r0, [r7, #28]
 800111a:	f007 fc98 	bl	8008a4e <strchr>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d004      	beq.n	800112e <_ZN7Display10print_textEPciiPh+0xde>
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	4413      	add	r3, r2
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	e003      	b.n	8001136 <_ZN7Display10print_textEPciiPh+0xe6>
		else x += norm;
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	4413      	add	r3, r2
 8001134:	607b      	str	r3, [r7, #4]

	} while (text[i++]);
 8001136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001138:	1c5a      	adds	r2, r3, #1
 800113a:	627a      	str	r2, [r7, #36]	; 0x24
 800113c:	461a      	mov	r2, r3
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	4413      	add	r3, r2
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	bf14      	ite	ne
 8001148:	2301      	movne	r3, #1
 800114a:	2300      	moveq	r3, #0
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d000      	beq.n	8001154 <_ZN7Display10print_textEPciiPh+0x104>
	do {
 8001152:	e7b9      	b.n	80010c8 <_ZN7Display10print_textEPciiPh+0x78>
}
 8001154:	bf00      	nop
 8001156:	372c      	adds	r7, #44	; 0x2c
 8001158:	46bd      	mov	sp, r7
 800115a:	bd90      	pop	{r4, r7, pc}
 800115c:	f3af 8000 	nop.w
 8001160:	66666666 	.word	0x66666666
 8001164:	3fe66666 	.word	0x3fe66666
 8001168:	0800bef0 	.word	0x0800bef0
 800116c:	0800befc 	.word	0x0800befc
 8001170:	3fe00000 	.word	0x3fe00000

08001174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	2b00      	cmp	r3, #0
 8001184:	db0d      	blt.n	80011a2 <__NVIC_EnableIRQ+0x2e>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	f003 021f 	and.w	r2, r3, #31
 8001190:	4907      	ldr	r1, [pc, #28]	; (80011b0 <__NVIC_EnableIRQ+0x3c>)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	095b      	lsrs	r3, r3, #5
 8001198:	2001      	movs	r0, #1
 800119a:	fa00 f202 	lsl.w	r2, r0, r2
 800119e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000e100 	.word	0xe000e100

080011b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	db0c      	blt.n	80011e2 <__NVIC_SetPriority+0x2e>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	4a0e      	ldr	r2, [pc, #56]	; (8001208 <__NVIC_SetPriority+0x54>)
 80011ce:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80011d2:	4608      	mov	r0, r1
 80011d4:	011b      	lsls	r3, r3, #4
 80011d6:	b2d9      	uxtb	r1, r3
 80011d8:	1813      	adds	r3, r2, r0
 80011da:	460a      	mov	r2, r1
 80011dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e0:	e00c      	b.n	80011fc <__NVIC_SetPriority+0x48>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4909      	ldr	r1, [pc, #36]	; (800120c <__NVIC_SetPriority+0x58>)
 80011e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	f003 030f 	and.w	r3, r3, #15
 80011f2:	3b04      	subs	r3, #4
 80011f4:	0112      	lsls	r2, r2, #4
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	440b      	add	r3, r1
 80011fa:	761a      	strb	r2, [r3, #24]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000e100 	.word	0xe000e100
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <EXTI_Init>:
#include <pages/HelpPage.hpp>


extern "C" {

void EXTI_Init(void) {
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;	// Enable GPIO Port A Clock
 8001214:	4b5b      	ldr	r3, [pc, #364]	; (8001384 <EXTI_Init+0x174>)
 8001216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001218:	4a5a      	ldr	r2, [pc, #360]	; (8001384 <EXTI_Init+0x174>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	64d3      	str	r3, [r2, #76]	; 0x4c

	// Initialize Joystick
	GPIOA->MODER &= ~(0xCFF);			// Clear mode for pins 0-3 + 5, mode = 00: input
 8001220:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800122a:	f423 634f 	bic.w	r3, r3, #3312	; 0xcf0
 800122e:	f023 030f 	bic.w	r3, r3, #15
 8001232:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(0xCFF);			// Clear PUPD
 8001234:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800123e:	f423 634f 	bic.w	r3, r3, #3312	; 0xcf0
 8001242:	f023 030f 	bic.w	r3, r3, #15
 8001246:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= 0x8AA;				// For pins 0-3 + 5, PUPD = 10: pull-down
 8001248:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001252:	f443 630a 	orr.w	r3, r3, #2208	; 0x8a0
 8001256:	f043 030a 	orr.w	r3, r3, #10
 800125a:	60d3      	str	r3, [r2, #12]

	// Configure SYSCFG EXTI
	SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0;		// Center
 800125c:	4b4a      	ldr	r3, [pc, #296]	; (8001388 <EXTI_Init+0x178>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	4a49      	ldr	r2, [pc, #292]	; (8001388 <EXTI_Init+0x178>)
 8001262:	f023 0307 	bic.w	r3, r3, #7
 8001266:	6093      	str	r3, [r2, #8]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;
 8001268:	4b47      	ldr	r3, [pc, #284]	; (8001388 <EXTI_Init+0x178>)
 800126a:	4a47      	ldr	r2, [pc, #284]	; (8001388 <EXTI_Init+0x178>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	6093      	str	r3, [r2, #8]

	SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI1;		// Left
 8001270:	4b45      	ldr	r3, [pc, #276]	; (8001388 <EXTI_Init+0x178>)
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	4a44      	ldr	r2, [pc, #272]	; (8001388 <EXTI_Init+0x178>)
 8001276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800127a:	6093      	str	r3, [r2, #8]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI1_PA;
 800127c:	4b42      	ldr	r3, [pc, #264]	; (8001388 <EXTI_Init+0x178>)
 800127e:	4a42      	ldr	r2, [pc, #264]	; (8001388 <EXTI_Init+0x178>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	6093      	str	r3, [r2, #8]

	SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI2;		// Right
 8001284:	4b40      	ldr	r3, [pc, #256]	; (8001388 <EXTI_Init+0x178>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	4a3f      	ldr	r2, [pc, #252]	; (8001388 <EXTI_Init+0x178>)
 800128a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800128e:	6093      	str	r3, [r2, #8]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI2_PA;
 8001290:	4b3d      	ldr	r3, [pc, #244]	; (8001388 <EXTI_Init+0x178>)
 8001292:	4a3d      	ldr	r2, [pc, #244]	; (8001388 <EXTI_Init+0x178>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	6093      	str	r3, [r2, #8]

	SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI3;		// Up
 8001298:	4b3b      	ldr	r3, [pc, #236]	; (8001388 <EXTI_Init+0x178>)
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	4a3a      	ldr	r2, [pc, #232]	; (8001388 <EXTI_Init+0x178>)
 800129e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80012a2:	6093      	str	r3, [r2, #8]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI3_PA;
 80012a4:	4b38      	ldr	r3, [pc, #224]	; (8001388 <EXTI_Init+0x178>)
 80012a6:	4a38      	ldr	r2, [pc, #224]	; (8001388 <EXTI_Init+0x178>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	6093      	str	r3, [r2, #8]

	SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR2_EXTI5;		// Down
 80012ac:	4b36      	ldr	r3, [pc, #216]	; (8001388 <EXTI_Init+0x178>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	4a35      	ldr	r2, [pc, #212]	; (8001388 <EXTI_Init+0x178>)
 80012b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012b6:	60d3      	str	r3, [r2, #12]
	SYSCFG->EXTICR[1] |= SYSCFG_EXTICR2_EXTI5_PA;
 80012b8:	4b33      	ldr	r3, [pc, #204]	; (8001388 <EXTI_Init+0x178>)
 80012ba:	4a33      	ldr	r2, [pc, #204]	; (8001388 <EXTI_Init+0x178>)
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	60d3      	str	r3, [r2, #12]

	// Configure EXTI Trigger
	EXTI->FTSR1 |= EXTI_FTSR1_FT0;	// Center
 80012c0:	4b32      	ldr	r3, [pc, #200]	; (800138c <EXTI_Init+0x17c>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	4a31      	ldr	r2, [pc, #196]	; (800138c <EXTI_Init+0x17c>)
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR1 |= EXTI_FTSR1_FT1;	// Left
 80012cc:	4b2f      	ldr	r3, [pc, #188]	; (800138c <EXTI_Init+0x17c>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	4a2e      	ldr	r2, [pc, #184]	; (800138c <EXTI_Init+0x17c>)
 80012d2:	f043 0302 	orr.w	r3, r3, #2
 80012d6:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR1 |= EXTI_FTSR1_FT2;	// Right
 80012d8:	4b2c      	ldr	r3, [pc, #176]	; (800138c <EXTI_Init+0x17c>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	4a2b      	ldr	r2, [pc, #172]	; (800138c <EXTI_Init+0x17c>)
 80012de:	f043 0304 	orr.w	r3, r3, #4
 80012e2:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR1 |= EXTI_FTSR1_FT3;	// Up
 80012e4:	4b29      	ldr	r3, [pc, #164]	; (800138c <EXTI_Init+0x17c>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	4a28      	ldr	r2, [pc, #160]	; (800138c <EXTI_Init+0x17c>)
 80012ea:	f043 0308 	orr.w	r3, r3, #8
 80012ee:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR1 |= EXTI_FTSR1_FT5;	// Down
 80012f0:	4b26      	ldr	r3, [pc, #152]	; (800138c <EXTI_Init+0x17c>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	4a25      	ldr	r2, [pc, #148]	; (800138c <EXTI_Init+0x17c>)
 80012f6:	f043 0320 	orr.w	r3, r3, #32
 80012fa:	60d3      	str	r3, [r2, #12]
	 * 	EXTI->RTSR1 |= EXTI_RTSR1_RTk;	// Rising edge trigger, pin k
	 *	EXTI->FTSR1 |= EXTI_FTSR1_FTk;	// Falling edge trigger, pin k
	 */

	// Enable EXTI
	EXTI->IMR1 |= EXTI_IMR1_IM0;	// Center
 80012fc:	4b23      	ldr	r3, [pc, #140]	; (800138c <EXTI_Init+0x17c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a22      	ldr	r2, [pc, #136]	; (800138c <EXTI_Init+0x17c>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	6013      	str	r3, [r2, #0]
	EXTI->IMR1 |= EXTI_IMR1_IM1;	// Left
 8001308:	4b20      	ldr	r3, [pc, #128]	; (800138c <EXTI_Init+0x17c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a1f      	ldr	r2, [pc, #124]	; (800138c <EXTI_Init+0x17c>)
 800130e:	f043 0302 	orr.w	r3, r3, #2
 8001312:	6013      	str	r3, [r2, #0]
	EXTI->IMR1 |= EXTI_IMR1_IM2;	// Right
 8001314:	4b1d      	ldr	r3, [pc, #116]	; (800138c <EXTI_Init+0x17c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a1c      	ldr	r2, [pc, #112]	; (800138c <EXTI_Init+0x17c>)
 800131a:	f043 0304 	orr.w	r3, r3, #4
 800131e:	6013      	str	r3, [r2, #0]
	EXTI->IMR1 |= EXTI_IMR1_IM3;	// Up
 8001320:	4b1a      	ldr	r3, [pc, #104]	; (800138c <EXTI_Init+0x17c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a19      	ldr	r2, [pc, #100]	; (800138c <EXTI_Init+0x17c>)
 8001326:	f043 0308 	orr.w	r3, r3, #8
 800132a:	6013      	str	r3, [r2, #0]
	EXTI->IMR1 |= EXTI_IMR1_IM5;	// Down
 800132c:	4b17      	ldr	r3, [pc, #92]	; (800138c <EXTI_Init+0x17c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a16      	ldr	r2, [pc, #88]	; (800138c <EXTI_Init+0x17c>)
 8001332:	f043 0320 	orr.w	r3, r3, #32
 8001336:	6013      	str	r3, [r2, #0]

	// Configure and Enable in NVIC
	NVIC_EnableIRQ(EXTI0_IRQn);		// Center
 8001338:	2006      	movs	r0, #6
 800133a:	f7ff ff1b 	bl	8001174 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI0_IRQn, 0);
 800133e:	2100      	movs	r1, #0
 8001340:	2006      	movs	r0, #6
 8001342:	f7ff ff37 	bl	80011b4 <__NVIC_SetPriority>

	NVIC_EnableIRQ(EXTI1_IRQn);		// Left
 8001346:	2007      	movs	r0, #7
 8001348:	f7ff ff14 	bl	8001174 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI1_IRQn, 0);
 800134c:	2100      	movs	r1, #0
 800134e:	2007      	movs	r0, #7
 8001350:	f7ff ff30 	bl	80011b4 <__NVIC_SetPriority>

	NVIC_EnableIRQ(EXTI2_IRQn);		// Right
 8001354:	2008      	movs	r0, #8
 8001356:	f7ff ff0d 	bl	8001174 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI2_IRQn, 0);
 800135a:	2100      	movs	r1, #0
 800135c:	2008      	movs	r0, #8
 800135e:	f7ff ff29 	bl	80011b4 <__NVIC_SetPriority>

	NVIC_EnableIRQ(EXTI3_IRQn);		// Up
 8001362:	2009      	movs	r0, #9
 8001364:	f7ff ff06 	bl	8001174 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI3_IRQn, 0);
 8001368:	2100      	movs	r1, #0
 800136a:	2009      	movs	r0, #9
 800136c:	f7ff ff22 	bl	80011b4 <__NVIC_SetPriority>

	NVIC_EnableIRQ(EXTI9_5_IRQn);	// Down
 8001370:	2017      	movs	r0, #23
 8001372:	f7ff feff 	bl	8001174 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI9_5_IRQn, 0);
 8001376:	2100      	movs	r1, #0
 8001378:	2017      	movs	r0, #23
 800137a:	f7ff ff1b 	bl	80011b4 <__NVIC_SetPriority>
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40021000 	.word	0x40021000
 8001388:	40010000 	.word	0x40010000
 800138c:	40010400 	.word	0x40010400

08001390 <EXTI0_IRQHandler>:

// INTERRUPT HANDLERS

// Center
void EXTI0_IRQHandler(void) {
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
	EXTI->PR1 |= EXTI_PR1_PIF0; // Clear interrupt pending bit
 8001394:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <EXTI0_IRQHandler+0x28>)
 8001396:	695b      	ldr	r3, [r3, #20]
 8001398:	4a07      	ldr	r2, [pc, #28]	; (80013b8 <EXTI0_IRQHandler+0x28>)
 800139a:	f043 0301 	orr.w	r3, r3, #1
 800139e:	6153      	str	r3, [r2, #20]

	active_page->center_button_handler();
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <EXTI0_IRQHandler+0x2c>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <EXTI0_IRQHandler+0x2c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	3320      	adds	r3, #32
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4610      	mov	r0, r2
 80013b0:	4798      	blx	r3
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40010400 	.word	0x40010400
 80013bc:	20000420 	.word	0x20000420

080013c0 <EXTI1_IRQHandler>:

// Left
void EXTI1_IRQHandler(void) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
	EXTI->PR1 |= EXTI_PR1_PIF1; // Clear interrupt pending bit
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <EXTI1_IRQHandler+0x28>)
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	4a07      	ldr	r2, [pc, #28]	; (80013e8 <EXTI1_IRQHandler+0x28>)
 80013ca:	f043 0302 	orr.w	r3, r3, #2
 80013ce:	6153      	str	r3, [r2, #20]

	active_page->left_button_handler();
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <EXTI1_IRQHandler+0x2c>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <EXTI1_IRQHandler+0x2c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	3318      	adds	r3, #24
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4610      	mov	r0, r2
 80013e0:	4798      	blx	r3
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40010400 	.word	0x40010400
 80013ec:	20000420 	.word	0x20000420

080013f0 <EXTI2_IRQHandler>:

// Right
void EXTI2_IRQHandler(void) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
	EXTI->PR1 |= EXTI_PR1_PIF2; // Clear interrupt pending bit
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <EXTI2_IRQHandler+0x28>)
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	4a07      	ldr	r2, [pc, #28]	; (8001418 <EXTI2_IRQHandler+0x28>)
 80013fa:	f043 0304 	orr.w	r3, r3, #4
 80013fe:	6153      	str	r3, [r2, #20]

	active_page->right_button_handler();
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <EXTI2_IRQHandler+0x2c>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <EXTI2_IRQHandler+0x2c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	331c      	adds	r3, #28
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4610      	mov	r0, r2
 8001410:	4798      	blx	r3
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40010400 	.word	0x40010400
 800141c:	20000420 	.word	0x20000420

08001420 <EXTI3_IRQHandler>:

// Up
void EXTI3_IRQHandler(void) {
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
	EXTI->PR1 |= EXTI_PR1_PIF3; // Clear interrupt pending bit
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <EXTI3_IRQHandler+0x28>)
 8001426:	695b      	ldr	r3, [r3, #20]
 8001428:	4a07      	ldr	r2, [pc, #28]	; (8001448 <EXTI3_IRQHandler+0x28>)
 800142a:	f043 0308 	orr.w	r3, r3, #8
 800142e:	6153      	str	r3, [r2, #20]

	active_page->up_button_handler();
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <EXTI3_IRQHandler+0x2c>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <EXTI3_IRQHandler+0x2c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	3310      	adds	r3, #16
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4610      	mov	r0, r2
 8001440:	4798      	blx	r3
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40010400 	.word	0x40010400
 800144c:	20000420 	.word	0x20000420

08001450 <EXTI9_5_IRQHandler>:

// Down
void EXTI9_5_IRQHandler(void) {
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
	EXTI->PR1 |= EXTI_PR1_PIF5; // Clear interrupt pending bit
 8001454:	4b08      	ldr	r3, [pc, #32]	; (8001478 <EXTI9_5_IRQHandler+0x28>)
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	4a07      	ldr	r2, [pc, #28]	; (8001478 <EXTI9_5_IRQHandler+0x28>)
 800145a:	f043 0320 	orr.w	r3, r3, #32
 800145e:	6153      	str	r3, [r2, #20]

	active_page->down_button_handler();
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <EXTI9_5_IRQHandler+0x2c>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <EXTI9_5_IRQHandler+0x2c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	3314      	adds	r3, #20
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4610      	mov	r0, r2
 8001470:	4798      	blx	r3
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40010400 	.word	0x40010400
 800147c:	20000420 	.word	0x20000420

08001480 <_get_employee_index>:
#include "employee.h"

num_employees = 0;
Employee* employees[] = {};

int _get_employee_index(int id) {
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < num_employees; i++)
 8001488:	2300      	movs	r3, #0
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	e00c      	b.n	80014a8 <_get_employee_index+0x28>
        if (employees[i]->id == id)
 800148e:	4a0d      	ldr	r2, [pc, #52]	; (80014c4 <_get_employee_index+0x44>)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	429a      	cmp	r2, r3
 800149c:	d101      	bne.n	80014a2 <_get_employee_index+0x22>
            return i;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	e009      	b.n	80014b6 <_get_employee_index+0x36>
    for (int i = 0; i < num_employees; i++)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	3301      	adds	r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <_get_employee_index+0x48>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	dbed      	blt.n	800148e <_get_employee_index+0xe>
    return -1;
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	200002e4 	.word	0x200002e4
 80014c8:	200002e0 	.word	0x200002e0

080014cc <get_employee>:

Employee* get_employee(int id) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	return employees[_get_employee_index(id)];
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff ffd3 	bl	8001480 <_get_employee_index>
 80014da:	4602      	mov	r2, r0
 80014dc:	4b03      	ldr	r3, [pc, #12]	; (80014ec <get_employee+0x20>)
 80014de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200002e4 	.word	0x200002e4

080014f0 <add_event>:

void add_event(int id, int clock_in, time_t t) {
 80014f0:	b5b0      	push	{r4, r5, r7, lr}
 80014f2:	b090      	sub	sp, #64	; 0x40
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	e9c7 2300 	strd	r2, r3, [r7]
    Event event = (Event) {
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	617b      	str	r3, [r7, #20]
        .clock_in = clock_in,
        .timestamp = *localtime(&t)
 8001502:	463b      	mov	r3, r7
 8001504:	4618      	mov	r0, r3
 8001506:	f006 f80b 	bl	8007520 <localtime>
 800150a:	4603      	mov	r3, r0
    Event event = (Event) {
 800150c:	f107 0418 	add.w	r4, r7, #24
 8001510:	461d      	mov	r5, r3
 8001512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800151a:	682b      	ldr	r3, [r5, #0]
 800151c:	6023      	str	r3, [r4, #0]
    };
    
    Employee * e = get_employee(id);
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f7ff ffd4 	bl	80014cc <get_employee>
 8001524:	63f8      	str	r0, [r7, #60]	; 0x3c
    e->events[e->num_events++] = event;
 8001526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001528:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 800152c:	1c51      	adds	r1, r2, #1
 800152e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001530:	f8c3 1810 	str.w	r1, [r3, #2064]	; 0x810
 8001534:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001536:	4613      	mov	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	440b      	add	r3, r1
 8001540:	3340      	adds	r3, #64	; 0x40
 8001542:	461d      	mov	r5, r3
 8001544:	f107 0414 	add.w	r4, r7, #20
 8001548:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800154a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800154c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800154e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001550:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001554:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001558:	bf00      	nop
 800155a:	3740      	adds	r7, #64	; 0x40
 800155c:	46bd      	mov	sp, r7
 800155e:	bdb0      	pop	{r4, r5, r7, pc}

08001560 <add_employee>:
    Employee * e = get_employee(id);
    memset(&e->events[0], 0, sizeof(e->events));
    e->num_events = 0;
}

void add_employee(int id, char* name, int wage, int admin) {
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	ed2d 8b02 	vpush	{d8}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
 8001570:	603b      	str	r3, [r7, #0]
    employees[num_employees] = malloc(sizeof(Employee));
 8001572:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <add_employee+0x7c>)
 8001574:	681c      	ldr	r4, [r3, #0]
 8001576:	f640 0014 	movw	r0, #2068	; 0x814
 800157a:	f006 f933 	bl	80077e4 <malloc>
 800157e:	4603      	mov	r3, r0
 8001580:	461a      	mov	r2, r3
 8001582:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <add_employee+0x80>)
 8001584:	f843 2024 	str.w	r2, [r3, r4, lsl #2]

    *employees[num_employees] = (Employee) {
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <add_employee+0x7c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a14      	ldr	r2, [pc, #80]	; (80015e0 <add_employee+0x80>)
 800158e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	ee07 3a90 	vmov	s15, r3
 8001598:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800159c:	4620      	mov	r0, r4
 800159e:	f640 0314 	movw	r3, #2068	; 0x814
 80015a2:	461a      	mov	r2, r3
 80015a4:	2100      	movs	r1, #0
 80015a6:	f006 f938 	bl	800781a <memset>
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6023      	str	r3, [r4, #0]
 80015ae:	ed84 8a0e 	vstr	s16, [r4, #56]	; 0x38
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	63e3      	str	r3, [r4, #60]	; 0x3c
        .wage = wage,
        .admin = admin,
        .num_events = 0
    };

    strcpy(employees[num_employees++]->name, name);
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <add_employee+0x7c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	4907      	ldr	r1, [pc, #28]	; (80015dc <add_employee+0x7c>)
 80015be:	600a      	str	r2, [r1, #0]
 80015c0:	4a07      	ldr	r2, [pc, #28]	; (80015e0 <add_employee+0x80>)
 80015c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c6:	3304      	adds	r3, #4
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f007 fa4c 	bl	8008a68 <strcpy>
}
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	ecbd 8b02 	vpop	{d8}
 80015da:	bd90      	pop	{r4, r7, pc}
 80015dc:	200002e0 	.word	0x200002e0
 80015e0:	200002e4 	.word	0x200002e4

080015e4 <calculate_hours>:
    num_employees--;
    for (; i < num_employees; i++)
        employees[i] = employees[i + 1];
}

float calculate_hours(Employee* e) {
 80015e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
    float secs = 0;
 80015ec:	f04f 0300 	mov.w	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
    for (int j = 0; j < e->num_events - e->num_events % 2 - 1; j += 2)
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	e038      	b.n	800166a <calculate_hours+0x86>
        secs += difftime(mktime(&e->events[j + 1].timestamp), mktime(&e->events[j].timestamp));
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	1c5a      	adds	r2, r3, #1
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	3340      	adds	r3, #64	; 0x40
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	3304      	adds	r3, #4
 800160c:	4618      	mov	r0, r3
 800160e:	f006 f9e7 	bl	80079e0 <mktime>
 8001612:	4604      	mov	r4, r0
 8001614:	460d      	mov	r5, r1
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	4613      	mov	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	3340      	adds	r3, #64	; 0x40
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	3304      	adds	r3, #4
 8001628:	4618      	mov	r0, r3
 800162a:	f006 f9d9 	bl	80079e0 <mktime>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4620      	mov	r0, r4
 8001634:	4629      	mov	r1, r5
 8001636:	f005 fc60 	bl	8006efa <difftime>
 800163a:	ec56 5b10 	vmov	r5, r6, d0
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f7fe ff92 	bl	8000568 <__aeabi_f2d>
 8001644:	4603      	mov	r3, r0
 8001646:	460c      	mov	r4, r1
 8001648:	461a      	mov	r2, r3
 800164a:	4623      	mov	r3, r4
 800164c:	4628      	mov	r0, r5
 800164e:	4631      	mov	r1, r6
 8001650:	f7fe fe2c 	bl	80002ac <__adddf3>
 8001654:	4603      	mov	r3, r0
 8001656:	460c      	mov	r4, r1
 8001658:	4618      	mov	r0, r3
 800165a:	4621      	mov	r1, r4
 800165c:	f7ff fab4 	bl	8000bc8 <__aeabi_d2f>
 8001660:	4603      	mov	r3, r0
 8001662:	60fb      	str	r3, [r7, #12]
    for (int j = 0; j < e->num_events - e->num_events % 2 - 1; j += 2)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	3302      	adds	r3, #2
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 8001676:	2b00      	cmp	r3, #0
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	bfb8      	it	lt
 800167e:	425b      	neglt	r3, r3
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	3b01      	subs	r3, #1
 8001684:	68ba      	ldr	r2, [r7, #8]
 8001686:	429a      	cmp	r2, r3
 8001688:	dbb6      	blt.n	80015f8 <calculate_hours+0x14>
    
    return secs / 3600; // Hours
 800168a:	edd7 7a03 	vldr	s15, [r7, #12]
 800168e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80016a4 <calculate_hours+0xc0>
 8001692:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001696:	eef0 7a66 	vmov.f32	s15, s13
}
 800169a:	eeb0 0a67 	vmov.f32	s0, s15
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016a4:	45610000 	.word	0x45610000

080016a8 <calculate_pay>:

float calculate_pay(Employee* e) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	ed2d 8b02 	vpush	{d8}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
    return e->wage * calculate_hours(e);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	ed93 8a0e 	vldr	s16, [r3, #56]	; 0x38
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ff92 	bl	80015e4 <calculate_hours>
 80016c0:	eef0 7a40 	vmov.f32	s15, s0
 80016c4:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 80016c8:	eeb0 0a67 	vmov.f32	s0, s15
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	ecbd 8b02 	vpop	{d8}
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <add_demo_data>:

void add_demo_data() {
 80016d8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80016dc:	b084      	sub	sp, #16
 80016de:	af00      	add	r7, sp, #0
    time_t t = 1613980800, hr = 3600;
 80016e0:	a482      	add	r4, pc, #520	; (adr r4, 80018ec <add_demo_data+0x214>)
 80016e2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80016e6:	e9c7 3402 	strd	r3, r4, [r7, #8]
 80016ea:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80016ee:	f04f 0400 	mov.w	r4, #0
 80016f2:	e9c7 3400 	strd	r3, r4, [r7]
    
    add_employee(796, (char*) "Alice", 10, 0);
 80016f6:	2300      	movs	r3, #0
 80016f8:	220a      	movs	r2, #10
 80016fa:	4975      	ldr	r1, [pc, #468]	; (80018d0 <add_demo_data+0x1f8>)
 80016fc:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8001700:	f7ff ff2e 	bl	8001560 <add_employee>
    add_employee(301, (char*) "Bob", 12, 0);
 8001704:	2300      	movs	r3, #0
 8001706:	220c      	movs	r2, #12
 8001708:	4972      	ldr	r1, [pc, #456]	; (80018d4 <add_demo_data+0x1fc>)
 800170a:	f240 102d 	movw	r0, #301	; 0x12d
 800170e:	f7ff ff27 	bl	8001560 <add_employee>
    add_employee(289, (char*) "Charlie", 15, 1);
 8001712:	2301      	movs	r3, #1
 8001714:	220f      	movs	r2, #15
 8001716:	4970      	ldr	r1, [pc, #448]	; (80018d8 <add_demo_data+0x200>)
 8001718:	f240 1021 	movw	r0, #289	; 0x121
 800171c:	f7ff ff20 	bl	8001560 <add_employee>
    add_employee(445, (char*) "Daniel", 25, 0);
 8001720:	2300      	movs	r3, #0
 8001722:	2219      	movs	r2, #25
 8001724:	496d      	ldr	r1, [pc, #436]	; (80018dc <add_demo_data+0x204>)
 8001726:	f240 10bd 	movw	r0, #445	; 0x1bd
 800172a:	f7ff ff19 	bl	8001560 <add_employee>
    add_employee(631, (char*) "Edgar", 32, 1);
 800172e:	2301      	movs	r3, #1
 8001730:	2220      	movs	r2, #32
 8001732:	496b      	ldr	r1, [pc, #428]	; (80018e0 <add_demo_data+0x208>)
 8001734:	f240 2077 	movw	r0, #631	; 0x277
 8001738:	f7ff ff12 	bl	8001560 <add_employee>
    add_employee(132, (char*) "Fulgencio", 14, 0);
 800173c:	2300      	movs	r3, #0
 800173e:	220e      	movs	r2, #14
 8001740:	4968      	ldr	r1, [pc, #416]	; (80018e4 <add_demo_data+0x20c>)
 8001742:	2084      	movs	r0, #132	; 0x84
 8001744:	f7ff ff0c 	bl	8001560 <add_employee>
    add_employee(877, (char*) "Gunther", 40, 1);
 8001748:	2301      	movs	r3, #1
 800174a:	2228      	movs	r2, #40	; 0x28
 800174c:	4966      	ldr	r1, [pc, #408]	; (80018e8 <add_demo_data+0x210>)
 800174e:	f240 306d 	movw	r0, #877	; 0x36d
 8001752:	f7ff ff05 	bl	8001560 <add_employee>
    
    add_event(796, 1, t);
 8001756:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800175a:	2101      	movs	r1, #1
 800175c:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8001760:	f7ff fec6 	bl	80014f0 <add_event>
    add_event(796, 0, t + 4 * hr);
 8001764:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001768:	f04f 0500 	mov.w	r5, #0
 800176c:	f04f 0600 	mov.w	r6, #0
 8001770:	0096      	lsls	r6, r2, #2
 8001772:	ea46 7691 	orr.w	r6, r6, r1, lsr #30
 8001776:	008d      	lsls	r5, r1, #2
 8001778:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800177c:	186b      	adds	r3, r5, r1
 800177e:	eb46 0402 	adc.w	r4, r6, r2
 8001782:	461a      	mov	r2, r3
 8001784:	4623      	mov	r3, r4
 8001786:	2100      	movs	r1, #0
 8001788:	f44f 7047 	mov.w	r0, #796	; 0x31c
 800178c:	f7ff feb0 	bl	80014f0 <add_event>
    add_event(796, 1, t + 5 * hr);
 8001790:	e9d7 5600 	ldrd	r5, r6, [r7]
 8001794:	46ab      	mov	fp, r5
 8001796:	46b4      	mov	ip, r6
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	f04f 0400 	mov.w	r4, #0
 80017a0:	ea4f 048c 	mov.w	r4, ip, lsl #2
 80017a4:	ea44 749b 	orr.w	r4, r4, fp, lsr #30
 80017a8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80017ac:	469b      	mov	fp, r3
 80017ae:	46a4      	mov	ip, r4
 80017b0:	eb1b 0105 	adds.w	r1, fp, r5
 80017b4:	eb4c 0206 	adc.w	r2, ip, r6
 80017b8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80017bc:	185d      	adds	r5, r3, r1
 80017be:	eb44 0602 	adc.w	r6, r4, r2
 80017c2:	462a      	mov	r2, r5
 80017c4:	4633      	mov	r3, r6
 80017c6:	2101      	movs	r1, #1
 80017c8:	f44f 7047 	mov.w	r0, #796	; 0x31c
 80017cc:	f7ff fe90 	bl	80014f0 <add_event>
    add_event(796, 0, t + 8 * hr);
 80017d0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80017d4:	f04f 0500 	mov.w	r5, #0
 80017d8:	f04f 0600 	mov.w	r6, #0
 80017dc:	00d6      	lsls	r6, r2, #3
 80017de:	ea46 7651 	orr.w	r6, r6, r1, lsr #29
 80017e2:	00cd      	lsls	r5, r1, #3
 80017e4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80017e8:	186b      	adds	r3, r5, r1
 80017ea:	eb46 0402 	adc.w	r4, r6, r2
 80017ee:	461a      	mov	r2, r3
 80017f0:	4623      	mov	r3, r4
 80017f2:	2100      	movs	r1, #0
 80017f4:	f44f 7047 	mov.w	r0, #796	; 0x31c
 80017f8:	f7ff fe7a 	bl	80014f0 <add_event>
    
    add_event(301, 1, t + 120);
 80017fc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001800:	f113 0178 	adds.w	r1, r3, #120	; 0x78
 8001804:	f144 0200 	adc.w	r2, r4, #0
 8001808:	4613      	mov	r3, r2
 800180a:	460a      	mov	r2, r1
 800180c:	2101      	movs	r1, #1
 800180e:	f240 102d 	movw	r0, #301	; 0x12d
 8001812:	f7ff fe6d 	bl	80014f0 <add_event>
    add_event(301, 0, t + 8 * hr + 60);
 8001816:	e9d7 1200 	ldrd	r1, r2, [r7]
 800181a:	f04f 0300 	mov.w	r3, #0
 800181e:	f04f 0400 	mov.w	r4, #0
 8001822:	00d4      	lsls	r4, r2, #3
 8001824:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001828:	00cb      	lsls	r3, r1, #3
 800182a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800182e:	185d      	adds	r5, r3, r1
 8001830:	eb44 0602 	adc.w	r6, r4, r2
 8001834:	f115 033c 	adds.w	r3, r5, #60	; 0x3c
 8001838:	f146 0400 	adc.w	r4, r6, #0
 800183c:	461a      	mov	r2, r3
 800183e:	4623      	mov	r3, r4
 8001840:	2100      	movs	r1, #0
 8001842:	f240 102d 	movw	r0, #301	; 0x12d
 8001846:	f7ff fe53 	bl	80014f0 <add_event>
    
    add_event(289, 1, t + 240);
 800184a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800184e:	f113 01f0 	adds.w	r1, r3, #240	; 0xf0
 8001852:	f144 0200 	adc.w	r2, r4, #0
 8001856:	4613      	mov	r3, r2
 8001858:	460a      	mov	r2, r1
 800185a:	2101      	movs	r1, #1
 800185c:	f240 1021 	movw	r0, #289	; 0x121
 8001860:	f7ff fe46 	bl	80014f0 <add_event>
    add_event(289, 0, t + 7 * hr + 1800);
 8001864:	e9d7 5600 	ldrd	r5, r6, [r7]
 8001868:	46ab      	mov	fp, r5
 800186a:	46b4      	mov	ip, r6
 800186c:	f04f 0300 	mov.w	r3, #0
 8001870:	f04f 0400 	mov.w	r4, #0
 8001874:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 8001878:	ea44 745b 	orr.w	r4, r4, fp, lsr #29
 800187c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001880:	469b      	mov	fp, r3
 8001882:	46a4      	mov	ip, r4
 8001884:	4659      	mov	r1, fp
 8001886:	4662      	mov	r2, ip
 8001888:	1b49      	subs	r1, r1, r5
 800188a:	eb62 0206 	sbc.w	r2, r2, r6
 800188e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001892:	185d      	adds	r5, r3, r1
 8001894:	eb44 0602 	adc.w	r6, r4, r2
 8001898:	f515 63e1 	adds.w	r3, r5, #1800	; 0x708
 800189c:	f146 0400 	adc.w	r4, r6, #0
 80018a0:	461a      	mov	r2, r3
 80018a2:	4623      	mov	r3, r4
 80018a4:	2100      	movs	r1, #0
 80018a6:	f240 1021 	movw	r0, #289	; 0x121
 80018aa:	f7ff fe21 	bl	80014f0 <add_event>

    add_event(132, 1, t + 240);
 80018ae:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80018b2:	f113 01f0 	adds.w	r1, r3, #240	; 0xf0
 80018b6:	f144 0200 	adc.w	r2, r4, #0
 80018ba:	4613      	mov	r3, r2
 80018bc:	460a      	mov	r2, r1
 80018be:	2101      	movs	r1, #1
 80018c0:	2084      	movs	r0, #132	; 0x84
 80018c2:	f7ff fe15 	bl	80014f0 <add_event>
}
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80018d0:	0800bf04 	.word	0x0800bf04
 80018d4:	0800bf0c 	.word	0x0800bf0c
 80018d8:	0800bf10 	.word	0x0800bf10
 80018dc:	0800bf18 	.word	0x0800bf18
 80018e0:	0800bf20 	.word	0x0800bf20
 80018e4:	0800bf28 	.word	0x0800bf28
 80018e8:	0800bf34 	.word	0x0800bf34
 80018ec:	60336480 	.word	0x60336480
 80018f0:	00000000 	.word	0x00000000

080018f4 <_ZN7PinNameC1EP12GPIO_TypeDefjPv>:
#include "../../../Drivers/ILI9341_Display_Driver/compat/platform.h"

class PinName {
public:
	PinName() : m_port(0), m_pin(0), m_obj(0) {}
	PinName(GPIO_TypeDef* port, unsigned pin, void* obj = 0)
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
 8001900:	603b      	str	r3, [r7, #0]
		: m_port(port), m_pin(pin), m_obj(obj)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	68ba      	ldr	r2, [r7, #8]
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	609a      	str	r2, [r3, #8]
		{
			assert_param(m_port != 0);
		}
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4618      	mov	r0, r3
 8001918:	3714      	adds	r7, #20
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <_ZL12pin_init_outR7PinName>:
//#include "../Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_spi.h"
#include "stm32l4xx_hal_spi.h"
#include "stm32l4xx_hal_spi_ex.h"

static inline void pin_init_out(PinName& p)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b088      	sub	sp, #32
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStructure;
	
	assert_param(p.m_port != 0);

	GPIO_InitStructure.Pin = p.m_pin;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001930:	2301      	movs	r3, #1
 8001932:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001938:	2302      	movs	r3, #2
 800193a:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(p.m_port, &GPIO_InitStructure);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f107 020c 	add.w	r2, r7, #12
 8001944:	4611      	mov	r1, r2
 8001946:	4618      	mov	r0, r3
 8001948:	f004 f942 	bl	8005bd0 <HAL_GPIO_Init>
}
 800194c:	bf00      	nop
 800194e:	3720      	adds	r7, #32
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <_ZL11pin_init_afR7PinNameh>:

static inline void pin_init_af(PinName& p, uint8_t af)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_InitStructure;
	
	assert_param(p.m_port != 0);

	GPIO_InitStructure.Pin = p.m_pin;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001966:	2302      	movs	r3, #2
 8001968:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800196e:	2302      	movs	r3, #2
 8001970:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Alternate = af;
 8001972:	78fb      	ldrb	r3, [r7, #3]
 8001974:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(p.m_port, &GPIO_InitStructure);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f107 020c 	add.w	r2, r7, #12
 800197e:	4611      	mov	r1, r2
 8001980:	4618      	mov	r0, r3
 8001982:	f004 f925 	bl	8005bd0 <HAL_GPIO_Init>
}
 8001986:	bf00      	nop
 8001988:	3720      	adds	r7, #32
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <_ZL15spi_handle_initP19__SPI_HandleTypeDefhhm>:

static inline void spi_handle_init(SPI_HandleTypeDef* hspi, uint8_t bits, uint8_t mode, uint32_t prescaler)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b084      	sub	sp, #16
 8001992:	af00      	add	r7, sp, #0
 8001994:	60f8      	str	r0, [r7, #12]
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	72fb      	strb	r3, [r7, #11]
 800199c:	4613      	mov	r3, r2
 800199e:	72bb      	strb	r3, [r7, #10]
	assert_param(hspi->Instance);

	hspi->Init.BaudRatePrescaler = prescaler;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	61da      	str	r2, [r3, #28]
	hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
	hspi->Init.CLKPhase = mode & SPI_CR1_CPHA;
 80019ac:	7aba      	ldrb	r2, [r7, #10]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f002 0201 	and.w	r2, r2, #1
 80019b4:	615a      	str	r2, [r3, #20]
	hspi->Init.CLKPolarity = mode & SPI_CR1_CPOL;
 80019b6:	7aba      	ldrb	r2, [r7, #10]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f002 0202 	and.w	r2, r2, #2
 80019be:	611a      	str	r2, [r3, #16]
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi->Init.CRCPolynomial = 7;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2207      	movs	r2, #7
 80019ca:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi->Init.DataSize = (bits - 1) << 8;
 80019cc:	7afb      	ldrb	r3, [r7, #11]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	021a      	lsls	r2, r3, #8
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	60da      	str	r2, [r3, #12]
	hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	621a      	str	r2, [r3, #32]
	hspi->Init.NSS = SPI_NSS_SOFT;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019e2:	619a      	str	r2, [r3, #24]
	hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	625a      	str	r2, [r3, #36]	; 0x24
	hspi->Init.Mode = SPI_MODE_MASTER;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019f0:	605a      	str	r2, [r3, #4]

	HAL_SPI_Init(hspi);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f005 f9a3 	bl	8006d40 <HAL_SPI_Init>

	__HAL_SPI_ENABLE(hspi);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a08:	601a      	str	r2, [r3, #0]
}
 8001a0a:	bf00      	nop
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <_Z8get_pagePc>:
int num_pages = 0;
Page* pages[] = {};
Page* active_page = nullptr;
Display* lcd = nullptr;

Page* get_page(char* name) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < num_pages; i++)
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <_Z8get_pagePc+0x4c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	da14      	bge.n	8001a54 <_Z8get_pagePc+0x40>
		if (!strcmp(name, pages[i]->name))
 8001a2a:	4a0e      	ldr	r2, [pc, #56]	; (8001a64 <_Z8get_pagePc+0x50>)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a32:	3308      	adds	r3, #8
 8001a34:	4619      	mov	r1, r3
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7fe fbca 	bl	80001d0 <strcmp>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d104      	bne.n	8001a4c <_Z8get_pagePc+0x38>
			return pages[i];
 8001a42:	4a08      	ldr	r2, [pc, #32]	; (8001a64 <_Z8get_pagePc+0x50>)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a4a:	e004      	b.n	8001a56 <_Z8get_pagePc+0x42>
	for (int i = 0; i < num_pages; i++)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	e7e5      	b.n	8001a20 <_Z8get_pagePc+0xc>
	return nullptr;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200003f4 	.word	0x200003f4
 8001a64:	200003f8 	.word	0x200003f8

08001a68 <_Z8add_pageP4Page>:

void add_page(Page* p) {
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	pages[num_pages++] = p;
 8001a70:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <_Z8add_pageP4Page+0x28>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	4906      	ldr	r1, [pc, #24]	; (8001a90 <_Z8add_pageP4Page+0x28>)
 8001a78:	600a      	str	r2, [r1, #0]
 8001a7a:	4906      	ldr	r1, [pc, #24]	; (8001a94 <_Z8add_pageP4Page+0x2c>)
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	200003f4 	.word	0x200003f4
 8001a94:	200003f8 	.word	0x200003f8

08001a98 <_Z9lcd_startv>:

void lcd_start(void) {
 8001a98:	b5b0      	push	{r4, r5, r7, lr}
 8001a9a:	b0a6      	sub	sp, #152	; 0x98
 8001a9c:	af10      	add	r7, sp, #64	; 0x40
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001a9e:	4b61      	ldr	r3, [pc, #388]	; (8001c24 <_Z9lcd_startv+0x18c>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa2:	4a60      	ldr	r2, [pc, #384]	; (8001c24 <_Z9lcd_startv+0x18c>)
 8001aa4:	f043 0310 	orr.w	r3, r3, #16
 8001aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aaa:	4b5e      	ldr	r3, [pc, #376]	; (8001c24 <_Z9lcd_startv+0x18c>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	f003 0310 	and.w	r3, r3, #16
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001ab6:	4b5b      	ldr	r3, [pc, #364]	; (8001c24 <_Z9lcd_startv+0x18c>)
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aba:	4a5a      	ldr	r2, [pc, #360]	; (8001c24 <_Z9lcd_startv+0x18c>)
 8001abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ac2:	4b58      	ldr	r3, [pc, #352]	; (8001c24 <_Z9lcd_startv+0x18c>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_SPI1_CLK_ENABLE();
 8001ace:	4b55      	ldr	r3, [pc, #340]	; (8001c24 <_Z9lcd_startv+0x18c>)
 8001ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ad2:	4a54      	ldr	r2, [pc, #336]	; (8001c24 <_Z9lcd_startv+0x18c>)
 8001ad4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ad8:	6613      	str	r3, [r2, #96]	; 0x60
 8001ada:	4b52      	ldr	r3, [pc, #328]	; (8001c24 <_Z9lcd_startv+0x18c>)
 8001adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ade:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ae2:	607b      	str	r3, [r7, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]

	pin_init_out(s_lcd_cs);
 8001ae6:	4850      	ldr	r0, [pc, #320]	; (8001c28 <_Z9lcd_startv+0x190>)
 8001ae8:	f7ff ff1b 	bl	8001922 <_ZL12pin_init_outR7PinName>
	pin_init_out(s_lcd_dc);
 8001aec:	484f      	ldr	r0, [pc, #316]	; (8001c2c <_Z9lcd_startv+0x194>)
 8001aee:	f7ff ff18 	bl	8001922 <_ZL12pin_init_outR7PinName>
	pin_init_out(s_lcd_rst);
 8001af2:	484f      	ldr	r0, [pc, #316]	; (8001c30 <_Z9lcd_startv+0x198>)
 8001af4:	f7ff ff15 	bl	8001922 <_ZL12pin_init_outR7PinName>

	pin_init_af(s_lcd_mosi, LCD_SPI_AF);
 8001af8:	2105      	movs	r1, #5
 8001afa:	484e      	ldr	r0, [pc, #312]	; (8001c34 <_Z9lcd_startv+0x19c>)
 8001afc:	f7ff ff2a 	bl	8001954 <_ZL11pin_init_afR7PinNameh>
	pin_init_af(s_lcd_miso, LCD_SPI_AF);
 8001b00:	2105      	movs	r1, #5
 8001b02:	484d      	ldr	r0, [pc, #308]	; (8001c38 <_Z9lcd_startv+0x1a0>)
 8001b04:	f7ff ff26 	bl	8001954 <_ZL11pin_init_afR7PinNameh>
	pin_init_af(s_lcd_sclk, LCD_SPI_AF);
 8001b08:	2105      	movs	r1, #5
 8001b0a:	484c      	ldr	r0, [pc, #304]	; (8001c3c <_Z9lcd_startv+0x1a4>)
 8001b0c:	f7ff ff22 	bl	8001954 <_ZL11pin_init_afR7PinNameh>

	// SPI baudrate is set to 40 MHz (PCLK1/SPI_BaudRatePrescaler = 80/2 = 40 MHz)
	spi_handle_init(&s_lcd_spi, 8, 0, SPI_BAUDRATEPRESCALER_2);
 8001b10:	2300      	movs	r3, #0
 8001b12:	2200      	movs	r2, #0
 8001b14:	2108      	movs	r1, #8
 8001b16:	484a      	ldr	r0, [pc, #296]	; (8001c40 <_Z9lcd_startv+0x1a8>)
 8001b18:	f7ff ff39 	bl	800198e <_ZL15spi_handle_initP19__SPI_HandleTypeDefhhm>

	lcd = new Display(s_lcd_mosi, s_lcd_miso, s_lcd_sclk, s_lcd_cs, s_lcd_rst, s_lcd_dc);
 8001b1c:	4a45      	ldr	r2, [pc, #276]	; (8001c34 <_Z9lcd_startv+0x19c>)
 8001b1e:	f107 0310 	add.w	r3, r7, #16
 8001b22:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b24:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001b28:	4a43      	ldr	r2, [pc, #268]	; (8001c38 <_Z9lcd_startv+0x1a0>)
 8001b2a:	f107 031c 	add.w	r3, r7, #28
 8001b2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001b34:	4a41      	ldr	r2, [pc, #260]	; (8001c3c <_Z9lcd_startv+0x1a4>)
 8001b36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001b40:	4a39      	ldr	r2, [pc, #228]	; (8001c28 <_Z9lcd_startv+0x190>)
 8001b42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b46:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b48:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001b4c:	4a38      	ldr	r2, [pc, #224]	; (8001c30 <_Z9lcd_startv+0x198>)
 8001b4e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b52:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001b58:	4a34      	ldr	r2, [pc, #208]	; (8001c2c <_Z9lcd_startv+0x194>)
 8001b5a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b60:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001b64:	2058      	movs	r0, #88	; 0x58
 8001b66:	f005 f98e 	bl	8006e86 <_Znwj>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	461d      	mov	r5, r3
 8001b6e:	4b35      	ldr	r3, [pc, #212]	; (8001c44 <_Z9lcd_startv+0x1ac>)
 8001b70:	930f      	str	r3, [sp, #60]	; 0x3c
 8001b72:	ac0c      	add	r4, sp, #48	; 0x30
 8001b74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b78:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001b80:	ac09      	add	r4, sp, #36	; 0x24
 8001b82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001b8e:	ac06      	add	r4, sp, #24
 8001b90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b94:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001b9c:	ac03      	add	r4, sp, #12
 8001b9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ba2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001ba6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001baa:	466c      	mov	r4, sp
 8001bac:	f107 031c 	add.w	r3, r7, #28
 8001bb0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001bb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001bb8:	f107 0310 	add.w	r3, r7, #16
 8001bbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bbe:	4628      	mov	r0, r5
 8001bc0:	f7ff fa0a 	bl	8000fd8 <_ZN7DisplayC1E7PinNameS0_S0_S0_S0_S0_PKc>
 8001bc4:	4b20      	ldr	r3, [pc, #128]	; (8001c48 <_Z9lcd_startv+0x1b0>)
 8001bc6:	601d      	str	r5, [r3, #0]

//	bouncing_ball(lcd);
//	bmp_test(lcd);


	lcd->background(BG);  	  // set background to BG color
 8001bc8:	4b1f      	ldr	r3, [pc, #124]	; (8001c48 <_Z9lcd_startv+0x1b0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4b1e      	ldr	r3, [pc, #120]	; (8001c48 <_Z9lcd_startv+0x1b0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	331c      	adds	r3, #28
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f643 210c 	movw	r1, #14860	; 0x3a0c
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4798      	blx	r3
	lcd->foreground(White);    // set chars to white
 8001be0:	4b19      	ldr	r3, [pc, #100]	; (8001c48 <_Z9lcd_startv+0x1b0>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	461a      	mov	r2, r3
 8001be6:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <_Z9lcd_startv+0x1b0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	3318      	adds	r3, #24
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	4798      	blx	r3
	lcd->cls();                // clear the screen
 8001bf8:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <_Z9lcd_startv+0x1b0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <_Z9lcd_startv+0x1b0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	3310      	adds	r3, #16
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4610      	mov	r0, r2
 8001c0a:	4798      	blx	r3
	lcd->set_orientation(0);
 8001c0c:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <_Z9lcd_startv+0x1b0>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2100      	movs	r1, #0
 8001c12:	4618      	mov	r0, r3
 8001c14:	f002 fdb2 	bl	800477c <_ZN15SPI_TFT_ILI934115set_orientationEj>


	add_demo_data();
 8001c18:	f7ff fd5e 	bl	80016d8 <add_demo_data>


//	lcd.set_font((unsigned char*) Arial24x23);
//	lcd.character(0, 0, 'a');

}
 8001c1c:	bf00      	nop
 8001c1e:	3758      	adds	r7, #88	; 0x58
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bdb0      	pop	{r4, r5, r7, pc}
 8001c24:	40021000 	.word	0x40021000
 8001c28:	200003ac 	.word	0x200003ac
 8001c2c:	200003b8 	.word	0x200003b8
 8001c30:	200003c4 	.word	0x200003c4
 8001c34:	200003d0 	.word	0x200003d0
 8001c38:	200003dc 	.word	0x200003dc
 8001c3c:	200003e8 	.word	0x200003e8
 8001c40:	20000000 	.word	0x20000000
 8001c44:	0800bf3c 	.word	0x0800bf3c
 8001c48:	20000424 	.word	0x20000424

08001c4c <_Z41__static_initialization_and_destruction_0ii>:
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d12c      	bne.n	8001cb6 <_Z41__static_initialization_and_destruction_0ii+0x6a>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d127      	bne.n	8001cb6 <_Z41__static_initialization_and_destruction_0ii+0x6a>
static PinName s_lcd_cs (LCD_CS_PORT,  LCD_CS_PIN);
 8001c66:	2300      	movs	r3, #0
 8001c68:	2201      	movs	r2, #1
 8001c6a:	4915      	ldr	r1, [pc, #84]	; (8001cc0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8001c6c:	4815      	ldr	r0, [pc, #84]	; (8001cc4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001c6e:	f7ff fe41 	bl	80018f4 <_ZN7PinNameC1EP12GPIO_TypeDefjPv>
static PinName s_lcd_dc (LCD_DC_PORT,  LCD_DC_PIN);
 8001c72:	2300      	movs	r3, #0
 8001c74:	2202      	movs	r2, #2
 8001c76:	4912      	ldr	r1, [pc, #72]	; (8001cc0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8001c78:	4813      	ldr	r0, [pc, #76]	; (8001cc8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8001c7a:	f7ff fe3b 	bl	80018f4 <_ZN7PinNameC1EP12GPIO_TypeDefjPv>
static PinName s_lcd_rst(LCD_RST_PORT, LCD_RST_PIN);
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c84:	4911      	ldr	r1, [pc, #68]	; (8001ccc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8001c86:	4812      	ldr	r0, [pc, #72]	; (8001cd0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8001c88:	f7ff fe34 	bl	80018f4 <_ZN7PinNameC1EP12GPIO_TypeDefjPv>
static PinName s_lcd_mosi(LCD_SDI_PORT, LCD_SDI_PIN, &s_lcd_spi);
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8001c8e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c92:	490e      	ldr	r1, [pc, #56]	; (8001ccc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8001c94:	4810      	ldr	r0, [pc, #64]	; (8001cd8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001c96:	f7ff fe2d 	bl	80018f4 <_ZN7PinNameC1EP12GPIO_TypeDefjPv>
static PinName s_lcd_miso(LCD_SDO_PORT, LCD_SDO_PIN, &s_lcd_spi);
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8001c9c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ca0:	490a      	ldr	r1, [pc, #40]	; (8001ccc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8001ca2:	480e      	ldr	r0, [pc, #56]	; (8001cdc <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001ca4:	f7ff fe26 	bl	80018f4 <_ZN7PinNameC1EP12GPIO_TypeDefjPv>
static PinName s_lcd_sclk(LCD_SCK_PORT, LCD_SCK_PIN, &s_lcd_spi);
 8001ca8:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8001caa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cae:	4907      	ldr	r1, [pc, #28]	; (8001ccc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8001cb0:	480b      	ldr	r0, [pc, #44]	; (8001ce0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8001cb2:	f7ff fe1f 	bl	80018f4 <_ZN7PinNameC1EP12GPIO_TypeDefjPv>
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	48001c00 	.word	0x48001c00
 8001cc4:	200003ac 	.word	0x200003ac
 8001cc8:	200003b8 	.word	0x200003b8
 8001ccc:	48001000 	.word	0x48001000
 8001cd0:	200003c4 	.word	0x200003c4
 8001cd4:	20000000 	.word	0x20000000
 8001cd8:	200003d0 	.word	0x200003d0
 8001cdc:	200003dc 	.word	0x200003dc
 8001ce0:	200003e8 	.word	0x200003e8

08001ce4 <_GLOBAL__sub_I_num_pages>:
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001cec:	2001      	movs	r0, #1
 8001cee:	f7ff ffad 	bl	8001c4c <_Z41__static_initialization_and_destruction_0ii>
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <main>:
	datetime.tm_sec  = RTC_TIME_GetSecond();

	t = mktime(&datetime);
}

int main(void) {
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
	HAL_Init();
 8001cfa:	f003 fe29 	bl	8005950 <HAL_Init>
	SystemClock_Config(); // 80 MHz PLL ON
 8001cfe:	f000 f85b 	bl	8001db8 <SystemClock_Config>
	EXTI_Init();
 8001d02:	f7ff fa85 	bl	8001210 <EXTI_Init>

	lcd_start();
 8001d06:	f7ff fec7 	bl	8001a98 <_Z9lcd_startv>
//	USART_Init(USART1);
//
//	RTC_Init();

	// Add pages
	Page* p = new MainPage((char*) "main");
 8001d0a:	203c      	movs	r0, #60	; 0x3c
 8001d0c:	f005 f8bb 	bl	8006e86 <_Znwj>
 8001d10:	4603      	mov	r3, r0
 8001d12:	461c      	mov	r4, r3
 8001d14:	4923      	ldr	r1, [pc, #140]	; (8001da4 <main+0xb0>)
 8001d16:	4620      	mov	r0, r4
 8001d18:	f001 fac8 	bl	80032ac <_ZN8MainPageC1EPc>
 8001d1c:	607c      	str	r4, [r7, #4]
	add_page(p);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff fea2 	bl	8001a68 <_Z8add_pageP4Page>
	p = new EmployeeListPage((char*) "employees");
 8001d24:	203c      	movs	r0, #60	; 0x3c
 8001d26:	f005 f8ae 	bl	8006e86 <_Znwj>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	461c      	mov	r4, r3
 8001d2e:	491e      	ldr	r1, [pc, #120]	; (8001da8 <main+0xb4>)
 8001d30:	4620      	mov	r0, r4
 8001d32:	f000 fa4d 	bl	80021d0 <_ZN16EmployeeListPageC1EPc>
 8001d36:	607c      	str	r4, [r7, #4]
	add_page(p);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff fe95 	bl	8001a68 <_Z8add_pageP4Page>
	p = new EmployeeProfilePage((char*) "profile");
 8001d3e:	2040      	movs	r0, #64	; 0x40
 8001d40:	f005 f8a1 	bl	8006e86 <_Znwj>
 8001d44:	4603      	mov	r3, r0
 8001d46:	461c      	mov	r4, r3
 8001d48:	4918      	ldr	r1, [pc, #96]	; (8001dac <main+0xb8>)
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	f000 fdac 	bl	80028a8 <_ZN19EmployeeProfilePageC1EPc>
 8001d50:	607c      	str	r4, [r7, #4]
	add_page(p);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff fe88 	bl	8001a68 <_Z8add_pageP4Page>
	p = new PayrollPage((char*) "payroll");
 8001d58:	203c      	movs	r0, #60	; 0x3c
 8001d5a:	f005 f894 	bl	8006e86 <_Znwj>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	461c      	mov	r4, r3
 8001d62:	4913      	ldr	r1, [pc, #76]	; (8001db0 <main+0xbc>)
 8001d64:	4620      	mov	r0, r4
 8001d66:	f001 fe07 	bl	8003978 <_ZN11PayrollPageC1EPc>
 8001d6a:	607c      	str	r4, [r7, #4]
	add_page(p);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff fe7b 	bl	8001a68 <_Z8add_pageP4Page>
	p = new HelpPage((char*) "help");
 8001d72:	203c      	movs	r0, #60	; 0x3c
 8001d74:	f005 f887 	bl	8006e86 <_Znwj>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	461c      	mov	r4, r3
 8001d7c:	490d      	ldr	r1, [pc, #52]	; (8001db4 <main+0xc0>)
 8001d7e:	4620      	mov	r0, r4
 8001d80:	f001 f892 	bl	8002ea8 <_ZN8HelpPageC1EPc>
 8001d84:	607c      	str	r4, [r7, #4]
	add_page(p);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff fe6e 	bl	8001a68 <_Z8add_pageP4Page>

	get_page((char*) "main")->make_active();
 8001d8c:	4805      	ldr	r0, [pc, #20]	; (8001da4 <main+0xb0>)
 8001d8e:	f7ff fe41 	bl	8001a14 <_Z8get_pagePc>
 8001d92:	4602      	mov	r2, r0
 8001d94:	6813      	ldr	r3, [r2, #0]
 8001d96:	3308      	adds	r3, #8
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	4798      	blx	r3
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001da0:	b662      	cpsie	i
	__enable_irq();

	int id;
	time_t t;

	while (1);
 8001da2:	e7fe      	b.n	8001da2 <main+0xae>
 8001da4:	0800bf40 	.word	0x0800bf40
 8001da8:	0800bf48 	.word	0x0800bf48
 8001dac:	0800bf54 	.word	0x0800bf54
 8001db0:	0800bf5c 	.word	0x0800bf5c
 8001db4:	0800bf64 	.word	0x0800bf64

08001db8 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b098      	sub	sp, #96	; 0x60
 8001dbc:	af00      	add	r7, sp, #0
  /* oscillator and clocks configs */
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dbe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	609a      	str	r2, [r3, #8]
 8001dca:	60da      	str	r2, [r3, #12]
 8001dcc:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dce:	f107 030c 	add.w	r3, r7, #12
 8001dd2:	2240      	movs	r2, #64	; 0x40
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f005 fd1f 	bl	800781a <memset>
  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ddc:	4b37      	ldr	r3, [pc, #220]	; (8001ebc <SystemClock_Config+0x104>)
 8001dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de0:	4a36      	ldr	r2, [pc, #216]	; (8001ebc <SystemClock_Config+0x104>)
 8001de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de6:	6593      	str	r3, [r2, #88]	; 0x58
 8001de8:	4b34      	ldr	r3, [pc, #208]	; (8001ebc <SystemClock_Config+0x104>)
 8001dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	68bb      	ldr	r3, [r7, #8]

  if(HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001df4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001df8:	f004 f8bc 	bl	8005f74 <HAL_PWREx_ControlVoltageScaling>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	bf14      	ite	ne
 8001e02:	2301      	movne	r3, #1
 8001e04:	2300      	moveq	r3, #0
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <SystemClock_Config+0x58>
  {
    /* Initialization Error */
    Error_Handler();
 8001e0c:	f000 f858 	bl	8001ec0 <Error_Handler>
  }

  /* Disable Power Control clock */
  __HAL_RCC_PWR_CLK_DISABLE();
 8001e10:	4b2a      	ldr	r3, [pc, #168]	; (8001ebc <SystemClock_Config+0x104>)
 8001e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e14:	4a29      	ldr	r2, [pc, #164]	; (8001ebc <SystemClock_Config+0x104>)
 8001e16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e1a:	6593      	str	r3, [r2, #88]	; 0x58

  /* 80 Mhz from PLL with MSI 8Mhz as source clock */
  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001e1c:	2310      	movs	r3, #16
 8001e1e:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001e20:	2301      	movs	r3, #1
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;   /* 8 Mhz */
 8001e24:	2370      	movs	r3, #112	; 0x70
 8001e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001e30:	2301      	movs	r3, #1
 8001e32:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001e34:	2301      	movs	r3, #1
 8001e36:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001e38:	2314      	movs	r3, #20
 8001e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = 7;
 8001e40:	2307      	movs	r3, #7
 8001e42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e44:	2304      	movs	r3, #4
 8001e46:	647b      	str	r3, [r7, #68]	; 0x44
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e48:	f107 030c 	add.w	r3, r7, #12
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f004 f8e7 	bl	8006020 <HAL_RCC_OscConfig>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	bf14      	ite	ne
 8001e58:	2301      	movne	r3, #1
 8001e5a:	2300      	moveq	r3, #0
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <SystemClock_Config+0xae>
  {
    /* Initialization Error */
    Error_Handler();
 8001e62:	f000 f82d 	bl	8001ec0 <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001e66:	230f      	movs	r3, #15
 8001e68:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e72:	2300      	movs	r3, #0
 8001e74:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e76:	2300      	movs	r3, #0
 8001e78:	65fb      	str	r3, [r7, #92]	; 0x5c

  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e7a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e7e:	2104      	movs	r1, #4
 8001e80:	4618      	mov	r0, r3
 8001e82:	f004 fca5 	bl	80067d0 <HAL_RCC_ClockConfig>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bf14      	ite	ne
 8001e8c:	2301      	movne	r3, #1
 8001e8e:	2300      	moveq	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <SystemClock_Config+0xe2>
  {
    /* Initialization Error */
    Error_Handler();
 8001e96:	f000 f813 	bl	8001ec0 <Error_Handler>
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e9a:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <SystemClock_Config+0x104>)
 8001e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e9e:	4a07      	ldr	r2, [pc, #28]	; (8001ebc <SystemClock_Config+0x104>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ea6:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <SystemClock_Config+0x104>)
 8001ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	607b      	str	r3, [r7, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]

}
 8001eb2:	bf00      	nop
 8001eb4:	3760      	adds	r7, #96	; 0x60
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40021000 	.word	0x40021000

08001ec0 <Error_Handler>:

void Error_Handler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* Init Error Led Red */
  BSP_LED_Init(LED_RED);
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f002 f881 	bl	8003fcc <BSP_LED_Init>

  /* Turn Led Red on */
  BSP_LED_On(LED_RED);
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f002 f8cc 	bl	8004068 <BSP_LED_On>

  while(1);
 8001ed0:	e7fe      	b.n	8001ed0 <Error_Handler+0x10>
	...

08001ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eda:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <HAL_MspInit+0x44>)
 8001edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ede:	4a0e      	ldr	r2, [pc, #56]	; (8001f18 <HAL_MspInit+0x44>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ee6:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <HAL_MspInit+0x44>)
 8001ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	607b      	str	r3, [r7, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef2:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <HAL_MspInit+0x44>)
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef6:	4a08      	ldr	r2, [pc, #32]	; (8001f18 <HAL_MspInit+0x44>)
 8001ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efc:	6593      	str	r3, [r2, #88]	; 0x58
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_MspInit+0x44>)
 8001f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f06:	603b      	str	r3, [r7, #0]
 8001f08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	40021000 	.word	0x40021000

08001f1c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001f2e:	e7fe      	b.n	8001f2e <HardFault_Handler+0x4>

08001f30 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001f34:	e7fe      	b.n	8001f34 <MemManage_Handler+0x4>

08001f36 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001f3a:	e7fe      	b.n	8001f3a <BusFault_Handler+0x4>

08001f3c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001f40:	e7fe      	b.n	8001f40 <UsageFault_Handler+0x4>

08001f42 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0
}
 8001f46:	bf00      	nop
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001f54:	f003 fd26 	bl	80059a4 <HAL_IncTick>
}
 8001f58:	bf00      	nop
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
	return 1;
 8001f60:	2301      	movs	r3, #1
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <_kill>:

int _kill(int pid, int sig)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f76:	f004 ffc9 	bl	8006f0c <__errno>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	2316      	movs	r3, #22
 8001f7e:	6013      	str	r3, [r2, #0]
	return -1;
 8001f80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <_exit>:

void _exit (int status)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff ffe7 	bl	8001f6c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f9e:	e7fe      	b.n	8001f9e <_exit+0x12>

08001fa0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	e00a      	b.n	8001fc8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fb2:	f3af 8000 	nop.w
 8001fb6:	4601      	mov	r1, r0
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	60ba      	str	r2, [r7, #8]
 8001fbe:	b2ca      	uxtb	r2, r1
 8001fc0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	617b      	str	r3, [r7, #20]
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	dbf0      	blt.n	8001fb2 <_read+0x12>
	}

return len;
 8001fd0:	687b      	ldr	r3, [r7, #4]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b086      	sub	sp, #24
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	60f8      	str	r0, [r7, #12]
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	e009      	b.n	8002000 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	1c5a      	adds	r2, r3, #1
 8001ff0:	60ba      	str	r2, [r7, #8]
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	429a      	cmp	r2, r3
 8002006:	dbf1      	blt.n	8001fec <_write+0x12>
	}
	return len;
 8002008:	687b      	ldr	r3, [r7, #4]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <_close>:

int _close(int file)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
	return -1;
 800201a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800203a:	605a      	str	r2, [r3, #4]
	return 0;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <_isatty>:

int _isatty(int file)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
	return 1;
 8002052:	2301      	movs	r3, #1
}
 8002054:	4618      	mov	r0, r3
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
	return 0;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <_open>:

int _open(char *path, int flags, ...)
{
 800207a:	b40e      	push	{r1, r2, r3}
 800207c:	b480      	push	{r7}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8002084:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002088:	4618      	mov	r0, r3
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	b003      	add	sp, #12
 8002094:	4770      	bx	lr
	...

08002098 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020a0:	4a14      	ldr	r2, [pc, #80]	; (80020f4 <_sbrk+0x5c>)
 80020a2:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <_sbrk+0x60>)
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020ac:	4b13      	ldr	r3, [pc, #76]	; (80020fc <_sbrk+0x64>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d102      	bne.n	80020ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020b4:	4b11      	ldr	r3, [pc, #68]	; (80020fc <_sbrk+0x64>)
 80020b6:	4a12      	ldr	r2, [pc, #72]	; (8002100 <_sbrk+0x68>)
 80020b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ba:	4b10      	ldr	r3, [pc, #64]	; (80020fc <_sbrk+0x64>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4413      	add	r3, r2
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d207      	bcs.n	80020d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020c8:	f004 ff20 	bl	8006f0c <__errno>
 80020cc:	4602      	mov	r2, r0
 80020ce:	230c      	movs	r3, #12
 80020d0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80020d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020d6:	e009      	b.n	80020ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020d8:	4b08      	ldr	r3, [pc, #32]	; (80020fc <_sbrk+0x64>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020de:	4b07      	ldr	r3, [pc, #28]	; (80020fc <_sbrk+0x64>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	4a05      	ldr	r2, [pc, #20]	; (80020fc <_sbrk+0x64>)
 80020e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ea:	68fb      	ldr	r3, [r7, #12]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20018000 	.word	0x20018000
 80020f8:	00000400 	.word	0x00000400
 80020fc:	2000042c 	.word	0x2000042c
 8002100:	20000478 	.word	0x20000478

08002104 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002108:	4b17      	ldr	r3, [pc, #92]	; (8002168 <SystemInit+0x64>)
 800210a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210e:	4a16      	ldr	r2, [pc, #88]	; (8002168 <SystemInit+0x64>)
 8002110:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002114:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002118:	4b14      	ldr	r3, [pc, #80]	; (800216c <SystemInit+0x68>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a13      	ldr	r2, [pc, #76]	; (800216c <SystemInit+0x68>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002124:	4b11      	ldr	r3, [pc, #68]	; (800216c <SystemInit+0x68>)
 8002126:	2200      	movs	r2, #0
 8002128:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800212a:	4b10      	ldr	r3, [pc, #64]	; (800216c <SystemInit+0x68>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a0f      	ldr	r2, [pc, #60]	; (800216c <SystemInit+0x68>)
 8002130:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002134:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002138:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 800213a:	4b0c      	ldr	r3, [pc, #48]	; (800216c <SystemInit+0x68>)
 800213c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002140:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <SystemInit+0x68>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a09      	ldr	r2, [pc, #36]	; (800216c <SystemInit+0x68>)
 8002148:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800214c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800214e:	4b07      	ldr	r3, [pc, #28]	; (800216c <SystemInit+0x68>)
 8002150:	2200      	movs	r2, #0
 8002152:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002154:	4b04      	ldr	r3, [pc, #16]	; (8002168 <SystemInit+0x64>)
 8002156:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800215a:	609a      	str	r2, [r3, #8]
#endif
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	e000ed00 	.word	0xe000ed00
 800216c:	40021000 	.word	0x40021000

08002170 <_ZN4PageC1Ev>:
	#include "employee.h"
}

class Page {
public:
	Page() {}
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	4a04      	ldr	r2, [pc, #16]	; (800218c <_ZN4PageC1Ev+0x1c>)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4618      	mov	r0, r3
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	0800e7ec 	.word	0x0800e7ec

08002190 <_ZN4PageD1Ev>:
	virtual ~Page() {}
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	4a04      	ldr	r2, [pc, #16]	; (80021ac <_ZN4PageD1Ev+0x1c>)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4618      	mov	r0, r3
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	0800e7ec 	.word	0x0800e7ec

080021b0 <_ZN4PageD0Ev>:
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7ff ffe9 	bl	8002190 <_ZN4PageD1Ev>
 80021be:	213c      	movs	r1, #60	; 0x3c
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f004 fe5e 	bl	8006e82 <_ZdlPvj>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <_ZN16EmployeeListPageC1EPc>:

#include <pages/EmployeeListPage.hpp>
#include "lcd.hpp"


EmployeeListPage::EmployeeListPage(char* page_name) : Page() {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ffc7 	bl	8002170 <_ZN4PageC1Ev>
 80021e2:	4a08      	ldr	r2, [pc, #32]	; (8002204 <_ZN16EmployeeListPageC1EPc+0x34>)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	601a      	str	r2, [r3, #0]
	strcpy(name, page_name);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3308      	adds	r3, #8
 80021ec:	6839      	ldr	r1, [r7, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f006 fc3a 	bl	8008a68 <strcpy>
	selection_num = 0;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	605a      	str	r2, [r3, #4]
}
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4618      	mov	r0, r3
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	0800e7b4 	.word	0x0800e7b4

08002208 <_ZN16EmployeeListPage11make_activeEP8Employee>:

void EmployeeListPage::make_active(Employee* e) {
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
	active_page = this;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a05      	ldr	r2, [pc, #20]	; (800222c <_ZN16EmployeeListPage11make_activeEP8Employee+0x24>)
 8002216:	6013      	str	r3, [r2, #0]
	render();
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	330c      	adds	r3, #12
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	4798      	blx	r3
}
 8002224:	bf00      	nop
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20000420 	.word	0x20000420

08002230 <_ZN16EmployeeListPage6renderEv>:

void EmployeeListPage::render() {
 8002230:	b5b0      	push	{r4, r5, r7, lr}
 8002232:	b08c      	sub	sp, #48	; 0x30
 8002234:	af02      	add	r7, sp, #8
 8002236:	6078      	str	r0, [r7, #4]
	// INITIALIZATION
	lcd->background(BG);  		// Set background to BG color
 8002238:	4baf      	ldr	r3, [pc, #700]	; (80024f8 <_ZN16EmployeeListPage6renderEv+0x2c8>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	4bae      	ldr	r3, [pc, #696]	; (80024f8 <_ZN16EmployeeListPage6renderEv+0x2c8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	331c      	adds	r3, #28
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f643 210c 	movw	r1, #14860	; 0x3a0c
 800224c:	4610      	mov	r0, r2
 800224e:	4798      	blx	r3
	lcd->foreground(White);    	// Set text color to white
 8002250:	4ba9      	ldr	r3, [pc, #676]	; (80024f8 <_ZN16EmployeeListPage6renderEv+0x2c8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	461a      	mov	r2, r3
 8002256:	4ba8      	ldr	r3, [pc, #672]	; (80024f8 <_ZN16EmployeeListPage6renderEv+0x2c8>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	3318      	adds	r3, #24
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002264:	4610      	mov	r0, r2
 8002266:	4798      	blx	r3
	lcd->cls();                	// Clear screen
 8002268:	4ba3      	ldr	r3, [pc, #652]	; (80024f8 <_ZN16EmployeeListPage6renderEv+0x2c8>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	4ba2      	ldr	r3, [pc, #648]	; (80024f8 <_ZN16EmployeeListPage6renderEv+0x2c8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	3310      	adds	r3, #16
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4610      	mov	r0, r2
 800227a:	4798      	blx	r3
	lcd->set_orientation(0);
 800227c:	4b9e      	ldr	r3, [pc, #632]	; (80024f8 <_ZN16EmployeeListPage6renderEv+0x2c8>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2100      	movs	r1, #0
 8002282:	4618      	mov	r0, r3
 8002284:	f002 fa7a 	bl	800477c <_ZN15SPI_TFT_ILI934115set_orientationEj>

	// PAGE TITLE
	lcd->fillrect(0, 0, W, 40, ACCENT);
 8002288:	4b9b      	ldr	r3, [pc, #620]	; (80024f8 <_ZN16EmployeeListPage6renderEv+0x2c8>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	461c      	mov	r4, r3
 800228e:	4b9a      	ldr	r3, [pc, #616]	; (80024f8 <_ZN16EmployeeListPage6renderEv+0x2c8>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	461a      	mov	r2, r3
 8002294:	4b98      	ldr	r3, [pc, #608]	; (80024f8 <_ZN16EmployeeListPage6renderEv+0x2c8>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	332c      	adds	r3, #44	; 0x2c
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4610      	mov	r0, r2
 80022a0:	4798      	blx	r3
 80022a2:	4602      	mov	r2, r0
 80022a4:	f243 3355 	movw	r3, #13141	; 0x3355
 80022a8:	9301      	str	r3, [sp, #4]
 80022aa:	2328      	movs	r3, #40	; 0x28
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	4613      	mov	r3, r2
 80022b0:	2200      	movs	r2, #0
 80022b2:	2100      	movs	r1, #0
 80022b4:	4620      	mov	r0, r4
 80022b6:	f003 f825 	bl	8005304 <_ZN15SPI_TFT_ILI93418fillrectEiiiii>
	lcd->background(ACCENT);
 80022ba:	4b8f      	ldr	r3, [pc, #572]	; (80024f8 <_ZN16EmployeeListPage6renderEv+0x2c8>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	461a      	mov	r2, r3
 80022c0:	4b8d      	ldr	r3, [pc, #564]	; (80024f8 <_ZN16EmployeeListPage6renderEv+0x2c8>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	331c      	adds	r3, #28
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f243 3155 	movw	r1, #13141	; 0x3355
 80022ce:	4610      	mov	r0, r2
 80022d0:	4798      	blx	r3
	lcd->print_text((char*) "<", 5, 10, ARIAL24);
 80022d2:	4b89      	ldr	r3, [pc, #548]	; (80024f8 <_ZN16EmployeeListPage6renderEv+0x2c8>)
 80022d4:	6818      	ldr	r0, [r3, #0]
 80022d6:	4b89      	ldr	r3, [pc, #548]	; (80024fc <_ZN16EmployeeListPage6renderEv+0x2cc>)
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	230a      	movs	r3, #10
 80022dc:	2205      	movs	r2, #5
 80022de:	4988      	ldr	r1, [pc, #544]	; (8002500 <_ZN16EmployeeListPage6renderEv+0x2d0>)
 80022e0:	f7fe feb6 	bl	8001050 <_ZN7Display10print_textEPciiPh>
	lcd->print_text((char*) "Employees", 25, 10, ARIAL24);
 80022e4:	4b84      	ldr	r3, [pc, #528]	; (80024f8 <_ZN16EmployeeListPage6renderEv+0x2c8>)
 80022e6:	6818      	ldr	r0, [r3, #0]
 80022e8:	4b84      	ldr	r3, [pc, #528]	; (80024fc <_ZN16EmployeeListPage6renderEv+0x2cc>)
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	230a      	movs	r3, #10
 80022ee:	2219      	movs	r2, #25
 80022f0:	4984      	ldr	r1, [pc, #528]	; (8002504 <_ZN16EmployeeListPage6renderEv+0x2d4>)
 80022f2:	f7fe fead 	bl	8001050 <_ZN7Display10print_textEPciiPh>

	// TABLE HEADERS
	lcd->fillrect(0, 40, W, 80, BG);
 80022f6:	4b80      	ldr	r3, [pc, #512]	; (80024f8 <_ZN16EmployeeListPage6renderEv+0x2c8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	461c      	mov	r4, r3
 80022fc:	4b7e      	ldr	r3, [pc, #504]	; (80024f8 <_ZN16EmployeeListPage6renderEv+0x2c8>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	461a      	mov	r2, r3
 8002302:	4b7d      	ldr	r3, [pc, #500]	; (80024f8 <_ZN16EmployeeListPage6renderEv+0x2c8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	332c      	adds	r3, #44	; 0x2c
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4610      	mov	r0, r2
 800230e:	4798      	blx	r3
 8002310:	4602      	mov	r2, r0
 8002312:	f643 230c 	movw	r3, #14860	; 0x3a0c
 8002316:	9301      	str	r3, [sp, #4]
 8002318:	2350      	movs	r3, #80	; 0x50
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	4613      	mov	r3, r2
 800231e:	2228      	movs	r2, #40	; 0x28
 8002320:	2100      	movs	r1, #0
 8002322:	4620      	mov	r0, r4
 8002324:	f002 ffee 	bl	8005304 <_ZN15SPI_TFT_ILI93418fillrectEiiiii>
	lcd->background(BG);
 8002328:	4b73      	ldr	r3, [pc, #460]	; (80024f8 <_ZN16EmployeeListPage6renderEv+0x2c8>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	461a      	mov	r2, r3
 800232e:	4b72      	ldr	r3, [pc, #456]	; (80024f8 <_ZN16EmployeeListPage6renderEv+0x2c8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	331c      	adds	r3, #28
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f643 210c 	movw	r1, #14860	; 0x3a0c
 800233c:	4610      	mov	r0, r2
 800233e:	4798      	blx	r3
	lcd->print_text((char*) "[name]", 10, 50, ARIAL12);
 8002340:	4b6d      	ldr	r3, [pc, #436]	; (80024f8 <_ZN16EmployeeListPage6renderEv+0x2c8>)
 8002342:	6818      	ldr	r0, [r3, #0]
 8002344:	4b70      	ldr	r3, [pc, #448]	; (8002508 <_ZN16EmployeeListPage6renderEv+0x2d8>)
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	2332      	movs	r3, #50	; 0x32
 800234a:	220a      	movs	r2, #10
 800234c:	496f      	ldr	r1, [pc, #444]	; (800250c <_ZN16EmployeeListPage6renderEv+0x2dc>)
 800234e:	f7fe fe7f 	bl	8001050 <_ZN7Display10print_textEPciiPh>
	lcd->print_text((char*) "[id]", 100, 50, ARIAL12);
 8002352:	4b69      	ldr	r3, [pc, #420]	; (80024f8 <_ZN16EmployeeListPage6renderEv+0x2c8>)
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	4b6c      	ldr	r3, [pc, #432]	; (8002508 <_ZN16EmployeeListPage6renderEv+0x2d8>)
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	2332      	movs	r3, #50	; 0x32
 800235c:	2264      	movs	r2, #100	; 0x64
 800235e:	496c      	ldr	r1, [pc, #432]	; (8002510 <_ZN16EmployeeListPage6renderEv+0x2e0>)
 8002360:	f7fe fe76 	bl	8001050 <_ZN7Display10print_textEPciiPh>
	lcd->print_text((char*) "[wage]", 170, 50, ARIAL12);
 8002364:	4b64      	ldr	r3, [pc, #400]	; (80024f8 <_ZN16EmployeeListPage6renderEv+0x2c8>)
 8002366:	6818      	ldr	r0, [r3, #0]
 8002368:	4b67      	ldr	r3, [pc, #412]	; (8002508 <_ZN16EmployeeListPage6renderEv+0x2d8>)
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	2332      	movs	r3, #50	; 0x32
 800236e:	22aa      	movs	r2, #170	; 0xaa
 8002370:	4968      	ldr	r1, [pc, #416]	; (8002514 <_ZN16EmployeeListPage6renderEv+0x2e4>)
 8002372:	f7fe fe6d 	bl	8001050 <_ZN7Display10print_textEPciiPh>
	lcd->line(0, 70, W, 70, White);
 8002376:	4b60      	ldr	r3, [pc, #384]	; (80024f8 <_ZN16EmployeeListPage6renderEv+0x2c8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	461c      	mov	r4, r3
 800237c:	4b5e      	ldr	r3, [pc, #376]	; (80024f8 <_ZN16EmployeeListPage6renderEv+0x2c8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	4b5d      	ldr	r3, [pc, #372]	; (80024f8 <_ZN16EmployeeListPage6renderEv+0x2c8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	332c      	adds	r3, #44	; 0x2c
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4610      	mov	r0, r2
 800238e:	4798      	blx	r3
 8002390:	4602      	mov	r2, r0
 8002392:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002396:	9301      	str	r3, [sp, #4]
 8002398:	2346      	movs	r3, #70	; 0x46
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	4613      	mov	r3, r2
 800239e:	2246      	movs	r2, #70	; 0x46
 80023a0:	2100      	movs	r1, #0
 80023a2:	4620      	mov	r0, r4
 80023a4:	f002 fe73 	bl	800508e <_ZN15SPI_TFT_ILI93414lineEiiiii>

	// TABLE ROWS
	Employee* e;
	char id[10], wage[10];

	for (int i = 0; i < num_employees; i++) {
 80023a8:	2300      	movs	r3, #0
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24
 80023ac:	4b5a      	ldr	r3, [pc, #360]	; (8002518 <_ZN16EmployeeListPage6renderEv+0x2e8>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b2:	429a      	cmp	r2, r3
 80023b4:	f280 80c3 	bge.w	800253e <_ZN16EmployeeListPage6renderEv+0x30e>
		e = employees[i];
 80023b8:	4a58      	ldr	r2, [pc, #352]	; (800251c <_ZN16EmployeeListPage6renderEv+0x2ec>)
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c0:	623b      	str	r3, [r7, #32]

		lcd->fillrect(0, 80 + 30 * i, W, 80 + 30 * (i + 1), BG);
 80023c2:	4b4d      	ldr	r3, [pc, #308]	; (80024f8 <_ZN16EmployeeListPage6renderEv+0x2c8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	461d      	mov	r5, r3
 80023c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ca:	4613      	mov	r3, r2
 80023cc:	011b      	lsls	r3, r3, #4
 80023ce:	1a9b      	subs	r3, r3, r2
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80023d6:	4b48      	ldr	r3, [pc, #288]	; (80024f8 <_ZN16EmployeeListPage6renderEv+0x2c8>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	4b46      	ldr	r3, [pc, #280]	; (80024f8 <_ZN16EmployeeListPage6renderEv+0x2c8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	332c      	adds	r3, #44	; 0x2c
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4610      	mov	r0, r2
 80023e8:	4798      	blx	r3
 80023ea:	4601      	mov	r1, r0
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	1c5a      	adds	r2, r3, #1
 80023f0:	4613      	mov	r3, r2
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	1a9b      	subs	r3, r3, r2
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	3350      	adds	r3, #80	; 0x50
 80023fa:	f643 220c 	movw	r2, #14860	; 0x3a0c
 80023fe:	9201      	str	r2, [sp, #4]
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	460b      	mov	r3, r1
 8002404:	4622      	mov	r2, r4
 8002406:	2100      	movs	r1, #0
 8002408:	4628      	mov	r0, r5
 800240a:	f002 ff7b 	bl	8005304 <_ZN15SPI_TFT_ILI93418fillrectEiiiii>
		lcd->foreground(LightGrey);
 800240e:	4b3a      	ldr	r3, [pc, #232]	; (80024f8 <_ZN16EmployeeListPage6renderEv+0x2c8>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	4b38      	ldr	r3, [pc, #224]	; (80024f8 <_ZN16EmployeeListPage6renderEv+0x2c8>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	3318      	adds	r3, #24
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f24c 6118 	movw	r1, #50712	; 0xc618
 8002422:	4610      	mov	r0, r2
 8002424:	4798      	blx	r3

		sprintf(id, "#%d", e->id);
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	f107 0314 	add.w	r3, r7, #20
 800242e:	493c      	ldr	r1, [pc, #240]	; (8002520 <_ZN16EmployeeListPage6renderEv+0x2f0>)
 8002430:	4618      	mov	r0, r3
 8002432:	f006 faa7 	bl	8008984 <siprintf>
		sprintf(wage, "%.2f/hr", e->wage);
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe f894 	bl	8000568 <__aeabi_f2d>
 8002440:	4603      	mov	r3, r0
 8002442:	460c      	mov	r4, r1
 8002444:	f107 0008 	add.w	r0, r7, #8
 8002448:	461a      	mov	r2, r3
 800244a:	4623      	mov	r3, r4
 800244c:	4935      	ldr	r1, [pc, #212]	; (8002524 <_ZN16EmployeeListPage6renderEv+0x2f4>)
 800244e:	f006 fa99 	bl	8008984 <siprintf>
		lcd->print_text(e->name, 10, 80 + 30 * i, ARIAL12);
 8002452:	4b29      	ldr	r3, [pc, #164]	; (80024f8 <_ZN16EmployeeListPage6renderEv+0x2c8>)
 8002454:	6818      	ldr	r0, [r3, #0]
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	1d19      	adds	r1, r3, #4
 800245a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800245c:	4613      	mov	r3, r2
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	1a9b      	subs	r3, r3, r2
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8002468:	4b27      	ldr	r3, [pc, #156]	; (8002508 <_ZN16EmployeeListPage6renderEv+0x2d8>)
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	4613      	mov	r3, r2
 800246e:	220a      	movs	r2, #10
 8002470:	f7fe fdee 	bl	8001050 <_ZN7Display10print_textEPciiPh>
		lcd->print_text(id, 100, 80 + 30 * i, ARIAL12);
 8002474:	4b20      	ldr	r3, [pc, #128]	; (80024f8 <_ZN16EmployeeListPage6renderEv+0x2c8>)
 8002476:	6818      	ldr	r0, [r3, #0]
 8002478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800247a:	4613      	mov	r3, r2
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	1a9b      	subs	r3, r3, r2
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8002486:	f107 0114 	add.w	r1, r7, #20
 800248a:	4b1f      	ldr	r3, [pc, #124]	; (8002508 <_ZN16EmployeeListPage6renderEv+0x2d8>)
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	4613      	mov	r3, r2
 8002490:	2264      	movs	r2, #100	; 0x64
 8002492:	f7fe fddd 	bl	8001050 <_ZN7Display10print_textEPciiPh>
		lcd->print_text(wage, 170, 80 + 30 * i, ARIAL12);
 8002496:	4b18      	ldr	r3, [pc, #96]	; (80024f8 <_ZN16EmployeeListPage6renderEv+0x2c8>)
 8002498:	6818      	ldr	r0, [r3, #0]
 800249a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800249c:	4613      	mov	r3, r2
 800249e:	011b      	lsls	r3, r3, #4
 80024a0:	1a9b      	subs	r3, r3, r2
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80024a8:	f107 0108 	add.w	r1, r7, #8
 80024ac:	4b16      	ldr	r3, [pc, #88]	; (8002508 <_ZN16EmployeeListPage6renderEv+0x2d8>)
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	4613      	mov	r3, r2
 80024b2:	22aa      	movs	r2, #170	; 0xaa
 80024b4:	f7fe fdcc 	bl	8001050 <_ZN7Display10print_textEPciiPh>
		lcd->line(0, 70 + 30 * (i + 1), W, 70 + 30 * (i + 1), Black);
 80024b8:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <_ZN16EmployeeListPage6renderEv+0x2c8>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	461d      	mov	r5, r3
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	1c5a      	adds	r2, r3, #1
 80024c2:	4613      	mov	r3, r2
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	1a9b      	subs	r3, r3, r2
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	f103 0446 	add.w	r4, r3, #70	; 0x46
 80024ce:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <_ZN16EmployeeListPage6renderEv+0x2c8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <_ZN16EmployeeListPage6renderEv+0x2c8>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	332c      	adds	r3, #44	; 0x2c
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4610      	mov	r0, r2
 80024e0:	4798      	blx	r3
 80024e2:	4601      	mov	r1, r0
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	4613      	mov	r3, r2
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	3346      	adds	r3, #70	; 0x46
 80024f2:	2200      	movs	r2, #0
 80024f4:	9201      	str	r2, [sp, #4]
 80024f6:	e017      	b.n	8002528 <_ZN16EmployeeListPage6renderEv+0x2f8>
 80024f8:	20000424 	.word	0x20000424
 80024fc:	0800cc48 	.word	0x0800cc48
 8002500:	0800bf6c 	.word	0x0800bf6c
 8002504:	0800bf70 	.word	0x0800bf70
 8002508:	0800c2e4 	.word	0x0800c2e4
 800250c:	0800bf7c 	.word	0x0800bf7c
 8002510:	0800bf84 	.word	0x0800bf84
 8002514:	0800bf8c 	.word	0x0800bf8c
 8002518:	200002e0 	.word	0x200002e0
 800251c:	200002e4 	.word	0x200002e4
 8002520:	0800bf94 	.word	0x0800bf94
 8002524:	0800bf98 	.word	0x0800bf98
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	460b      	mov	r3, r1
 800252c:	4622      	mov	r2, r4
 800252e:	2100      	movs	r1, #0
 8002530:	4628      	mov	r0, r5
 8002532:	f002 fdac 	bl	800508e <_ZN15SPI_TFT_ILI93414lineEiiiii>
	for (int i = 0; i < num_employees; i++) {
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	3301      	adds	r3, #1
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
 800253c:	e736      	b.n	80023ac <_ZN16EmployeeListPage6renderEv+0x17c>
	}

	render_highlighted_selection();
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f8c8 	bl	80026d4 <_ZN16EmployeeListPage28render_highlighted_selectionEv>
}
 8002544:	bf00      	nop
 8002546:	3728      	adds	r7, #40	; 0x28
 8002548:	46bd      	mov	sp, r7
 800254a:	bdb0      	pop	{r4, r5, r7, pc}

0800254c <_ZN16EmployeeListPage27clear_highlighted_selectionEv>:

void EmployeeListPage::clear_highlighted_selection() {
 800254c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800254e:	b085      	sub	sp, #20
 8002550:	af02      	add	r7, sp, #8
 8002552:	6078      	str	r0, [r7, #4]
	// Replace black lines above and below entry and remove highlight on sides
	lcd->line(0, 70 + 30 * selection_num, W, 70 + 30 * selection_num, Black);
 8002554:	4b5e      	ldr	r3, [pc, #376]	; (80026d0 <_ZN16EmployeeListPage27clear_highlighted_selectionEv+0x184>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	461d      	mov	r5, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	4613      	mov	r3, r2
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	1a9b      	subs	r3, r3, r2
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	f103 0446 	add.w	r4, r3, #70	; 0x46
 800256a:	4b59      	ldr	r3, [pc, #356]	; (80026d0 <_ZN16EmployeeListPage27clear_highlighted_selectionEv+0x184>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	461a      	mov	r2, r3
 8002570:	4b57      	ldr	r3, [pc, #348]	; (80026d0 <_ZN16EmployeeListPage27clear_highlighted_selectionEv+0x184>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	332c      	adds	r3, #44	; 0x2c
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4610      	mov	r0, r2
 800257c:	4798      	blx	r3
 800257e:	4601      	mov	r1, r0
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	1a9b      	subs	r3, r3, r2
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	3346      	adds	r3, #70	; 0x46
 800258e:	2200      	movs	r2, #0
 8002590:	9201      	str	r2, [sp, #4]
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	460b      	mov	r3, r1
 8002596:	4622      	mov	r2, r4
 8002598:	2100      	movs	r1, #0
 800259a:	4628      	mov	r0, r5
 800259c:	f002 fd77 	bl	800508e <_ZN15SPI_TFT_ILI93414lineEiiiii>
	lcd->line(0, 70 + 30 * (selection_num + 1), W, 70 + 30 * (selection_num + 1), Black);
 80025a0:	4b4b      	ldr	r3, [pc, #300]	; (80026d0 <_ZN16EmployeeListPage27clear_highlighted_selectionEv+0x184>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	461d      	mov	r5, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	1c5a      	adds	r2, r3, #1
 80025ac:	4613      	mov	r3, r2
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	1a9b      	subs	r3, r3, r2
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	f103 0446 	add.w	r4, r3, #70	; 0x46
 80025b8:	4b45      	ldr	r3, [pc, #276]	; (80026d0 <_ZN16EmployeeListPage27clear_highlighted_selectionEv+0x184>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	461a      	mov	r2, r3
 80025be:	4b44      	ldr	r3, [pc, #272]	; (80026d0 <_ZN16EmployeeListPage27clear_highlighted_selectionEv+0x184>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	332c      	adds	r3, #44	; 0x2c
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4610      	mov	r0, r2
 80025ca:	4798      	blx	r3
 80025cc:	4601      	mov	r1, r0
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	1c5a      	adds	r2, r3, #1
 80025d4:	4613      	mov	r3, r2
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	1a9b      	subs	r3, r3, r2
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	3346      	adds	r3, #70	; 0x46
 80025de:	2200      	movs	r2, #0
 80025e0:	9201      	str	r2, [sp, #4]
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	460b      	mov	r3, r1
 80025e6:	4622      	mov	r2, r4
 80025e8:	2100      	movs	r1, #0
 80025ea:	4628      	mov	r0, r5
 80025ec:	f002 fd4f 	bl	800508e <_ZN15SPI_TFT_ILI93414lineEiiiii>

	lcd->line(0, 70 + 30 * selection_num, 0, 70 + 30 * (selection_num + 1), BG);
 80025f0:	4b37      	ldr	r3, [pc, #220]	; (80026d0 <_ZN16EmployeeListPage27clear_highlighted_selectionEv+0x184>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	1a9b      	subs	r3, r3, r2
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	4613      	mov	r3, r2
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	1a9b      	subs	r3, r3, r2
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	3346      	adds	r3, #70	; 0x46
 8002616:	f643 220c 	movw	r2, #14860	; 0x3a0c
 800261a:	9201      	str	r2, [sp, #4]
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	2300      	movs	r3, #0
 8002620:	460a      	mov	r2, r1
 8002622:	2100      	movs	r1, #0
 8002624:	f002 fd33 	bl	800508e <_ZN15SPI_TFT_ILI93414lineEiiiii>
	lcd->line(W, 70 + 30 * selection_num, W, 70 + 30 * (selection_num + 1), BG);
 8002628:	4b29      	ldr	r3, [pc, #164]	; (80026d0 <_ZN16EmployeeListPage27clear_highlighted_selectionEv+0x184>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	461d      	mov	r5, r3
 800262e:	4b28      	ldr	r3, [pc, #160]	; (80026d0 <_ZN16EmployeeListPage27clear_highlighted_selectionEv+0x184>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	461a      	mov	r2, r3
 8002634:	4b26      	ldr	r3, [pc, #152]	; (80026d0 <_ZN16EmployeeListPage27clear_highlighted_selectionEv+0x184>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	332c      	adds	r3, #44	; 0x2c
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4610      	mov	r0, r2
 8002640:	4798      	blx	r3
 8002642:	4606      	mov	r6, r0
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	1a9b      	subs	r3, r3, r2
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	f103 0446 	add.w	r4, r3, #70	; 0x46
 8002654:	4b1e      	ldr	r3, [pc, #120]	; (80026d0 <_ZN16EmployeeListPage27clear_highlighted_selectionEv+0x184>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	461a      	mov	r2, r3
 800265a:	4b1d      	ldr	r3, [pc, #116]	; (80026d0 <_ZN16EmployeeListPage27clear_highlighted_selectionEv+0x184>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	332c      	adds	r3, #44	; 0x2c
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4610      	mov	r0, r2
 8002666:	4798      	blx	r3
 8002668:	4601      	mov	r1, r0
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	1c5a      	adds	r2, r3, #1
 8002670:	4613      	mov	r3, r2
 8002672:	011b      	lsls	r3, r3, #4
 8002674:	1a9b      	subs	r3, r3, r2
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	3346      	adds	r3, #70	; 0x46
 800267a:	f643 220c 	movw	r2, #14860	; 0x3a0c
 800267e:	9201      	str	r2, [sp, #4]
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	460b      	mov	r3, r1
 8002684:	4622      	mov	r2, r4
 8002686:	4631      	mov	r1, r6
 8002688:	4628      	mov	r0, r5
 800268a:	f002 fd00 	bl	800508e <_ZN15SPI_TFT_ILI93414lineEiiiii>

	// First entry is preceded by white bar
	if (selection_num == 0)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d118      	bne.n	80026c8 <_ZN16EmployeeListPage27clear_highlighted_selectionEv+0x17c>
		lcd->line(0, 70, W, 70, White);
 8002696:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <_ZN16EmployeeListPage27clear_highlighted_selectionEv+0x184>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	461c      	mov	r4, r3
 800269c:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <_ZN16EmployeeListPage27clear_highlighted_selectionEv+0x184>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	461a      	mov	r2, r3
 80026a2:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <_ZN16EmployeeListPage27clear_highlighted_selectionEv+0x184>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	332c      	adds	r3, #44	; 0x2c
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4610      	mov	r0, r2
 80026ae:	4798      	blx	r3
 80026b0:	4602      	mov	r2, r0
 80026b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026b6:	9301      	str	r3, [sp, #4]
 80026b8:	2346      	movs	r3, #70	; 0x46
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	4613      	mov	r3, r2
 80026be:	2246      	movs	r2, #70	; 0x46
 80026c0:	2100      	movs	r1, #0
 80026c2:	4620      	mov	r0, r4
 80026c4:	f002 fce3 	bl	800508e <_ZN15SPI_TFT_ILI93414lineEiiiii>
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026d0:	20000424 	.word	0x20000424

080026d4 <_ZN16EmployeeListPage28render_highlighted_selectionEv>:


void EmployeeListPage::render_highlighted_selection() {
 80026d4:	b5b0      	push	{r4, r5, r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af02      	add	r7, sp, #8
 80026da:	6078      	str	r0, [r7, #4]
	// Draw rectangle around selection
	lcd->rect(0, 70 + 30 * selection_num, W, 70 + 30 * (selection_num + 1), Cyan);
 80026dc:	4b15      	ldr	r3, [pc, #84]	; (8002734 <_ZN16EmployeeListPage28render_highlighted_selectionEv+0x60>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	461d      	mov	r5, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	4613      	mov	r3, r2
 80026e8:	011b      	lsls	r3, r3, #4
 80026ea:	1a9b      	subs	r3, r3, r2
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	f103 0446 	add.w	r4, r3, #70	; 0x46
 80026f2:	4b10      	ldr	r3, [pc, #64]	; (8002734 <_ZN16EmployeeListPage28render_highlighted_selectionEv+0x60>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	461a      	mov	r2, r3
 80026f8:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <_ZN16EmployeeListPage28render_highlighted_selectionEv+0x60>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	332c      	adds	r3, #44	; 0x2c
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4610      	mov	r0, r2
 8002704:	4798      	blx	r3
 8002706:	4601      	mov	r1, r0
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	1c5a      	adds	r2, r3, #1
 800270e:	4613      	mov	r3, r2
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	1a9b      	subs	r3, r3, r2
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	3346      	adds	r3, #70	; 0x46
 8002718:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800271c:	9201      	str	r2, [sp, #4]
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	460b      	mov	r3, r1
 8002722:	4622      	mov	r2, r4
 8002724:	2100      	movs	r1, #0
 8002726:	4628      	mov	r0, r5
 8002728:	f002 fd8d 	bl	8005246 <_ZN15SPI_TFT_ILI93414rectEiiiii>
}
 800272c:	bf00      	nop
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bdb0      	pop	{r4, r5, r7, pc}
 8002734:	20000424 	.word	0x20000424

08002738 <_ZN16EmployeeListPage17up_button_handlerEv>:

void EmployeeListPage::up_button_handler() { decrement_selection(); }
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	3328      	adds	r3, #40	; 0x28
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	4798      	blx	r3
 800274c:	bf00      	nop
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <_ZN16EmployeeListPage19down_button_handlerEv>:

void EmployeeListPage::down_button_handler() { increment_selection(); }
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	3324      	adds	r3, #36	; 0x24
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	4798      	blx	r3
 8002768:	bf00      	nop
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <_ZN16EmployeeListPage19left_button_handlerEv>:

void EmployeeListPage::left_button_handler() { get_page((char*) "main")->make_active(); }
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	4806      	ldr	r0, [pc, #24]	; (8002794 <_ZN16EmployeeListPage19left_button_handlerEv+0x24>)
 800277a:	f7ff f94b 	bl	8001a14 <_Z8get_pagePc>
 800277e:	4602      	mov	r2, r0
 8002780:	6813      	ldr	r3, [r2, #0]
 8002782:	3308      	adds	r3, #8
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2100      	movs	r1, #0
 8002788:	4610      	mov	r0, r2
 800278a:	4798      	blx	r3
 800278c:	bf00      	nop
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	0800bfa0 	.word	0x0800bfa0

08002798 <_ZN16EmployeeListPage20right_button_handlerEv>:

void EmployeeListPage::right_button_handler() { return; }
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <_ZN16EmployeeListPage21center_button_handlerEv>:

void EmployeeListPage::center_button_handler() { make_selection(); }
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	332c      	adds	r3, #44	; 0x2c
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	4798      	blx	r3
 80027c0:	bf00      	nop
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <_ZN16EmployeeListPage19increment_selectionEv>:

void EmployeeListPage::increment_selection() {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
	if (selection_num < num_employees - 1) {
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	4b09      	ldr	r3, [pc, #36]	; (80027fc <_ZN16EmployeeListPage19increment_selectionEv+0x34>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	3b01      	subs	r3, #1
 80027da:	429a      	cmp	r2, r3
 80027dc:	da0a      	bge.n	80027f4 <_ZN16EmployeeListPage19increment_selectionEv+0x2c>
		clear_highlighted_selection();
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff feb4 	bl	800254c <_ZN16EmployeeListPage27clear_highlighted_selectionEv>
		selection_num++;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	605a      	str	r2, [r3, #4]
		render_highlighted_selection();
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7ff ff70 	bl	80026d4 <_ZN16EmployeeListPage28render_highlighted_selectionEv>
	}
}
 80027f4:	bf00      	nop
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	200002e0 	.word	0x200002e0

08002800 <_ZN16EmployeeListPage19decrement_selectionEv>:

void EmployeeListPage::decrement_selection() {
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
	if (selection_num > 0) {
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	dd0a      	ble.n	8002826 <_ZN16EmployeeListPage19decrement_selectionEv+0x26>
		clear_highlighted_selection();
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff fe9b 	bl	800254c <_ZN16EmployeeListPage27clear_highlighted_selectionEv>
		selection_num--;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	1e5a      	subs	r2, r3, #1
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	605a      	str	r2, [r3, #4]
		render_highlighted_selection();
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff ff57 	bl	80026d4 <_ZN16EmployeeListPage28render_highlighted_selectionEv>
	}
}
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
	...

08002830 <_ZN16EmployeeListPage14make_selectionEv>:

void EmployeeListPage::make_selection() {
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
	get_page((char*) "profile")->make_active(employees[selection_num]);
 8002838:	4808      	ldr	r0, [pc, #32]	; (800285c <_ZN16EmployeeListPage14make_selectionEv+0x2c>)
 800283a:	f7ff f8eb 	bl	8001a14 <_Z8get_pagePc>
 800283e:	6803      	ldr	r3, [r0, #0]
 8002840:	3308      	adds	r3, #8
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6852      	ldr	r2, [r2, #4]
 8002848:	4905      	ldr	r1, [pc, #20]	; (8002860 <_ZN16EmployeeListPage14make_selectionEv+0x30>)
 800284a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800284e:	4611      	mov	r1, r2
 8002850:	4798      	blx	r3
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	0800bfa8 	.word	0x0800bfa8
 8002860:	200002e4 	.word	0x200002e4

08002864 <_ZN16EmployeeListPageD1Ev>:
#define INC_PAGES_EMPLOYEELISTPAGE_HPP_


#include <pages/Page.hpp>

class EmployeeListPage : public Page {
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	4a05      	ldr	r2, [pc, #20]	; (8002884 <_ZN16EmployeeListPageD1Ev+0x20>)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff fc8b 	bl	8002190 <_ZN4PageD1Ev>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4618      	mov	r0, r3
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	0800e7b4 	.word	0x0800e7b4

08002888 <_ZN16EmployeeListPageD0Ev>:
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7ff ffe7 	bl	8002864 <_ZN16EmployeeListPageD1Ev>
 8002896:	213c      	movs	r1, #60	; 0x3c
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f004 faf2 	bl	8006e82 <_ZdlPvj>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4618      	mov	r0, r3
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <_ZN19EmployeeProfilePageC1EPc>:

#include <pages/EmployeeProfilePage.hpp>
#include "lcd.hpp"


EmployeeProfilePage::EmployeeProfilePage(char* page_name) : Page() {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff fc5b 	bl	8002170 <_ZN4PageC1Ev>
 80028ba:	4a08      	ldr	r2, [pc, #32]	; (80028dc <_ZN19EmployeeProfilePageC1EPc+0x34>)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	601a      	str	r2, [r3, #0]
	strcpy(name, page_name);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3308      	adds	r3, #8
 80028c4:	6839      	ldr	r1, [r7, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f006 f8ce 	bl	8008a68 <strcpy>
	employee = nullptr;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4618      	mov	r0, r3
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	08010cec 	.word	0x08010cec

080028e0 <_ZN19EmployeeProfilePage11make_activeEP8Employee>:

void EmployeeProfilePage::make_active(Employee* e) {
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
	active_page = this;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a07      	ldr	r2, [pc, #28]	; (800290c <_ZN19EmployeeProfilePage11make_activeEP8Employee+0x2c>)
 80028ee:	6013      	str	r3, [r2, #0]
	employee = e;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	63da      	str	r2, [r3, #60]	; 0x3c
	render();
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	330c      	adds	r3, #12
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	4798      	blx	r3
}
 8002902:	bf00      	nop
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	20000420 	.word	0x20000420

08002910 <_ZN19EmployeeProfilePage6renderEv>:

void EmployeeProfilePage::render() {
 8002910:	b5b0      	push	{r4, r5, r7, lr}
 8002912:	b096      	sub	sp, #88	; 0x58
 8002914:	af02      	add	r7, sp, #8
 8002916:	6078      	str	r0, [r7, #4]
	// INITIALIZATION
	lcd->background(BG);  	   // set background to BG color
 8002918:	4b5d      	ldr	r3, [pc, #372]	; (8002a90 <_ZN19EmployeeProfilePage6renderEv+0x180>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	461a      	mov	r2, r3
 800291e:	4b5c      	ldr	r3, [pc, #368]	; (8002a90 <_ZN19EmployeeProfilePage6renderEv+0x180>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	331c      	adds	r3, #28
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f643 210c 	movw	r1, #14860	; 0x3a0c
 800292c:	4610      	mov	r0, r2
 800292e:	4798      	blx	r3
	lcd->foreground(White);    // set chars to white
 8002930:	4b57      	ldr	r3, [pc, #348]	; (8002a90 <_ZN19EmployeeProfilePage6renderEv+0x180>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	461a      	mov	r2, r3
 8002936:	4b56      	ldr	r3, [pc, #344]	; (8002a90 <_ZN19EmployeeProfilePage6renderEv+0x180>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	3318      	adds	r3, #24
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002944:	4610      	mov	r0, r2
 8002946:	4798      	blx	r3
	lcd->cls();                // clear the screen
 8002948:	4b51      	ldr	r3, [pc, #324]	; (8002a90 <_ZN19EmployeeProfilePage6renderEv+0x180>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	461a      	mov	r2, r3
 800294e:	4b50      	ldr	r3, [pc, #320]	; (8002a90 <_ZN19EmployeeProfilePage6renderEv+0x180>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	3310      	adds	r3, #16
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4610      	mov	r0, r2
 800295a:	4798      	blx	r3
	lcd->set_orientation(0);
 800295c:	4b4c      	ldr	r3, [pc, #304]	; (8002a90 <_ZN19EmployeeProfilePage6renderEv+0x180>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2100      	movs	r1, #0
 8002962:	4618      	mov	r0, r3
 8002964:	f001 ff0a 	bl	800477c <_ZN15SPI_TFT_ILI934115set_orientationEj>

	// PAGE TITLE (profile name + status)
	lcd->fillrect(0, 0, W, 40, ACCENT);
 8002968:	4b49      	ldr	r3, [pc, #292]	; (8002a90 <_ZN19EmployeeProfilePage6renderEv+0x180>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	461c      	mov	r4, r3
 800296e:	4b48      	ldr	r3, [pc, #288]	; (8002a90 <_ZN19EmployeeProfilePage6renderEv+0x180>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	461a      	mov	r2, r3
 8002974:	4b46      	ldr	r3, [pc, #280]	; (8002a90 <_ZN19EmployeeProfilePage6renderEv+0x180>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	332c      	adds	r3, #44	; 0x2c
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4610      	mov	r0, r2
 8002980:	4798      	blx	r3
 8002982:	4602      	mov	r2, r0
 8002984:	f243 3355 	movw	r3, #13141	; 0x3355
 8002988:	9301      	str	r3, [sp, #4]
 800298a:	2328      	movs	r3, #40	; 0x28
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	4613      	mov	r3, r2
 8002990:	2200      	movs	r2, #0
 8002992:	2100      	movs	r1, #0
 8002994:	4620      	mov	r0, r4
 8002996:	f002 fcb5 	bl	8005304 <_ZN15SPI_TFT_ILI93418fillrectEiiiii>
	lcd->background(ACCENT);
 800299a:	4b3d      	ldr	r3, [pc, #244]	; (8002a90 <_ZN19EmployeeProfilePage6renderEv+0x180>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	461a      	mov	r2, r3
 80029a0:	4b3b      	ldr	r3, [pc, #236]	; (8002a90 <_ZN19EmployeeProfilePage6renderEv+0x180>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	331c      	adds	r3, #28
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f243 3155 	movw	r1, #13141	; 0x3355
 80029ae:	4610      	mov	r0, r2
 80029b0:	4798      	blx	r3
	lcd->print_text((char*) "<", 5, 10, ARIAL24);
 80029b2:	4b37      	ldr	r3, [pc, #220]	; (8002a90 <_ZN19EmployeeProfilePage6renderEv+0x180>)
 80029b4:	6818      	ldr	r0, [r3, #0]
 80029b6:	4b37      	ldr	r3, [pc, #220]	; (8002a94 <_ZN19EmployeeProfilePage6renderEv+0x184>)
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	230a      	movs	r3, #10
 80029bc:	2205      	movs	r2, #5
 80029be:	4936      	ldr	r1, [pc, #216]	; (8002a98 <_ZN19EmployeeProfilePage6renderEv+0x188>)
 80029c0:	f7fe fb46 	bl	8001050 <_ZN7Display10print_textEPciiPh>
	lcd->print_text(employee->name, 25, 10, ARIAL24);
 80029c4:	4b32      	ldr	r3, [pc, #200]	; (8002a90 <_ZN19EmployeeProfilePage6renderEv+0x180>)
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029cc:	1d19      	adds	r1, r3, #4
 80029ce:	4b31      	ldr	r3, [pc, #196]	; (8002a94 <_ZN19EmployeeProfilePage6renderEv+0x184>)
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	230a      	movs	r3, #10
 80029d4:	2219      	movs	r2, #25
 80029d6:	f7fe fb3b 	bl	8001050 <_ZN7Display10print_textEPciiPh>
	if (employee->events[employee->num_events - 1].clock_in) {
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e2:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 80029e6:	1e5a      	subs	r2, r3, #1
 80029e8:	4613      	mov	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	440b      	add	r3, r1
 80029f2:	3340      	adds	r3, #64	; 0x40
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d054      	beq.n	8002aa4 <_ZN19EmployeeProfilePage6renderEv+0x194>
		lcd->background(Green);
 80029fa:	4b25      	ldr	r3, [pc, #148]	; (8002a90 <_ZN19EmployeeProfilePage6renderEv+0x180>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	4b23      	ldr	r3, [pc, #140]	; (8002a90 <_ZN19EmployeeProfilePage6renderEv+0x180>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	331c      	adds	r3, #28
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8002a0e:	4610      	mov	r0, r2
 8002a10:	4798      	blx	r3
		lcd->fillrect(W - 40, 10, W - 10, 30, Green);
 8002a12:	4b1f      	ldr	r3, [pc, #124]	; (8002a90 <_ZN19EmployeeProfilePage6renderEv+0x180>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	461d      	mov	r5, r3
 8002a18:	4b1d      	ldr	r3, [pc, #116]	; (8002a90 <_ZN19EmployeeProfilePage6renderEv+0x180>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	4b1c      	ldr	r3, [pc, #112]	; (8002a90 <_ZN19EmployeeProfilePage6renderEv+0x180>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	332c      	adds	r3, #44	; 0x2c
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4610      	mov	r0, r2
 8002a2a:	4798      	blx	r3
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	f1a3 0428 	sub.w	r4, r3, #40	; 0x28
 8002a32:	4b17      	ldr	r3, [pc, #92]	; (8002a90 <_ZN19EmployeeProfilePage6renderEv+0x180>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	461a      	mov	r2, r3
 8002a38:	4b15      	ldr	r3, [pc, #84]	; (8002a90 <_ZN19EmployeeProfilePage6renderEv+0x180>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	332c      	adds	r3, #44	; 0x2c
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4610      	mov	r0, r2
 8002a44:	4798      	blx	r3
 8002a46:	4603      	mov	r3, r0
 8002a48:	f1a3 020a 	sub.w	r2, r3, #10
 8002a4c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002a50:	9301      	str	r3, [sp, #4]
 8002a52:	231e      	movs	r3, #30
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	4613      	mov	r3, r2
 8002a58:	220a      	movs	r2, #10
 8002a5a:	4621      	mov	r1, r4
 8002a5c:	4628      	mov	r0, r5
 8002a5e:	f002 fc51 	bl	8005304 <_ZN15SPI_TFT_ILI93418fillrectEiiiii>
		lcd->print_text((char*) "IN", W - 35, 15, ARIAL12);
 8002a62:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <_ZN19EmployeeProfilePage6renderEv+0x180>)
 8002a64:	681c      	ldr	r4, [r3, #0]
 8002a66:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <_ZN19EmployeeProfilePage6renderEv+0x180>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <_ZN19EmployeeProfilePage6renderEv+0x180>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	332c      	adds	r3, #44	; 0x2c
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4610      	mov	r0, r2
 8002a78:	4798      	blx	r3
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8002a80:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <_ZN19EmployeeProfilePage6renderEv+0x18c>)
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	230f      	movs	r3, #15
 8002a86:	4906      	ldr	r1, [pc, #24]	; (8002aa0 <_ZN19EmployeeProfilePage6renderEv+0x190>)
 8002a88:	4620      	mov	r0, r4
 8002a8a:	f7fe fae1 	bl	8001050 <_ZN7Display10print_textEPciiPh>
 8002a8e:	e053      	b.n	8002b38 <_ZN19EmployeeProfilePage6renderEv+0x228>
 8002a90:	20000424 	.word	0x20000424
 8002a94:	0800f180 	.word	0x0800f180
 8002a98:	0800bfb0 	.word	0x0800bfb0
 8002a9c:	0800e81c 	.word	0x0800e81c
 8002aa0:	0800bfb4 	.word	0x0800bfb4
	} else {
		lcd->background(Red);
 8002aa4:	4ba1      	ldr	r3, [pc, #644]	; (8002d2c <_ZN19EmployeeProfilePage6renderEv+0x41c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4ba0      	ldr	r3, [pc, #640]	; (8002d2c <_ZN19EmployeeProfilePage6renderEv+0x41c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	331c      	adds	r3, #28
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8002ab8:	4610      	mov	r0, r2
 8002aba:	4798      	blx	r3
		lcd->fillrect(W - 60, 10, W - 10, 30, Red);
 8002abc:	4b9b      	ldr	r3, [pc, #620]	; (8002d2c <_ZN19EmployeeProfilePage6renderEv+0x41c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	461d      	mov	r5, r3
 8002ac2:	4b9a      	ldr	r3, [pc, #616]	; (8002d2c <_ZN19EmployeeProfilePage6renderEv+0x41c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	4b98      	ldr	r3, [pc, #608]	; (8002d2c <_ZN19EmployeeProfilePage6renderEv+0x41c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	332c      	adds	r3, #44	; 0x2c
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4610      	mov	r0, r2
 8002ad4:	4798      	blx	r3
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	f1a3 043c 	sub.w	r4, r3, #60	; 0x3c
 8002adc:	4b93      	ldr	r3, [pc, #588]	; (8002d2c <_ZN19EmployeeProfilePage6renderEv+0x41c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4b92      	ldr	r3, [pc, #584]	; (8002d2c <_ZN19EmployeeProfilePage6renderEv+0x41c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	332c      	adds	r3, #44	; 0x2c
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4610      	mov	r0, r2
 8002aee:	4798      	blx	r3
 8002af0:	4603      	mov	r3, r0
 8002af2:	f1a3 020a 	sub.w	r2, r3, #10
 8002af6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002afa:	9301      	str	r3, [sp, #4]
 8002afc:	231e      	movs	r3, #30
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	4613      	mov	r3, r2
 8002b02:	220a      	movs	r2, #10
 8002b04:	4621      	mov	r1, r4
 8002b06:	4628      	mov	r0, r5
 8002b08:	f002 fbfc 	bl	8005304 <_ZN15SPI_TFT_ILI93418fillrectEiiiii>
		lcd->print_text((char*) "OUT", W - 45, 15, ARIAL12);
 8002b0c:	4b87      	ldr	r3, [pc, #540]	; (8002d2c <_ZN19EmployeeProfilePage6renderEv+0x41c>)
 8002b0e:	681c      	ldr	r4, [r3, #0]
 8002b10:	4b86      	ldr	r3, [pc, #536]	; (8002d2c <_ZN19EmployeeProfilePage6renderEv+0x41c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	461a      	mov	r2, r3
 8002b16:	4b85      	ldr	r3, [pc, #532]	; (8002d2c <_ZN19EmployeeProfilePage6renderEv+0x41c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	332c      	adds	r3, #44	; 0x2c
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4610      	mov	r0, r2
 8002b22:	4798      	blx	r3
 8002b24:	4603      	mov	r3, r0
 8002b26:	f1a3 022d 	sub.w	r2, r3, #45	; 0x2d
 8002b2a:	4b81      	ldr	r3, [pc, #516]	; (8002d30 <_ZN19EmployeeProfilePage6renderEv+0x420>)
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	230f      	movs	r3, #15
 8002b30:	4980      	ldr	r1, [pc, #512]	; (8002d34 <_ZN19EmployeeProfilePage6renderEv+0x424>)
 8002b32:	4620      	mov	r0, r4
 8002b34:	f7fe fa8c 	bl	8001050 <_ZN7Display10print_textEPciiPh>
	}

	// PERSONAL INFORMATION
	lcd->background(BG);
 8002b38:	4b7c      	ldr	r3, [pc, #496]	; (8002d2c <_ZN19EmployeeProfilePage6renderEv+0x41c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4b7b      	ldr	r3, [pc, #492]	; (8002d2c <_ZN19EmployeeProfilePage6renderEv+0x41c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	331c      	adds	r3, #28
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f643 210c 	movw	r1, #14860	; 0x3a0c
 8002b4c:	4610      	mov	r0, r2
 8002b4e:	4798      	blx	r3
	char id[10], wage[10];

	lcd->rect(0, 41, 70, 90, White);
 8002b50:	4b76      	ldr	r3, [pc, #472]	; (8002d2c <_ZN19EmployeeProfilePage6renderEv+0x41c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b5a:	9301      	str	r3, [sp, #4]
 8002b5c:	235a      	movs	r3, #90	; 0x5a
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	2346      	movs	r3, #70	; 0x46
 8002b62:	2229      	movs	r2, #41	; 0x29
 8002b64:	2100      	movs	r1, #0
 8002b66:	f002 fb6e 	bl	8005246 <_ZN15SPI_TFT_ILI93414rectEiiiii>
	lcd->print_text((char*) "Basic", 15, 50, ARIAL12);
 8002b6a:	4b70      	ldr	r3, [pc, #448]	; (8002d2c <_ZN19EmployeeProfilePage6renderEv+0x41c>)
 8002b6c:	6818      	ldr	r0, [r3, #0]
 8002b6e:	4b70      	ldr	r3, [pc, #448]	; (8002d30 <_ZN19EmployeeProfilePage6renderEv+0x420>)
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	2332      	movs	r3, #50	; 0x32
 8002b74:	220f      	movs	r2, #15
 8002b76:	4970      	ldr	r1, [pc, #448]	; (8002d38 <_ZN19EmployeeProfilePage6renderEv+0x428>)
 8002b78:	f7fe fa6a 	bl	8001050 <_ZN7Display10print_textEPciiPh>
	lcd->print_text((char*) "Info:", 20, 70, ARIAL12);
 8002b7c:	4b6b      	ldr	r3, [pc, #428]	; (8002d2c <_ZN19EmployeeProfilePage6renderEv+0x41c>)
 8002b7e:	6818      	ldr	r0, [r3, #0]
 8002b80:	4b6b      	ldr	r3, [pc, #428]	; (8002d30 <_ZN19EmployeeProfilePage6renderEv+0x420>)
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	2346      	movs	r3, #70	; 0x46
 8002b86:	2214      	movs	r2, #20
 8002b88:	496c      	ldr	r1, [pc, #432]	; (8002d3c <_ZN19EmployeeProfilePage6renderEv+0x42c>)
 8002b8a:	f7fe fa61 	bl	8001050 <_ZN7Display10print_textEPciiPh>

	sprintf(id, "#%d", employee->id);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b98:	4969      	ldr	r1, [pc, #420]	; (8002d40 <_ZN19EmployeeProfilePage6renderEv+0x430>)
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f005 fef2 	bl	8008984 <siprintf>
	lcd->rect(0, 90, 70, 140, White);
 8002ba0:	4b62      	ldr	r3, [pc, #392]	; (8002d2c <_ZN19EmployeeProfilePage6renderEv+0x41c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002baa:	9301      	str	r3, [sp, #4]
 8002bac:	238c      	movs	r3, #140	; 0x8c
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	2346      	movs	r3, #70	; 0x46
 8002bb2:	225a      	movs	r2, #90	; 0x5a
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	f002 fb46 	bl	8005246 <_ZN15SPI_TFT_ILI93414rectEiiiii>
	lcd->print_text((char*) "[id]", 25, 100, ARIAL12);
 8002bba:	4b5c      	ldr	r3, [pc, #368]	; (8002d2c <_ZN19EmployeeProfilePage6renderEv+0x41c>)
 8002bbc:	6818      	ldr	r0, [r3, #0]
 8002bbe:	4b5c      	ldr	r3, [pc, #368]	; (8002d30 <_ZN19EmployeeProfilePage6renderEv+0x420>)
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	2364      	movs	r3, #100	; 0x64
 8002bc4:	2219      	movs	r2, #25
 8002bc6:	495f      	ldr	r1, [pc, #380]	; (8002d44 <_ZN19EmployeeProfilePage6renderEv+0x434>)
 8002bc8:	f7fe fa42 	bl	8001050 <_ZN7Display10print_textEPciiPh>
	lcd->print_text(id, 20, 120, ARIAL12);
 8002bcc:	4b57      	ldr	r3, [pc, #348]	; (8002d2c <_ZN19EmployeeProfilePage6renderEv+0x41c>)
 8002bce:	6818      	ldr	r0, [r3, #0]
 8002bd0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8002bd4:	4b56      	ldr	r3, [pc, #344]	; (8002d30 <_ZN19EmployeeProfilePage6renderEv+0x420>)
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	2378      	movs	r3, #120	; 0x78
 8002bda:	2214      	movs	r2, #20
 8002bdc:	f7fe fa38 	bl	8001050 <_ZN7Display10print_textEPciiPh>

	sprintf(wage, "%.2f/hr", employee->wage);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fd fcbe 	bl	8000568 <__aeabi_f2d>
 8002bec:	4603      	mov	r3, r0
 8002bee:	460c      	mov	r4, r1
 8002bf0:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4623      	mov	r3, r4
 8002bf8:	4953      	ldr	r1, [pc, #332]	; (8002d48 <_ZN19EmployeeProfilePage6renderEv+0x438>)
 8002bfa:	f005 fec3 	bl	8008984 <siprintf>
	lcd->rect(0, 140, 70, 190, White);
 8002bfe:	4b4b      	ldr	r3, [pc, #300]	; (8002d2c <_ZN19EmployeeProfilePage6renderEv+0x41c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c08:	9301      	str	r3, [sp, #4]
 8002c0a:	23be      	movs	r3, #190	; 0xbe
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	2346      	movs	r3, #70	; 0x46
 8002c10:	228c      	movs	r2, #140	; 0x8c
 8002c12:	2100      	movs	r1, #0
 8002c14:	f002 fb17 	bl	8005246 <_ZN15SPI_TFT_ILI93414rectEiiiii>
	lcd->print_text((char*) "[wage]", 12, 150, ARIAL12);
 8002c18:	4b44      	ldr	r3, [pc, #272]	; (8002d2c <_ZN19EmployeeProfilePage6renderEv+0x41c>)
 8002c1a:	6818      	ldr	r0, [r3, #0]
 8002c1c:	4b44      	ldr	r3, [pc, #272]	; (8002d30 <_ZN19EmployeeProfilePage6renderEv+0x420>)
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	2396      	movs	r3, #150	; 0x96
 8002c22:	220c      	movs	r2, #12
 8002c24:	4949      	ldr	r1, [pc, #292]	; (8002d4c <_ZN19EmployeeProfilePage6renderEv+0x43c>)
 8002c26:	f7fe fa13 	bl	8001050 <_ZN7Display10print_textEPciiPh>
	lcd->print_text(wage, 5, 170, ARIAL12);
 8002c2a:	4b40      	ldr	r3, [pc, #256]	; (8002d2c <_ZN19EmployeeProfilePage6renderEv+0x41c>)
 8002c2c:	6818      	ldr	r0, [r3, #0]
 8002c2e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002c32:	4b3f      	ldr	r3, [pc, #252]	; (8002d30 <_ZN19EmployeeProfilePage6renderEv+0x420>)
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	23aa      	movs	r3, #170	; 0xaa
 8002c38:	2205      	movs	r2, #5
 8002c3a:	f7fe fa09 	bl	8001050 <_ZN7Display10print_textEPciiPh>

	lcd->rect(0, 190, 70, 240, White);
 8002c3e:	4b3b      	ldr	r3, [pc, #236]	; (8002d2c <_ZN19EmployeeProfilePage6renderEv+0x41c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c48:	9301      	str	r3, [sp, #4]
 8002c4a:	23f0      	movs	r3, #240	; 0xf0
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	2346      	movs	r3, #70	; 0x46
 8002c50:	22be      	movs	r2, #190	; 0xbe
 8002c52:	2100      	movs	r1, #0
 8002c54:	f002 faf7 	bl	8005246 <_ZN15SPI_TFT_ILI93414rectEiiiii>
	lcd->print_text((char*) "[admin]", 10, 200, ARIAL12);
 8002c58:	4b34      	ldr	r3, [pc, #208]	; (8002d2c <_ZN19EmployeeProfilePage6renderEv+0x41c>)
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	4b34      	ldr	r3, [pc, #208]	; (8002d30 <_ZN19EmployeeProfilePage6renderEv+0x420>)
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	23c8      	movs	r3, #200	; 0xc8
 8002c62:	220a      	movs	r2, #10
 8002c64:	493a      	ldr	r1, [pc, #232]	; (8002d50 <_ZN19EmployeeProfilePage6renderEv+0x440>)
 8002c66:	f7fe f9f3 	bl	8001050 <_ZN7Display10print_textEPciiPh>
	lcd->print_text((char*) (employee->admin ? "yes" : " no"), 20, 220, ARIAL12);
 8002c6a:	4b30      	ldr	r3, [pc, #192]	; (8002d2c <_ZN19EmployeeProfilePage6renderEv+0x41c>)
 8002c6c:	6818      	ldr	r0, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <_ZN19EmployeeProfilePage6renderEv+0x36c>
 8002c78:	4936      	ldr	r1, [pc, #216]	; (8002d54 <_ZN19EmployeeProfilePage6renderEv+0x444>)
 8002c7a:	e000      	b.n	8002c7e <_ZN19EmployeeProfilePage6renderEv+0x36e>
 8002c7c:	4936      	ldr	r1, [pc, #216]	; (8002d58 <_ZN19EmployeeProfilePage6renderEv+0x448>)
 8002c7e:	4b2c      	ldr	r3, [pc, #176]	; (8002d30 <_ZN19EmployeeProfilePage6renderEv+0x420>)
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	23dc      	movs	r3, #220	; 0xdc
 8002c84:	2214      	movs	r2, #20
 8002c86:	f7fe f9e3 	bl	8001050 <_ZN7Display10print_textEPciiPh>

	// CLOCK IN/OUT EVENTS
	lcd->print_text((char*) "[events]", 100, 50, ARIAL24);
 8002c8a:	4b28      	ldr	r3, [pc, #160]	; (8002d2c <_ZN19EmployeeProfilePage6renderEv+0x41c>)
 8002c8c:	6818      	ldr	r0, [r3, #0]
 8002c8e:	4b33      	ldr	r3, [pc, #204]	; (8002d5c <_ZN19EmployeeProfilePage6renderEv+0x44c>)
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	2332      	movs	r3, #50	; 0x32
 8002c94:	2264      	movs	r2, #100	; 0x64
 8002c96:	4932      	ldr	r1, [pc, #200]	; (8002d60 <_ZN19EmployeeProfilePage6renderEv+0x450>)
 8002c98:	f7fe f9da 	bl	8001050 <_ZN7Display10print_textEPciiPh>
	for (int i = 0; i < employee->num_events; i++) {
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca4:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 8002ca8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002caa:	429a      	cmp	r2, r3
 8002cac:	da3a      	bge.n	8002d24 <_ZN19EmployeeProfilePage6renderEv+0x414>
		char t[20], stamp[23];
		strftime(t, sizeof(t), "%H:%M (%m/%d)", &employee->events[i].timestamp);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002cb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	3340      	adds	r3, #64	; 0x40
 8002cbe:	440b      	add	r3, r1
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	f107 0020 	add.w	r0, r7, #32
 8002cc6:	4a27      	ldr	r2, [pc, #156]	; (8002d64 <_ZN19EmployeeProfilePage6renderEv+0x454>)
 8002cc8:	2114      	movs	r1, #20
 8002cca:	f006 fc3b 	bl	8009544 <strftime>
		sprintf(stamp, "%s @  %s\n", employee->events[i].clock_in ? "IN " : "OUT", t);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002cd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	440b      	add	r3, r1
 8002cde:	3340      	adds	r3, #64	; 0x40
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <_ZN19EmployeeProfilePage6renderEv+0x3da>
 8002ce6:	4a20      	ldr	r2, [pc, #128]	; (8002d68 <_ZN19EmployeeProfilePage6renderEv+0x458>)
 8002ce8:	e000      	b.n	8002cec <_ZN19EmployeeProfilePage6renderEv+0x3dc>
 8002cea:	4a12      	ldr	r2, [pc, #72]	; (8002d34 <_ZN19EmployeeProfilePage6renderEv+0x424>)
 8002cec:	f107 0320 	add.w	r3, r7, #32
 8002cf0:	f107 0008 	add.w	r0, r7, #8
 8002cf4:	491d      	ldr	r1, [pc, #116]	; (8002d6c <_ZN19EmployeeProfilePage6renderEv+0x45c>)
 8002cf6:	f005 fe45 	bl	8008984 <siprintf>
		lcd->print_text(stamp, 80, 90 + 30 * i, ARIAL12);
 8002cfa:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <_ZN19EmployeeProfilePage6renderEv+0x41c>)
 8002cfc:	6818      	ldr	r0, [r3, #0]
 8002cfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d00:	4613      	mov	r3, r2
 8002d02:	011b      	lsls	r3, r3, #4
 8002d04:	1a9b      	subs	r3, r3, r2
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	f103 025a 	add.w	r2, r3, #90	; 0x5a
 8002d0c:	f107 0108 	add.w	r1, r7, #8
 8002d10:	4b07      	ldr	r3, [pc, #28]	; (8002d30 <_ZN19EmployeeProfilePage6renderEv+0x420>)
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	4613      	mov	r3, r2
 8002d16:	2250      	movs	r2, #80	; 0x50
 8002d18:	f7fe f99a 	bl	8001050 <_ZN7Display10print_textEPciiPh>
	for (int i = 0; i < employee->num_events; i++) {
 8002d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d1e:	3301      	adds	r3, #1
 8002d20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d22:	e7bd      	b.n	8002ca0 <_ZN19EmployeeProfilePage6renderEv+0x390>
	}


}
 8002d24:	bf00      	nop
 8002d26:	3750      	adds	r7, #80	; 0x50
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bdb0      	pop	{r4, r5, r7, pc}
 8002d2c:	20000424 	.word	0x20000424
 8002d30:	0800e81c 	.word	0x0800e81c
 8002d34:	0800bfb8 	.word	0x0800bfb8
 8002d38:	0800bfbc 	.word	0x0800bfbc
 8002d3c:	0800bfc4 	.word	0x0800bfc4
 8002d40:	0800bfcc 	.word	0x0800bfcc
 8002d44:	0800bfd0 	.word	0x0800bfd0
 8002d48:	0800bfd8 	.word	0x0800bfd8
 8002d4c:	0800bfe0 	.word	0x0800bfe0
 8002d50:	0800bfe8 	.word	0x0800bfe8
 8002d54:	0800bff0 	.word	0x0800bff0
 8002d58:	0800bff4 	.word	0x0800bff4
 8002d5c:	0800f180 	.word	0x0800f180
 8002d60:	0800bff8 	.word	0x0800bff8
 8002d64:	0800c004 	.word	0x0800c004
 8002d68:	0800c014 	.word	0x0800c014
 8002d6c:	0800c018 	.word	0x0800c018

08002d70 <_ZN19EmployeeProfilePage17up_button_handlerEv>:

void EmployeeProfilePage::up_button_handler() { decrement_selection(); }
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	3328      	adds	r3, #40	; 0x28
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	4798      	blx	r3
 8002d84:	bf00      	nop
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <_ZN19EmployeeProfilePage19down_button_handlerEv>:

void EmployeeProfilePage::down_button_handler() { increment_selection(); }
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	3324      	adds	r3, #36	; 0x24
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	4798      	blx	r3
 8002da0:	bf00      	nop
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <_ZN19EmployeeProfilePage19left_button_handlerEv>:

void EmployeeProfilePage::left_button_handler() { get_page((char*) "employees")->make_active(); }
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	4806      	ldr	r0, [pc, #24]	; (8002dcc <_ZN19EmployeeProfilePage19left_button_handlerEv+0x24>)
 8002db2:	f7fe fe2f 	bl	8001a14 <_Z8get_pagePc>
 8002db6:	4602      	mov	r2, r0
 8002db8:	6813      	ldr	r3, [r2, #0]
 8002dba:	3308      	adds	r3, #8
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	4610      	mov	r0, r2
 8002dc2:	4798      	blx	r3
 8002dc4:	bf00      	nop
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	0800c024 	.word	0x0800c024

08002dd0 <_ZN19EmployeeProfilePage20right_button_handlerEv>:

void EmployeeProfilePage::right_button_handler() { return; }
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <_ZN19EmployeeProfilePage21center_button_handlerEv>:

void EmployeeProfilePage::center_button_handler() { return; }
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <_ZN19EmployeeProfilePage19increment_selectionEv>:

void EmployeeProfilePage::increment_selection() {
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
	if (selection_num < num_employees) selection_num++;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	4b07      	ldr	r3, [pc, #28]	; (8002e24 <_ZN19EmployeeProfilePage19increment_selectionEv+0x2c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	da04      	bge.n	8002e16 <_ZN19EmployeeProfilePage19increment_selectionEv+0x1e>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	1c5a      	adds	r2, r3, #1
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	605a      	str	r2, [r3, #4]
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	200002e0 	.word	0x200002e0

08002e28 <_ZN19EmployeeProfilePage19decrement_selectionEv>:

void EmployeeProfilePage::decrement_selection() {
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
	if (selection_num > 0) selection_num--;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	dd04      	ble.n	8002e42 <_ZN19EmployeeProfilePage19decrement_selectionEv+0x1a>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	1e5a      	subs	r2, r3, #1
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	605a      	str	r2, [r3, #4]
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <_ZN19EmployeeProfilePage14make_selectionEv>:

void EmployeeProfilePage::make_selection() {
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]

}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
	...

08002e64 <_ZN19EmployeeProfilePageD1Ev>:
#define INC_PAGES_EMPLOYEEPROFILEPAGE_HPP_


#include <pages/Page.hpp>

class EmployeeProfilePage : public Page {
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	4a05      	ldr	r2, [pc, #20]	; (8002e84 <_ZN19EmployeeProfilePageD1Ev+0x20>)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff f98b 	bl	8002190 <_ZN4PageD1Ev>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	08010cec 	.word	0x08010cec

08002e88 <_ZN19EmployeeProfilePageD0Ev>:
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7ff ffe7 	bl	8002e64 <_ZN19EmployeeProfilePageD1Ev>
 8002e96:	2140      	movs	r1, #64	; 0x40
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f003 fff2 	bl	8006e82 <_ZdlPvj>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <_ZN8HelpPageC1EPc>:

#include <pages/HelpPage.hpp>
#include "lcd.hpp"


HelpPage::HelpPage(char* page_name) : Page() {
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff f95b 	bl	8002170 <_ZN4PageC1Ev>
 8002eba:	4a08      	ldr	r2, [pc, #32]	; (8002edc <_ZN8HelpPageC1EPc+0x34>)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	601a      	str	r2, [r3, #0]
	strcpy(name, page_name);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3308      	adds	r3, #8
 8002ec4:	6839      	ldr	r1, [r7, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f005 fdce 	bl	8008a68 <strcpy>
	selection_num = 0;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	605a      	str	r2, [r3, #4]
}
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	080131ec 	.word	0x080131ec

08002ee0 <_ZN8HelpPage11make_activeEP8Employee>:

void HelpPage::make_active(Employee* e) {
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
	active_page = this;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a05      	ldr	r2, [pc, #20]	; (8002f04 <_ZN8HelpPage11make_activeEP8Employee+0x24>)
 8002eee:	6013      	str	r3, [r2, #0]
	render();
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	330c      	adds	r3, #12
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	4798      	blx	r3
}
 8002efc:	bf00      	nop
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	20000420 	.word	0x20000420

08002f08 <_ZN8HelpPage6renderEv>:

void HelpPage::render() {
 8002f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af02      	add	r7, sp, #8
 8002f0e:	6078      	str	r0, [r7, #4]
	// INITIALIZATION
	lcd->background(BG);  		// Set background to BG color
 8002f10:	4b83      	ldr	r3, [pc, #524]	; (8003120 <_ZN8HelpPage6renderEv+0x218>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	461a      	mov	r2, r3
 8002f16:	4b82      	ldr	r3, [pc, #520]	; (8003120 <_ZN8HelpPage6renderEv+0x218>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	331c      	adds	r3, #28
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f643 210c 	movw	r1, #14860	; 0x3a0c
 8002f24:	4610      	mov	r0, r2
 8002f26:	4798      	blx	r3
	lcd->foreground(White);    	// Set text color to white
 8002f28:	4b7d      	ldr	r3, [pc, #500]	; (8003120 <_ZN8HelpPage6renderEv+0x218>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	4b7c      	ldr	r3, [pc, #496]	; (8003120 <_ZN8HelpPage6renderEv+0x218>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	3318      	adds	r3, #24
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	4798      	blx	r3
	lcd->cls();                	// Clear screen
 8002f40:	4b77      	ldr	r3, [pc, #476]	; (8003120 <_ZN8HelpPage6renderEv+0x218>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	461a      	mov	r2, r3
 8002f46:	4b76      	ldr	r3, [pc, #472]	; (8003120 <_ZN8HelpPage6renderEv+0x218>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	3310      	adds	r3, #16
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4610      	mov	r0, r2
 8002f52:	4798      	blx	r3
	lcd->set_orientation(0);
 8002f54:	4b72      	ldr	r3, [pc, #456]	; (8003120 <_ZN8HelpPage6renderEv+0x218>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2100      	movs	r1, #0
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f001 fc0e 	bl	800477c <_ZN15SPI_TFT_ILI934115set_orientationEj>

	// PAGE TITLE
	lcd->fillrect(0, 0, W, 40, ACCENT);
 8002f60:	4b6f      	ldr	r3, [pc, #444]	; (8003120 <_ZN8HelpPage6renderEv+0x218>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	461c      	mov	r4, r3
 8002f66:	4b6e      	ldr	r3, [pc, #440]	; (8003120 <_ZN8HelpPage6renderEv+0x218>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	4b6c      	ldr	r3, [pc, #432]	; (8003120 <_ZN8HelpPage6renderEv+0x218>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	332c      	adds	r3, #44	; 0x2c
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4610      	mov	r0, r2
 8002f78:	4798      	blx	r3
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	f243 3355 	movw	r3, #13141	; 0x3355
 8002f80:	9301      	str	r3, [sp, #4]
 8002f82:	2328      	movs	r3, #40	; 0x28
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	4613      	mov	r3, r2
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	4620      	mov	r0, r4
 8002f8e:	f002 f9b9 	bl	8005304 <_ZN15SPI_TFT_ILI93418fillrectEiiiii>
	lcd->background(ACCENT);
 8002f92:	4b63      	ldr	r3, [pc, #396]	; (8003120 <_ZN8HelpPage6renderEv+0x218>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	4b61      	ldr	r3, [pc, #388]	; (8003120 <_ZN8HelpPage6renderEv+0x218>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	331c      	adds	r3, #28
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f243 3155 	movw	r1, #13141	; 0x3355
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	4798      	blx	r3
	lcd->print_text((char*) "Time Clock", 40, 10, ARIAL24);
 8002faa:	4b5d      	ldr	r3, [pc, #372]	; (8003120 <_ZN8HelpPage6renderEv+0x218>)
 8002fac:	6818      	ldr	r0, [r3, #0]
 8002fae:	4b5d      	ldr	r3, [pc, #372]	; (8003124 <_ZN8HelpPage6renderEv+0x21c>)
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	230a      	movs	r3, #10
 8002fb4:	2228      	movs	r2, #40	; 0x28
 8002fb6:	495c      	ldr	r1, [pc, #368]	; (8003128 <_ZN8HelpPage6renderEv+0x220>)
 8002fb8:	f7fe f84a 	bl	8001050 <_ZN7Display10print_textEPciiPh>

	// HELP CONTENT
	lcd->background(BG);
 8002fbc:	4b58      	ldr	r3, [pc, #352]	; (8003120 <_ZN8HelpPage6renderEv+0x218>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4b57      	ldr	r3, [pc, #348]	; (8003120 <_ZN8HelpPage6renderEv+0x218>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	331c      	adds	r3, #28
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f643 210c 	movw	r1, #14860	; 0x3a0c
 8002fd0:	4610      	mov	r0, r2
 8002fd2:	4798      	blx	r3
	lcd->print_text((char*) "This system allows users to:", 10, 50, ARIAL12);
 8002fd4:	4b52      	ldr	r3, [pc, #328]	; (8003120 <_ZN8HelpPage6renderEv+0x218>)
 8002fd6:	6818      	ldr	r0, [r3, #0]
 8002fd8:	4b54      	ldr	r3, [pc, #336]	; (800312c <_ZN8HelpPage6renderEv+0x224>)
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	2332      	movs	r3, #50	; 0x32
 8002fde:	220a      	movs	r2, #10
 8002fe0:	4953      	ldr	r1, [pc, #332]	; (8003130 <_ZN8HelpPage6renderEv+0x228>)
 8002fe2:	f7fe f835 	bl	8001050 <_ZN7Display10print_textEPciiPh>
	lcd->print_text((char*) "- Clock in/out via Bluetooth", 10, 80, ARIAL12);
 8002fe6:	4b4e      	ldr	r3, [pc, #312]	; (8003120 <_ZN8HelpPage6renderEv+0x218>)
 8002fe8:	6818      	ldr	r0, [r3, #0]
 8002fea:	4b50      	ldr	r3, [pc, #320]	; (800312c <_ZN8HelpPage6renderEv+0x224>)
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	2350      	movs	r3, #80	; 0x50
 8002ff0:	220a      	movs	r2, #10
 8002ff2:	4950      	ldr	r1, [pc, #320]	; (8003134 <_ZN8HelpPage6renderEv+0x22c>)
 8002ff4:	f7fe f82c 	bl	8001050 <_ZN7Display10print_textEPciiPh>
	lcd->print_text((char*) "- Track employee work hours", 10, 100, ARIAL12);
 8002ff8:	4b49      	ldr	r3, [pc, #292]	; (8003120 <_ZN8HelpPage6renderEv+0x218>)
 8002ffa:	6818      	ldr	r0, [r3, #0]
 8002ffc:	4b4b      	ldr	r3, [pc, #300]	; (800312c <_ZN8HelpPage6renderEv+0x224>)
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	2364      	movs	r3, #100	; 0x64
 8003002:	220a      	movs	r2, #10
 8003004:	494c      	ldr	r1, [pc, #304]	; (8003138 <_ZN8HelpPage6renderEv+0x230>)
 8003006:	f7fe f823 	bl	8001050 <_ZN7Display10print_textEPciiPh>
	lcd->print_text((char*) "- Calculate payroll", 10, 120, ARIAL12);
 800300a:	4b45      	ldr	r3, [pc, #276]	; (8003120 <_ZN8HelpPage6renderEv+0x218>)
 800300c:	6818      	ldr	r0, [r3, #0]
 800300e:	4b47      	ldr	r3, [pc, #284]	; (800312c <_ZN8HelpPage6renderEv+0x224>)
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	2378      	movs	r3, #120	; 0x78
 8003014:	220a      	movs	r2, #10
 8003016:	4949      	ldr	r1, [pc, #292]	; (800313c <_ZN8HelpPage6renderEv+0x234>)
 8003018:	f7fe f81a 	bl	8001050 <_ZN7Display10print_textEPciiPh>
	lcd->print_text((char*) "Use the joystick to navigate.", 10, 150, ARIAL12);
 800301c:	4b40      	ldr	r3, [pc, #256]	; (8003120 <_ZN8HelpPage6renderEv+0x218>)
 800301e:	6818      	ldr	r0, [r3, #0]
 8003020:	4b42      	ldr	r3, [pc, #264]	; (800312c <_ZN8HelpPage6renderEv+0x224>)
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	2396      	movs	r3, #150	; 0x96
 8003026:	220a      	movs	r2, #10
 8003028:	4945      	ldr	r1, [pc, #276]	; (8003140 <_ZN8HelpPage6renderEv+0x238>)
 800302a:	f7fe f811 	bl	8001050 <_ZN7Display10print_textEPciiPh>
	lcd->print_text((char*) "Press any button to return.", 10, 170, ARIAL12);
 800302e:	4b3c      	ldr	r3, [pc, #240]	; (8003120 <_ZN8HelpPage6renderEv+0x218>)
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	4b3e      	ldr	r3, [pc, #248]	; (800312c <_ZN8HelpPage6renderEv+0x224>)
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	23aa      	movs	r3, #170	; 0xaa
 8003038:	220a      	movs	r2, #10
 800303a:	4942      	ldr	r1, [pc, #264]	; (8003144 <_ZN8HelpPage6renderEv+0x23c>)
 800303c:	f7fe f808 	bl	8001050 <_ZN7Display10print_textEPciiPh>
	lcd->print_text((char*) "Have fun!", 80, 230, ARIAL12);
 8003040:	4b37      	ldr	r3, [pc, #220]	; (8003120 <_ZN8HelpPage6renderEv+0x218>)
 8003042:	6818      	ldr	r0, [r3, #0]
 8003044:	4b39      	ldr	r3, [pc, #228]	; (800312c <_ZN8HelpPage6renderEv+0x224>)
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	23e6      	movs	r3, #230	; 0xe6
 800304a:	2250      	movs	r2, #80	; 0x50
 800304c:	493e      	ldr	r1, [pc, #248]	; (8003148 <_ZN8HelpPage6renderEv+0x240>)
 800304e:	f7fd ffff 	bl	8001050 <_ZN7Display10print_textEPciiPh>

	// CREDITS
	lcd->fillrect(0, H - 20, W, H, ACCENT);
 8003052:	4b33      	ldr	r3, [pc, #204]	; (8003120 <_ZN8HelpPage6renderEv+0x218>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	461d      	mov	r5, r3
 8003058:	4b31      	ldr	r3, [pc, #196]	; (8003120 <_ZN8HelpPage6renderEv+0x218>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	461a      	mov	r2, r3
 800305e:	4b30      	ldr	r3, [pc, #192]	; (8003120 <_ZN8HelpPage6renderEv+0x218>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	3330      	adds	r3, #48	; 0x30
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4610      	mov	r0, r2
 800306a:	4798      	blx	r3
 800306c:	4603      	mov	r3, r0
 800306e:	f1a3 0414 	sub.w	r4, r3, #20
 8003072:	4b2b      	ldr	r3, [pc, #172]	; (8003120 <_ZN8HelpPage6renderEv+0x218>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	4b29      	ldr	r3, [pc, #164]	; (8003120 <_ZN8HelpPage6renderEv+0x218>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	332c      	adds	r3, #44	; 0x2c
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4610      	mov	r0, r2
 8003084:	4798      	blx	r3
 8003086:	4606      	mov	r6, r0
 8003088:	4b25      	ldr	r3, [pc, #148]	; (8003120 <_ZN8HelpPage6renderEv+0x218>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	461a      	mov	r2, r3
 800308e:	4b24      	ldr	r3, [pc, #144]	; (8003120 <_ZN8HelpPage6renderEv+0x218>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	3330      	adds	r3, #48	; 0x30
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4610      	mov	r0, r2
 800309a:	4798      	blx	r3
 800309c:	4602      	mov	r2, r0
 800309e:	f243 3355 	movw	r3, #13141	; 0x3355
 80030a2:	9301      	str	r3, [sp, #4]
 80030a4:	9200      	str	r2, [sp, #0]
 80030a6:	4633      	mov	r3, r6
 80030a8:	4622      	mov	r2, r4
 80030aa:	2100      	movs	r1, #0
 80030ac:	4628      	mov	r0, r5
 80030ae:	f002 f929 	bl	8005304 <_ZN15SPI_TFT_ILI93418fillrectEiiiii>
	lcd->background(ACCENT);
 80030b2:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <_ZN8HelpPage6renderEv+0x218>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	461a      	mov	r2, r3
 80030b8:	4b19      	ldr	r3, [pc, #100]	; (8003120 <_ZN8HelpPage6renderEv+0x218>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	331c      	adds	r3, #28
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f243 3155 	movw	r1, #13141	; 0x3355
 80030c6:	4610      	mov	r0, r2
 80030c8:	4798      	blx	r3
	lcd->foreground(White);
 80030ca:	4b15      	ldr	r3, [pc, #84]	; (8003120 <_ZN8HelpPage6renderEv+0x218>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	461a      	mov	r2, r3
 80030d0:	4b13      	ldr	r3, [pc, #76]	; (8003120 <_ZN8HelpPage6renderEv+0x218>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	3318      	adds	r3, #24
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030de:	4610      	mov	r0, r2
 80030e0:	4798      	blx	r3
	lcd->print_text((char*) "Created by Tyler Ekaireb", 25, H - 15, ARIAL12);
 80030e2:	4b0f      	ldr	r3, [pc, #60]	; (8003120 <_ZN8HelpPage6renderEv+0x218>)
 80030e4:	681c      	ldr	r4, [r3, #0]
 80030e6:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <_ZN8HelpPage6renderEv+0x218>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	461a      	mov	r2, r3
 80030ec:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <_ZN8HelpPage6renderEv+0x218>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	3330      	adds	r3, #48	; 0x30
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4610      	mov	r0, r2
 80030f8:	4798      	blx	r3
 80030fa:	4603      	mov	r3, r0
 80030fc:	f1a3 020f 	sub.w	r2, r3, #15
 8003100:	4b0a      	ldr	r3, [pc, #40]	; (800312c <_ZN8HelpPage6renderEv+0x224>)
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	4613      	mov	r3, r2
 8003106:	2219      	movs	r2, #25
 8003108:	4910      	ldr	r1, [pc, #64]	; (800314c <_ZN8HelpPage6renderEv+0x244>)
 800310a:	4620      	mov	r0, r4
 800310c:	f7fd ffa0 	bl	8001050 <_ZN7Display10print_textEPciiPh>


	render_highlighted_selection();
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f89f 	bl	8003254 <_ZN8HelpPage28render_highlighted_selectionEv>
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800311e:	bf00      	nop
 8003120:	20000424 	.word	0x20000424
 8003124:	08011680 	.word	0x08011680
 8003128:	0800c030 	.word	0x0800c030
 800312c:	08010d1c 	.word	0x08010d1c
 8003130:	0800c03c 	.word	0x0800c03c
 8003134:	0800c05c 	.word	0x0800c05c
 8003138:	0800c07c 	.word	0x0800c07c
 800313c:	0800c098 	.word	0x0800c098
 8003140:	0800c0ac 	.word	0x0800c0ac
 8003144:	0800c0cc 	.word	0x0800c0cc
 8003148:	0800c0e8 	.word	0x0800c0e8
 800314c:	0800c0f4 	.word	0x0800c0f4

08003150 <_ZN8HelpPage17up_button_handlerEv>:

void HelpPage::up_button_handler() { get_page((char*) "main")->make_active(); }
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	4806      	ldr	r0, [pc, #24]	; (8003174 <_ZN8HelpPage17up_button_handlerEv+0x24>)
 800315a:	f7fe fc5b 	bl	8001a14 <_Z8get_pagePc>
 800315e:	4602      	mov	r2, r0
 8003160:	6813      	ldr	r3, [r2, #0]
 8003162:	3308      	adds	r3, #8
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2100      	movs	r1, #0
 8003168:	4610      	mov	r0, r2
 800316a:	4798      	blx	r3
 800316c:	bf00      	nop
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	0800c110 	.word	0x0800c110

08003178 <_ZN8HelpPage19down_button_handlerEv>:

void HelpPage::down_button_handler() { get_page((char*) "main")->make_active(); }
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	4806      	ldr	r0, [pc, #24]	; (800319c <_ZN8HelpPage19down_button_handlerEv+0x24>)
 8003182:	f7fe fc47 	bl	8001a14 <_Z8get_pagePc>
 8003186:	4602      	mov	r2, r0
 8003188:	6813      	ldr	r3, [r2, #0]
 800318a:	3308      	adds	r3, #8
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2100      	movs	r1, #0
 8003190:	4610      	mov	r0, r2
 8003192:	4798      	blx	r3
 8003194:	bf00      	nop
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	0800c110 	.word	0x0800c110

080031a0 <_ZN8HelpPage19left_button_handlerEv>:

void HelpPage::left_button_handler() { get_page((char*) "main")->make_active(); }
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	4806      	ldr	r0, [pc, #24]	; (80031c4 <_ZN8HelpPage19left_button_handlerEv+0x24>)
 80031aa:	f7fe fc33 	bl	8001a14 <_Z8get_pagePc>
 80031ae:	4602      	mov	r2, r0
 80031b0:	6813      	ldr	r3, [r2, #0]
 80031b2:	3308      	adds	r3, #8
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2100      	movs	r1, #0
 80031b8:	4610      	mov	r0, r2
 80031ba:	4798      	blx	r3
 80031bc:	bf00      	nop
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	0800c110 	.word	0x0800c110

080031c8 <_ZN8HelpPage20right_button_handlerEv>:

void HelpPage::right_button_handler() { get_page((char*) "main")->make_active(); }
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	4806      	ldr	r0, [pc, #24]	; (80031ec <_ZN8HelpPage20right_button_handlerEv+0x24>)
 80031d2:	f7fe fc1f 	bl	8001a14 <_Z8get_pagePc>
 80031d6:	4602      	mov	r2, r0
 80031d8:	6813      	ldr	r3, [r2, #0]
 80031da:	3308      	adds	r3, #8
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2100      	movs	r1, #0
 80031e0:	4610      	mov	r0, r2
 80031e2:	4798      	blx	r3
 80031e4:	bf00      	nop
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	0800c110 	.word	0x0800c110

080031f0 <_ZN8HelpPage21center_button_handlerEv>:

void HelpPage::center_button_handler() { get_page((char*) "main")->make_active(); }
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	4806      	ldr	r0, [pc, #24]	; (8003214 <_ZN8HelpPage21center_button_handlerEv+0x24>)
 80031fa:	f7fe fc0b 	bl	8001a14 <_Z8get_pagePc>
 80031fe:	4602      	mov	r2, r0
 8003200:	6813      	ldr	r3, [r2, #0]
 8003202:	3308      	adds	r3, #8
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2100      	movs	r1, #0
 8003208:	4610      	mov	r0, r2
 800320a:	4798      	blx	r3
 800320c:	bf00      	nop
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	0800c110 	.word	0x0800c110

08003218 <_ZN8HelpPage19increment_selectionEv>:


// Not used on this page
void HelpPage::increment_selection() { return; }
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <_ZN8HelpPage19decrement_selectionEv>:
void HelpPage::decrement_selection() { return; }
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <_ZN8HelpPage14make_selectionEv>:
void HelpPage::make_selection() { return; }
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <_ZN8HelpPage28render_highlighted_selectionEv>:
void HelpPage::clear_highlighted_selection() { return; }
void HelpPage::render_highlighted_selection() { return; }
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <_ZN8HelpPageD1Ev>:
#define INC_PAGES_HELPPAGE_HPP_


#include <pages/Page.hpp>

class HelpPage : public Page {
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	4a05      	ldr	r2, [pc, #20]	; (8003288 <_ZN8HelpPageD1Ev+0x20>)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4618      	mov	r0, r3
 800327a:	f7fe ff89 	bl	8002190 <_ZN4PageD1Ev>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4618      	mov	r0, r3
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	080131ec 	.word	0x080131ec

0800328c <_ZN8HelpPageD0Ev>:
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7ff ffe7 	bl	8003268 <_ZN8HelpPageD1Ev>
 800329a:	213c      	movs	r1, #60	; 0x3c
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f003 fdf0 	bl	8006e82 <_ZdlPvj>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4618      	mov	r0, r3
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <_ZN8MainPageC1EPc>:

int num_options = 3;
char* menu_options[] = {(char*) "View Employees", (char*) "Calculate Payroll", (char*) "Help"};
char* menu_links[] = {(char*) "employees", (char*) "payroll", (char*) "help"};

MainPage::MainPage(char* page_name) : Page() {
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fe ff59 	bl	8002170 <_ZN4PageC1Ev>
 80032be:	4a08      	ldr	r2, [pc, #32]	; (80032e0 <_ZN8MainPageC1EPc+0x34>)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	601a      	str	r2, [r3, #0]
	strcpy(name, page_name);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3308      	adds	r3, #8
 80032c8:	6839      	ldr	r1, [r7, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f005 fbcc 	bl	8008a68 <strcpy>
	selection_num = 0;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	605a      	str	r2, [r3, #4]
}
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4618      	mov	r0, r3
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	080156ec 	.word	0x080156ec

080032e4 <_ZN8MainPage11make_activeEP8Employee>:

void MainPage::make_active(Employee* e) {
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
	active_page = this;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a05      	ldr	r2, [pc, #20]	; (8003308 <_ZN8MainPage11make_activeEP8Employee+0x24>)
 80032f2:	6013      	str	r3, [r2, #0]
	render();
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	330c      	adds	r3, #12
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	4798      	blx	r3
}
 8003300:	bf00      	nop
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	20000420 	.word	0x20000420

0800330c <_ZN8MainPage6renderEv>:

void MainPage::render() {
 800330c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800330e:	b087      	sub	sp, #28
 8003310:	af02      	add	r7, sp, #8
 8003312:	6078      	str	r0, [r7, #4]
	// INITIALIZATION
	lcd->background(BG);  		// Set background to BG color
 8003314:	4b89      	ldr	r3, [pc, #548]	; (800353c <_ZN8MainPage6renderEv+0x230>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	461a      	mov	r2, r3
 800331a:	4b88      	ldr	r3, [pc, #544]	; (800353c <_ZN8MainPage6renderEv+0x230>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	331c      	adds	r3, #28
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f643 210c 	movw	r1, #14860	; 0x3a0c
 8003328:	4610      	mov	r0, r2
 800332a:	4798      	blx	r3
	lcd->foreground(White);    	// Set text color to white
 800332c:	4b83      	ldr	r3, [pc, #524]	; (800353c <_ZN8MainPage6renderEv+0x230>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	461a      	mov	r2, r3
 8003332:	4b82      	ldr	r3, [pc, #520]	; (800353c <_ZN8MainPage6renderEv+0x230>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	3318      	adds	r3, #24
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003340:	4610      	mov	r0, r2
 8003342:	4798      	blx	r3
	lcd->cls();                	// Clear screen
 8003344:	4b7d      	ldr	r3, [pc, #500]	; (800353c <_ZN8MainPage6renderEv+0x230>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	461a      	mov	r2, r3
 800334a:	4b7c      	ldr	r3, [pc, #496]	; (800353c <_ZN8MainPage6renderEv+0x230>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	3310      	adds	r3, #16
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4610      	mov	r0, r2
 8003356:	4798      	blx	r3
	lcd->set_orientation(0);
 8003358:	4b78      	ldr	r3, [pc, #480]	; (800353c <_ZN8MainPage6renderEv+0x230>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2100      	movs	r1, #0
 800335e:	4618      	mov	r0, r3
 8003360:	f001 fa0c 	bl	800477c <_ZN15SPI_TFT_ILI934115set_orientationEj>

	// PAGE TITLE
	lcd->fillrect(0, 0, W, 40, ACCENT);
 8003364:	4b75      	ldr	r3, [pc, #468]	; (800353c <_ZN8MainPage6renderEv+0x230>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	461c      	mov	r4, r3
 800336a:	4b74      	ldr	r3, [pc, #464]	; (800353c <_ZN8MainPage6renderEv+0x230>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	461a      	mov	r2, r3
 8003370:	4b72      	ldr	r3, [pc, #456]	; (800353c <_ZN8MainPage6renderEv+0x230>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	332c      	adds	r3, #44	; 0x2c
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4610      	mov	r0, r2
 800337c:	4798      	blx	r3
 800337e:	4602      	mov	r2, r0
 8003380:	f243 3355 	movw	r3, #13141	; 0x3355
 8003384:	9301      	str	r3, [sp, #4]
 8003386:	2328      	movs	r3, #40	; 0x28
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	4613      	mov	r3, r2
 800338c:	2200      	movs	r2, #0
 800338e:	2100      	movs	r1, #0
 8003390:	4620      	mov	r0, r4
 8003392:	f001 ffb7 	bl	8005304 <_ZN15SPI_TFT_ILI93418fillrectEiiiii>
	lcd->background(ACCENT);
 8003396:	4b69      	ldr	r3, [pc, #420]	; (800353c <_ZN8MainPage6renderEv+0x230>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	461a      	mov	r2, r3
 800339c:	4b67      	ldr	r3, [pc, #412]	; (800353c <_ZN8MainPage6renderEv+0x230>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	331c      	adds	r3, #28
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f243 3155 	movw	r1, #13141	; 0x3355
 80033aa:	4610      	mov	r0, r2
 80033ac:	4798      	blx	r3
	lcd->print_text((char*) "Time Clock", 40, 10, ARIAL24);
 80033ae:	4b63      	ldr	r3, [pc, #396]	; (800353c <_ZN8MainPage6renderEv+0x230>)
 80033b0:	6818      	ldr	r0, [r3, #0]
 80033b2:	4b63      	ldr	r3, [pc, #396]	; (8003540 <_ZN8MainPage6renderEv+0x234>)
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	230a      	movs	r3, #10
 80033b8:	2228      	movs	r2, #40	; 0x28
 80033ba:	4962      	ldr	r1, [pc, #392]	; (8003544 <_ZN8MainPage6renderEv+0x238>)
 80033bc:	f7fd fe48 	bl	8001050 <_ZN7Display10print_textEPciiPh>

	// TABLE HEADERS
	lcd->fillrect(0, 40, W, 80, BG);
 80033c0:	4b5e      	ldr	r3, [pc, #376]	; (800353c <_ZN8MainPage6renderEv+0x230>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	461c      	mov	r4, r3
 80033c6:	4b5d      	ldr	r3, [pc, #372]	; (800353c <_ZN8MainPage6renderEv+0x230>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	461a      	mov	r2, r3
 80033cc:	4b5b      	ldr	r3, [pc, #364]	; (800353c <_ZN8MainPage6renderEv+0x230>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	332c      	adds	r3, #44	; 0x2c
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4610      	mov	r0, r2
 80033d8:	4798      	blx	r3
 80033da:	4602      	mov	r2, r0
 80033dc:	f643 230c 	movw	r3, #14860	; 0x3a0c
 80033e0:	9301      	str	r3, [sp, #4]
 80033e2:	2350      	movs	r3, #80	; 0x50
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	4613      	mov	r3, r2
 80033e8:	2228      	movs	r2, #40	; 0x28
 80033ea:	2100      	movs	r1, #0
 80033ec:	4620      	mov	r0, r4
 80033ee:	f001 ff89 	bl	8005304 <_ZN15SPI_TFT_ILI93418fillrectEiiiii>
	lcd->background(BG);
 80033f2:	4b52      	ldr	r3, [pc, #328]	; (800353c <_ZN8MainPage6renderEv+0x230>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	461a      	mov	r2, r3
 80033f8:	4b50      	ldr	r3, [pc, #320]	; (800353c <_ZN8MainPage6renderEv+0x230>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	331c      	adds	r3, #28
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f643 210c 	movw	r1, #14860	; 0x3a0c
 8003406:	4610      	mov	r0, r2
 8003408:	4798      	blx	r3
	lcd->print_text((char*) "Select a function:", 10, 50, ARIAL12);
 800340a:	4b4c      	ldr	r3, [pc, #304]	; (800353c <_ZN8MainPage6renderEv+0x230>)
 800340c:	6818      	ldr	r0, [r3, #0]
 800340e:	4b4e      	ldr	r3, [pc, #312]	; (8003548 <_ZN8MainPage6renderEv+0x23c>)
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	2332      	movs	r3, #50	; 0x32
 8003414:	220a      	movs	r2, #10
 8003416:	494d      	ldr	r1, [pc, #308]	; (800354c <_ZN8MainPage6renderEv+0x240>)
 8003418:	f7fd fe1a 	bl	8001050 <_ZN7Display10print_textEPciiPh>
	lcd->line(0, 70, W, 70, White);
 800341c:	4b47      	ldr	r3, [pc, #284]	; (800353c <_ZN8MainPage6renderEv+0x230>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	461c      	mov	r4, r3
 8003422:	4b46      	ldr	r3, [pc, #280]	; (800353c <_ZN8MainPage6renderEv+0x230>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	461a      	mov	r2, r3
 8003428:	4b44      	ldr	r3, [pc, #272]	; (800353c <_ZN8MainPage6renderEv+0x230>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	332c      	adds	r3, #44	; 0x2c
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4610      	mov	r0, r2
 8003434:	4798      	blx	r3
 8003436:	4602      	mov	r2, r0
 8003438:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800343c:	9301      	str	r3, [sp, #4]
 800343e:	2346      	movs	r3, #70	; 0x46
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	4613      	mov	r3, r2
 8003444:	2246      	movs	r2, #70	; 0x46
 8003446:	2100      	movs	r1, #0
 8003448:	4620      	mov	r0, r4
 800344a:	f001 fe20 	bl	800508e <_ZN15SPI_TFT_ILI93414lineEiiiii>

	// TABLE ROWS
	for (int i = 0; i < num_options; i++) {
 800344e:	2300      	movs	r3, #0
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	4b3f      	ldr	r3, [pc, #252]	; (8003550 <_ZN8MainPage6renderEv+0x244>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	429a      	cmp	r2, r3
 800345a:	da7d      	bge.n	8003558 <_ZN8MainPage6renderEv+0x24c>
		lcd->fillrect(0, 80 + 30 * i, W, 80 + 30 * (i + 1), BG);
 800345c:	4b37      	ldr	r3, [pc, #220]	; (800353c <_ZN8MainPage6renderEv+0x230>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	461d      	mov	r5, r3
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	4613      	mov	r3, r2
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8003470:	4b32      	ldr	r3, [pc, #200]	; (800353c <_ZN8MainPage6renderEv+0x230>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	461a      	mov	r2, r3
 8003476:	4b31      	ldr	r3, [pc, #196]	; (800353c <_ZN8MainPage6renderEv+0x230>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	332c      	adds	r3, #44	; 0x2c
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4610      	mov	r0, r2
 8003482:	4798      	blx	r3
 8003484:	4601      	mov	r1, r0
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	4613      	mov	r3, r2
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	1a9b      	subs	r3, r3, r2
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	3350      	adds	r3, #80	; 0x50
 8003494:	f643 220c 	movw	r2, #14860	; 0x3a0c
 8003498:	9201      	str	r2, [sp, #4]
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	460b      	mov	r3, r1
 800349e:	4622      	mov	r2, r4
 80034a0:	2100      	movs	r1, #0
 80034a2:	4628      	mov	r0, r5
 80034a4:	f001 ff2e 	bl	8005304 <_ZN15SPI_TFT_ILI93418fillrectEiiiii>
		lcd->foreground(LightGrey);
 80034a8:	4b24      	ldr	r3, [pc, #144]	; (800353c <_ZN8MainPage6renderEv+0x230>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	461a      	mov	r2, r3
 80034ae:	4b23      	ldr	r3, [pc, #140]	; (800353c <_ZN8MainPage6renderEv+0x230>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	3318      	adds	r3, #24
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f24c 6118 	movw	r1, #50712	; 0xc618
 80034bc:	4610      	mov	r0, r2
 80034be:	4798      	blx	r3

		lcd->print_text(menu_options[i], 10, 80 + 30 * i, ARIAL12);
 80034c0:	4b1e      	ldr	r3, [pc, #120]	; (800353c <_ZN8MainPage6renderEv+0x230>)
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	4a23      	ldr	r2, [pc, #140]	; (8003554 <_ZN8MainPage6renderEv+0x248>)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	4613      	mov	r3, r2
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	1a9b      	subs	r3, r3, r2
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80034da:	4b1b      	ldr	r3, [pc, #108]	; (8003548 <_ZN8MainPage6renderEv+0x23c>)
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	4613      	mov	r3, r2
 80034e0:	220a      	movs	r2, #10
 80034e2:	f7fd fdb5 	bl	8001050 <_ZN7Display10print_textEPciiPh>
		lcd->line(0, 70 + 30 * (i + 1), W, 70 + 30 * (i + 1), Black);
 80034e6:	4b15      	ldr	r3, [pc, #84]	; (800353c <_ZN8MainPage6renderEv+0x230>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	461d      	mov	r5, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	1c5a      	adds	r2, r3, #1
 80034f0:	4613      	mov	r3, r2
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	1a9b      	subs	r3, r3, r2
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	f103 0446 	add.w	r4, r3, #70	; 0x46
 80034fc:	4b0f      	ldr	r3, [pc, #60]	; (800353c <_ZN8MainPage6renderEv+0x230>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	461a      	mov	r2, r3
 8003502:	4b0e      	ldr	r3, [pc, #56]	; (800353c <_ZN8MainPage6renderEv+0x230>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	332c      	adds	r3, #44	; 0x2c
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4610      	mov	r0, r2
 800350e:	4798      	blx	r3
 8003510:	4601      	mov	r1, r0
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1c5a      	adds	r2, r3, #1
 8003516:	4613      	mov	r3, r2
 8003518:	011b      	lsls	r3, r3, #4
 800351a:	1a9b      	subs	r3, r3, r2
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	3346      	adds	r3, #70	; 0x46
 8003520:	2200      	movs	r2, #0
 8003522:	9201      	str	r2, [sp, #4]
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	460b      	mov	r3, r1
 8003528:	4622      	mov	r2, r4
 800352a:	2100      	movs	r1, #0
 800352c:	4628      	mov	r0, r5
 800352e:	f001 fdae 	bl	800508e <_ZN15SPI_TFT_ILI93414lineEiiiii>
	for (int i = 0; i < num_options; i++) {
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	3301      	adds	r3, #1
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	e78b      	b.n	8003452 <_ZN8MainPage6renderEv+0x146>
 800353a:	bf00      	nop
 800353c:	20000424 	.word	0x20000424
 8003540:	08013b80 	.word	0x08013b80
 8003544:	0800c160 	.word	0x0800c160
 8003548:	0801321c 	.word	0x0801321c
 800354c:	0800c16c 	.word	0x0800c16c
 8003550:	2000006c 	.word	0x2000006c
 8003554:	20000070 	.word	0x20000070
	}

	// CREDITS
	lcd->fillrect(0, H - 20, W, H, ACCENT);
 8003558:	4b32      	ldr	r3, [pc, #200]	; (8003624 <_ZN8MainPage6renderEv+0x318>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	461d      	mov	r5, r3
 800355e:	4b31      	ldr	r3, [pc, #196]	; (8003624 <_ZN8MainPage6renderEv+0x318>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	461a      	mov	r2, r3
 8003564:	4b2f      	ldr	r3, [pc, #188]	; (8003624 <_ZN8MainPage6renderEv+0x318>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	3330      	adds	r3, #48	; 0x30
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4610      	mov	r0, r2
 8003570:	4798      	blx	r3
 8003572:	4603      	mov	r3, r0
 8003574:	f1a3 0414 	sub.w	r4, r3, #20
 8003578:	4b2a      	ldr	r3, [pc, #168]	; (8003624 <_ZN8MainPage6renderEv+0x318>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	461a      	mov	r2, r3
 800357e:	4b29      	ldr	r3, [pc, #164]	; (8003624 <_ZN8MainPage6renderEv+0x318>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	332c      	adds	r3, #44	; 0x2c
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4610      	mov	r0, r2
 800358a:	4798      	blx	r3
 800358c:	4606      	mov	r6, r0
 800358e:	4b25      	ldr	r3, [pc, #148]	; (8003624 <_ZN8MainPage6renderEv+0x318>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	461a      	mov	r2, r3
 8003594:	4b23      	ldr	r3, [pc, #140]	; (8003624 <_ZN8MainPage6renderEv+0x318>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	3330      	adds	r3, #48	; 0x30
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4610      	mov	r0, r2
 80035a0:	4798      	blx	r3
 80035a2:	4602      	mov	r2, r0
 80035a4:	f243 3355 	movw	r3, #13141	; 0x3355
 80035a8:	9301      	str	r3, [sp, #4]
 80035aa:	9200      	str	r2, [sp, #0]
 80035ac:	4633      	mov	r3, r6
 80035ae:	4622      	mov	r2, r4
 80035b0:	2100      	movs	r1, #0
 80035b2:	4628      	mov	r0, r5
 80035b4:	f001 fea6 	bl	8005304 <_ZN15SPI_TFT_ILI93418fillrectEiiiii>
	lcd->background(ACCENT);
 80035b8:	4b1a      	ldr	r3, [pc, #104]	; (8003624 <_ZN8MainPage6renderEv+0x318>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	461a      	mov	r2, r3
 80035be:	4b19      	ldr	r3, [pc, #100]	; (8003624 <_ZN8MainPage6renderEv+0x318>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	331c      	adds	r3, #28
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f243 3155 	movw	r1, #13141	; 0x3355
 80035cc:	4610      	mov	r0, r2
 80035ce:	4798      	blx	r3
	lcd->foreground(White);
 80035d0:	4b14      	ldr	r3, [pc, #80]	; (8003624 <_ZN8MainPage6renderEv+0x318>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	461a      	mov	r2, r3
 80035d6:	4b13      	ldr	r3, [pc, #76]	; (8003624 <_ZN8MainPage6renderEv+0x318>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	3318      	adds	r3, #24
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80035e4:	4610      	mov	r0, r2
 80035e6:	4798      	blx	r3
	lcd->print_text((char*) "Created by Tyler Ekaireb", 25, H - 15, ARIAL12);
 80035e8:	4b0e      	ldr	r3, [pc, #56]	; (8003624 <_ZN8MainPage6renderEv+0x318>)
 80035ea:	681c      	ldr	r4, [r3, #0]
 80035ec:	4b0d      	ldr	r3, [pc, #52]	; (8003624 <_ZN8MainPage6renderEv+0x318>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	461a      	mov	r2, r3
 80035f2:	4b0c      	ldr	r3, [pc, #48]	; (8003624 <_ZN8MainPage6renderEv+0x318>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	3330      	adds	r3, #48	; 0x30
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4610      	mov	r0, r2
 80035fe:	4798      	blx	r3
 8003600:	4603      	mov	r3, r0
 8003602:	f1a3 020f 	sub.w	r2, r3, #15
 8003606:	4b08      	ldr	r3, [pc, #32]	; (8003628 <_ZN8MainPage6renderEv+0x31c>)
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	4613      	mov	r3, r2
 800360c:	2219      	movs	r2, #25
 800360e:	4907      	ldr	r1, [pc, #28]	; (800362c <_ZN8MainPage6renderEv+0x320>)
 8003610:	4620      	mov	r0, r4
 8003612:	f7fd fd1d 	bl	8001050 <_ZN7Display10print_textEPciiPh>


	render_highlighted_selection();
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f8ce 	bl	80037b8 <_ZN8MainPage28render_highlighted_selectionEv>
}
 800361c:	bf00      	nop
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003624:	20000424 	.word	0x20000424
 8003628:	0801321c 	.word	0x0801321c
 800362c:	0800c180 	.word	0x0800c180

08003630 <_ZN8MainPage27clear_highlighted_selectionEv>:

void MainPage::clear_highlighted_selection() {
 8003630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003632:	b085      	sub	sp, #20
 8003634:	af02      	add	r7, sp, #8
 8003636:	6078      	str	r0, [r7, #4]
	// Replace black lines above and below entry and remove highlight on sides
	lcd->line(0, 70 + 30 * selection_num, W, 70 + 30 * selection_num, Black);
 8003638:	4b5e      	ldr	r3, [pc, #376]	; (80037b4 <_ZN8MainPage27clear_highlighted_selectionEv+0x184>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	461d      	mov	r5, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	4613      	mov	r3, r2
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	1a9b      	subs	r3, r3, r2
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	f103 0446 	add.w	r4, r3, #70	; 0x46
 800364e:	4b59      	ldr	r3, [pc, #356]	; (80037b4 <_ZN8MainPage27clear_highlighted_selectionEv+0x184>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	461a      	mov	r2, r3
 8003654:	4b57      	ldr	r3, [pc, #348]	; (80037b4 <_ZN8MainPage27clear_highlighted_selectionEv+0x184>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	332c      	adds	r3, #44	; 0x2c
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4610      	mov	r0, r2
 8003660:	4798      	blx	r3
 8003662:	4601      	mov	r1, r0
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	4613      	mov	r3, r2
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	1a9b      	subs	r3, r3, r2
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	3346      	adds	r3, #70	; 0x46
 8003672:	2200      	movs	r2, #0
 8003674:	9201      	str	r2, [sp, #4]
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	460b      	mov	r3, r1
 800367a:	4622      	mov	r2, r4
 800367c:	2100      	movs	r1, #0
 800367e:	4628      	mov	r0, r5
 8003680:	f001 fd05 	bl	800508e <_ZN15SPI_TFT_ILI93414lineEiiiii>
	lcd->line(0, 70 + 30 * (selection_num + 1), W, 70 + 30 * (selection_num + 1), Black);
 8003684:	4b4b      	ldr	r3, [pc, #300]	; (80037b4 <_ZN8MainPage27clear_highlighted_selectionEv+0x184>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	461d      	mov	r5, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	4613      	mov	r3, r2
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	1a9b      	subs	r3, r3, r2
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	f103 0446 	add.w	r4, r3, #70	; 0x46
 800369c:	4b45      	ldr	r3, [pc, #276]	; (80037b4 <_ZN8MainPage27clear_highlighted_selectionEv+0x184>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	461a      	mov	r2, r3
 80036a2:	4b44      	ldr	r3, [pc, #272]	; (80037b4 <_ZN8MainPage27clear_highlighted_selectionEv+0x184>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	332c      	adds	r3, #44	; 0x2c
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4610      	mov	r0, r2
 80036ae:	4798      	blx	r3
 80036b0:	4601      	mov	r1, r0
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	4613      	mov	r3, r2
 80036ba:	011b      	lsls	r3, r3, #4
 80036bc:	1a9b      	subs	r3, r3, r2
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	3346      	adds	r3, #70	; 0x46
 80036c2:	2200      	movs	r2, #0
 80036c4:	9201      	str	r2, [sp, #4]
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	460b      	mov	r3, r1
 80036ca:	4622      	mov	r2, r4
 80036cc:	2100      	movs	r1, #0
 80036ce:	4628      	mov	r0, r5
 80036d0:	f001 fcdd 	bl	800508e <_ZN15SPI_TFT_ILI93414lineEiiiii>

	lcd->line(0, 70 + 30 * selection_num, 0, 70 + 30 * (selection_num + 1), BG);
 80036d4:	4b37      	ldr	r3, [pc, #220]	; (80037b4 <_ZN8MainPage27clear_highlighted_selectionEv+0x184>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	4613      	mov	r3, r2
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	f103 0146 	add.w	r1, r3, #70	; 0x46
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	1c5a      	adds	r2, r3, #1
 80036f0:	4613      	mov	r3, r2
 80036f2:	011b      	lsls	r3, r3, #4
 80036f4:	1a9b      	subs	r3, r3, r2
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	3346      	adds	r3, #70	; 0x46
 80036fa:	f643 220c 	movw	r2, #14860	; 0x3a0c
 80036fe:	9201      	str	r2, [sp, #4]
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	2300      	movs	r3, #0
 8003704:	460a      	mov	r2, r1
 8003706:	2100      	movs	r1, #0
 8003708:	f001 fcc1 	bl	800508e <_ZN15SPI_TFT_ILI93414lineEiiiii>
	lcd->line(W, 70 + 30 * selection_num, W, 70 + 30 * (selection_num + 1), BG);
 800370c:	4b29      	ldr	r3, [pc, #164]	; (80037b4 <_ZN8MainPage27clear_highlighted_selectionEv+0x184>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	461d      	mov	r5, r3
 8003712:	4b28      	ldr	r3, [pc, #160]	; (80037b4 <_ZN8MainPage27clear_highlighted_selectionEv+0x184>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	461a      	mov	r2, r3
 8003718:	4b26      	ldr	r3, [pc, #152]	; (80037b4 <_ZN8MainPage27clear_highlighted_selectionEv+0x184>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	332c      	adds	r3, #44	; 0x2c
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4610      	mov	r0, r2
 8003724:	4798      	blx	r3
 8003726:	4606      	mov	r6, r0
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	4613      	mov	r3, r2
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	1a9b      	subs	r3, r3, r2
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	f103 0446 	add.w	r4, r3, #70	; 0x46
 8003738:	4b1e      	ldr	r3, [pc, #120]	; (80037b4 <_ZN8MainPage27clear_highlighted_selectionEv+0x184>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	461a      	mov	r2, r3
 800373e:	4b1d      	ldr	r3, [pc, #116]	; (80037b4 <_ZN8MainPage27clear_highlighted_selectionEv+0x184>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	332c      	adds	r3, #44	; 0x2c
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4610      	mov	r0, r2
 800374a:	4798      	blx	r3
 800374c:	4601      	mov	r1, r0
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	4613      	mov	r3, r2
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	1a9b      	subs	r3, r3, r2
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	3346      	adds	r3, #70	; 0x46
 800375e:	f643 220c 	movw	r2, #14860	; 0x3a0c
 8003762:	9201      	str	r2, [sp, #4]
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	460b      	mov	r3, r1
 8003768:	4622      	mov	r2, r4
 800376a:	4631      	mov	r1, r6
 800376c:	4628      	mov	r0, r5
 800376e:	f001 fc8e 	bl	800508e <_ZN15SPI_TFT_ILI93414lineEiiiii>

	// First entry is preceded by white bar
	if (selection_num == 0)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d118      	bne.n	80037ac <_ZN8MainPage27clear_highlighted_selectionEv+0x17c>
		lcd->line(0, 70, W, 70, White);
 800377a:	4b0e      	ldr	r3, [pc, #56]	; (80037b4 <_ZN8MainPage27clear_highlighted_selectionEv+0x184>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	461c      	mov	r4, r3
 8003780:	4b0c      	ldr	r3, [pc, #48]	; (80037b4 <_ZN8MainPage27clear_highlighted_selectionEv+0x184>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	461a      	mov	r2, r3
 8003786:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <_ZN8MainPage27clear_highlighted_selectionEv+0x184>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	332c      	adds	r3, #44	; 0x2c
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4610      	mov	r0, r2
 8003792:	4798      	blx	r3
 8003794:	4602      	mov	r2, r0
 8003796:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800379a:	9301      	str	r3, [sp, #4]
 800379c:	2346      	movs	r3, #70	; 0x46
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	4613      	mov	r3, r2
 80037a2:	2246      	movs	r2, #70	; 0x46
 80037a4:	2100      	movs	r1, #0
 80037a6:	4620      	mov	r0, r4
 80037a8:	f001 fc71 	bl	800508e <_ZN15SPI_TFT_ILI93414lineEiiiii>
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037b4:	20000424 	.word	0x20000424

080037b8 <_ZN8MainPage28render_highlighted_selectionEv>:


void MainPage::render_highlighted_selection() {
 80037b8:	b5b0      	push	{r4, r5, r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af02      	add	r7, sp, #8
 80037be:	6078      	str	r0, [r7, #4]
	// Draw rectangle around selection
	lcd->rect(0, 70 + 30 * selection_num, W, 70 + 30 * (selection_num + 1), Cyan);
 80037c0:	4b15      	ldr	r3, [pc, #84]	; (8003818 <_ZN8MainPage28render_highlighted_selectionEv+0x60>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	461d      	mov	r5, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	4613      	mov	r3, r2
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	1a9b      	subs	r3, r3, r2
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	f103 0446 	add.w	r4, r3, #70	; 0x46
 80037d6:	4b10      	ldr	r3, [pc, #64]	; (8003818 <_ZN8MainPage28render_highlighted_selectionEv+0x60>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	461a      	mov	r2, r3
 80037dc:	4b0e      	ldr	r3, [pc, #56]	; (8003818 <_ZN8MainPage28render_highlighted_selectionEv+0x60>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	332c      	adds	r3, #44	; 0x2c
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4610      	mov	r0, r2
 80037e8:	4798      	blx	r3
 80037ea:	4601      	mov	r1, r0
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	4613      	mov	r3, r2
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	1a9b      	subs	r3, r3, r2
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	3346      	adds	r3, #70	; 0x46
 80037fc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003800:	9201      	str	r2, [sp, #4]
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	460b      	mov	r3, r1
 8003806:	4622      	mov	r2, r4
 8003808:	2100      	movs	r1, #0
 800380a:	4628      	mov	r0, r5
 800380c:	f001 fd1b 	bl	8005246 <_ZN15SPI_TFT_ILI93414rectEiiiii>
}
 8003810:	bf00      	nop
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bdb0      	pop	{r4, r5, r7, pc}
 8003818:	20000424 	.word	0x20000424

0800381c <_ZN8MainPage17up_button_handlerEv>:

void MainPage::up_button_handler() { decrement_selection(); }
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	3328      	adds	r3, #40	; 0x28
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	4798      	blx	r3
 8003830:	bf00      	nop
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <_ZN8MainPage19down_button_handlerEv>:

void MainPage::down_button_handler() { increment_selection(); }
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3324      	adds	r3, #36	; 0x24
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	4798      	blx	r3
 800384c:	bf00      	nop
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <_ZN8MainPage19left_button_handlerEv>:

void MainPage::left_button_handler() { return; }
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <_ZN8MainPage20right_button_handlerEv>:

void MainPage::right_button_handler() { return; }
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <_ZN8MainPage21center_button_handlerEv>:

void MainPage::center_button_handler() { make_selection(); }
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	332c      	adds	r3, #44	; 0x2c
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	4798      	blx	r3
 8003890:	bf00      	nop
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <_ZN8MainPage19increment_selectionEv>:

void MainPage::increment_selection() {
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
	if (selection_num < num_employees - 1) {
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	4b09      	ldr	r3, [pc, #36]	; (80038cc <_ZN8MainPage19increment_selectionEv+0x34>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	3b01      	subs	r3, #1
 80038aa:	429a      	cmp	r2, r3
 80038ac:	da0a      	bge.n	80038c4 <_ZN8MainPage19increment_selectionEv+0x2c>
		clear_highlighted_selection();
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7ff febe 	bl	8003630 <_ZN8MainPage27clear_highlighted_selectionEv>
		selection_num++;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	605a      	str	r2, [r3, #4]
		render_highlighted_selection();
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7ff ff7a 	bl	80037b8 <_ZN8MainPage28render_highlighted_selectionEv>
	}
}
 80038c4:	bf00      	nop
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	200002e0 	.word	0x200002e0

080038d0 <_ZN8MainPage19decrement_selectionEv>:

void MainPage::decrement_selection() {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
	if (selection_num > 0) {
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	dd0a      	ble.n	80038f6 <_ZN8MainPage19decrement_selectionEv+0x26>
		clear_highlighted_selection();
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7ff fea5 	bl	8003630 <_ZN8MainPage27clear_highlighted_selectionEv>
		selection_num--;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	1e5a      	subs	r2, r3, #1
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	605a      	str	r2, [r3, #4]
		render_highlighted_selection();
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff ff61 	bl	80037b8 <_ZN8MainPage28render_highlighted_selectionEv>
	}
}
 80038f6:	bf00      	nop
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <_ZN8MainPage14make_selectionEv>:

void MainPage::make_selection() {
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
	get_page(menu_links[selection_num])->make_active();
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	4a08      	ldr	r2, [pc, #32]	; (8003930 <_ZN8MainPage14make_selectionEv+0x30>)
 800390e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003912:	4618      	mov	r0, r3
 8003914:	f7fe f87e 	bl	8001a14 <_Z8get_pagePc>
 8003918:	4602      	mov	r2, r0
 800391a:	6813      	ldr	r3, [r2, #0]
 800391c:	3308      	adds	r3, #8
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2100      	movs	r1, #0
 8003922:	4610      	mov	r0, r2
 8003924:	4798      	blx	r3
}
 8003926:	bf00      	nop
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	2000007c 	.word	0x2000007c

08003934 <_ZN8MainPageD1Ev>:
#define INC_PAGES_MAINPAGE_HPP_


#include <pages/Page.hpp>

class MainPage : public Page {
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	4a05      	ldr	r2, [pc, #20]	; (8003954 <_ZN8MainPageD1Ev+0x20>)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4618      	mov	r0, r3
 8003946:	f7fe fc23 	bl	8002190 <_ZN4PageD1Ev>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4618      	mov	r0, r3
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	080156ec 	.word	0x080156ec

08003958 <_ZN8MainPageD0Ev>:
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff ffe7 	bl	8003934 <_ZN8MainPageD1Ev>
 8003966:	213c      	movs	r1, #60	; 0x3c
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f003 fa8a 	bl	8006e82 <_ZdlPvj>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4618      	mov	r0, r3
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <_ZN11PayrollPageC1EPc>:

#include <pages/PayrollPage.hpp>
#include "lcd.hpp"


PayrollPage::PayrollPage(char* page_name) : Page() {
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4618      	mov	r0, r3
 8003986:	f7fe fbf3 	bl	8002170 <_ZN4PageC1Ev>
 800398a:	4a08      	ldr	r2, [pc, #32]	; (80039ac <_ZN11PayrollPageC1EPc+0x34>)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	601a      	str	r2, [r3, #0]
	strcpy(name, page_name);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3308      	adds	r3, #8
 8003994:	6839      	ldr	r1, [r7, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f005 f866 	bl	8008a68 <strcpy>
	selection_num = 0;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	605a      	str	r2, [r3, #4]
}
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4618      	mov	r0, r3
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	08017bec 	.word	0x08017bec

080039b0 <_ZN11PayrollPage11make_activeEP8Employee>:

void PayrollPage::make_active(Employee* e) {
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
	active_page = this;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a05      	ldr	r2, [pc, #20]	; (80039d4 <_ZN11PayrollPage11make_activeEP8Employee+0x24>)
 80039be:	6013      	str	r3, [r2, #0]
	render();
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	330c      	adds	r3, #12
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	4798      	blx	r3
}
 80039cc:	bf00      	nop
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	20000420 	.word	0x20000420

080039d8 <_ZN11PayrollPage6renderEv>:

void PayrollPage::render() {
 80039d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039da:	b091      	sub	sp, #68	; 0x44
 80039dc:	af02      	add	r7, sp, #8
 80039de:	6078      	str	r0, [r7, #4]
	// INITIALIZATION
	lcd->background(BG);  		// Set background to BG color
 80039e0:	4baf      	ldr	r3, [pc, #700]	; (8003ca0 <_ZN11PayrollPage6renderEv+0x2c8>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	461a      	mov	r2, r3
 80039e6:	4bae      	ldr	r3, [pc, #696]	; (8003ca0 <_ZN11PayrollPage6renderEv+0x2c8>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	331c      	adds	r3, #28
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f643 210c 	movw	r1, #14860	; 0x3a0c
 80039f4:	4610      	mov	r0, r2
 80039f6:	4798      	blx	r3
	lcd->foreground(White);    	// Set text color to white
 80039f8:	4ba9      	ldr	r3, [pc, #676]	; (8003ca0 <_ZN11PayrollPage6renderEv+0x2c8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	461a      	mov	r2, r3
 80039fe:	4ba8      	ldr	r3, [pc, #672]	; (8003ca0 <_ZN11PayrollPage6renderEv+0x2c8>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	3318      	adds	r3, #24
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003a0c:	4610      	mov	r0, r2
 8003a0e:	4798      	blx	r3
	lcd->cls();                	// Clear screen
 8003a10:	4ba3      	ldr	r3, [pc, #652]	; (8003ca0 <_ZN11PayrollPage6renderEv+0x2c8>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	461a      	mov	r2, r3
 8003a16:	4ba2      	ldr	r3, [pc, #648]	; (8003ca0 <_ZN11PayrollPage6renderEv+0x2c8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3310      	adds	r3, #16
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4610      	mov	r0, r2
 8003a22:	4798      	blx	r3
	lcd->set_orientation(0);
 8003a24:	4b9e      	ldr	r3, [pc, #632]	; (8003ca0 <_ZN11PayrollPage6renderEv+0x2c8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2100      	movs	r1, #0
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 fea6 	bl	800477c <_ZN15SPI_TFT_ILI934115set_orientationEj>

	// PAGE TITLE
	lcd->fillrect(0, 0, W, 40, ACCENT);
 8003a30:	4b9b      	ldr	r3, [pc, #620]	; (8003ca0 <_ZN11PayrollPage6renderEv+0x2c8>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	461c      	mov	r4, r3
 8003a36:	4b9a      	ldr	r3, [pc, #616]	; (8003ca0 <_ZN11PayrollPage6renderEv+0x2c8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	4b98      	ldr	r3, [pc, #608]	; (8003ca0 <_ZN11PayrollPage6renderEv+0x2c8>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	332c      	adds	r3, #44	; 0x2c
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4610      	mov	r0, r2
 8003a48:	4798      	blx	r3
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	f243 3355 	movw	r3, #13141	; 0x3355
 8003a50:	9301      	str	r3, [sp, #4]
 8003a52:	2328      	movs	r3, #40	; 0x28
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	4613      	mov	r3, r2
 8003a58:	2200      	movs	r2, #0
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	4620      	mov	r0, r4
 8003a5e:	f001 fc51 	bl	8005304 <_ZN15SPI_TFT_ILI93418fillrectEiiiii>
	lcd->background(ACCENT);
 8003a62:	4b8f      	ldr	r3, [pc, #572]	; (8003ca0 <_ZN11PayrollPage6renderEv+0x2c8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	461a      	mov	r2, r3
 8003a68:	4b8d      	ldr	r3, [pc, #564]	; (8003ca0 <_ZN11PayrollPage6renderEv+0x2c8>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	331c      	adds	r3, #28
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f243 3155 	movw	r1, #13141	; 0x3355
 8003a76:	4610      	mov	r0, r2
 8003a78:	4798      	blx	r3
	lcd->print_text((char*) "<", 5, 10, ARIAL24);
 8003a7a:	4b89      	ldr	r3, [pc, #548]	; (8003ca0 <_ZN11PayrollPage6renderEv+0x2c8>)
 8003a7c:	6818      	ldr	r0, [r3, #0]
 8003a7e:	4b89      	ldr	r3, [pc, #548]	; (8003ca4 <_ZN11PayrollPage6renderEv+0x2cc>)
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	230a      	movs	r3, #10
 8003a84:	2205      	movs	r2, #5
 8003a86:	4988      	ldr	r1, [pc, #544]	; (8003ca8 <_ZN11PayrollPage6renderEv+0x2d0>)
 8003a88:	f7fd fae2 	bl	8001050 <_ZN7Display10print_textEPciiPh>
	lcd->print_text((char*) "Payroll", 25, 10, ARIAL24);
 8003a8c:	4b84      	ldr	r3, [pc, #528]	; (8003ca0 <_ZN11PayrollPage6renderEv+0x2c8>)
 8003a8e:	6818      	ldr	r0, [r3, #0]
 8003a90:	4b84      	ldr	r3, [pc, #528]	; (8003ca4 <_ZN11PayrollPage6renderEv+0x2cc>)
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	230a      	movs	r3, #10
 8003a96:	2219      	movs	r2, #25
 8003a98:	4984      	ldr	r1, [pc, #528]	; (8003cac <_ZN11PayrollPage6renderEv+0x2d4>)
 8003a9a:	f7fd fad9 	bl	8001050 <_ZN7Display10print_textEPciiPh>

	// TABLE HEADERS
	lcd->fillrect(0, 40, W, 80, BG);
 8003a9e:	4b80      	ldr	r3, [pc, #512]	; (8003ca0 <_ZN11PayrollPage6renderEv+0x2c8>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	461c      	mov	r4, r3
 8003aa4:	4b7e      	ldr	r3, [pc, #504]	; (8003ca0 <_ZN11PayrollPage6renderEv+0x2c8>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4b7d      	ldr	r3, [pc, #500]	; (8003ca0 <_ZN11PayrollPage6renderEv+0x2c8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	332c      	adds	r3, #44	; 0x2c
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	4798      	blx	r3
 8003ab8:	4602      	mov	r2, r0
 8003aba:	f643 230c 	movw	r3, #14860	; 0x3a0c
 8003abe:	9301      	str	r3, [sp, #4]
 8003ac0:	2350      	movs	r3, #80	; 0x50
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	2228      	movs	r2, #40	; 0x28
 8003ac8:	2100      	movs	r1, #0
 8003aca:	4620      	mov	r0, r4
 8003acc:	f001 fc1a 	bl	8005304 <_ZN15SPI_TFT_ILI93418fillrectEiiiii>
	lcd->background(BG);
 8003ad0:	4b73      	ldr	r3, [pc, #460]	; (8003ca0 <_ZN11PayrollPage6renderEv+0x2c8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	4b72      	ldr	r3, [pc, #456]	; (8003ca0 <_ZN11PayrollPage6renderEv+0x2c8>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	331c      	adds	r3, #28
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f643 210c 	movw	r1, #14860	; 0x3a0c
 8003ae4:	4610      	mov	r0, r2
 8003ae6:	4798      	blx	r3
	lcd->print_text((char*) "[name]", 10, 50, ARIAL12);
 8003ae8:	4b6d      	ldr	r3, [pc, #436]	; (8003ca0 <_ZN11PayrollPage6renderEv+0x2c8>)
 8003aea:	6818      	ldr	r0, [r3, #0]
 8003aec:	4b70      	ldr	r3, [pc, #448]	; (8003cb0 <_ZN11PayrollPage6renderEv+0x2d8>)
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	2332      	movs	r3, #50	; 0x32
 8003af2:	220a      	movs	r2, #10
 8003af4:	496f      	ldr	r1, [pc, #444]	; (8003cb4 <_ZN11PayrollPage6renderEv+0x2dc>)
 8003af6:	f7fd faab 	bl	8001050 <_ZN7Display10print_textEPciiPh>
	lcd->print_text((char*) "[hours]", 100, 50, ARIAL12);
 8003afa:	4b69      	ldr	r3, [pc, #420]	; (8003ca0 <_ZN11PayrollPage6renderEv+0x2c8>)
 8003afc:	6818      	ldr	r0, [r3, #0]
 8003afe:	4b6c      	ldr	r3, [pc, #432]	; (8003cb0 <_ZN11PayrollPage6renderEv+0x2d8>)
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	2332      	movs	r3, #50	; 0x32
 8003b04:	2264      	movs	r2, #100	; 0x64
 8003b06:	496c      	ldr	r1, [pc, #432]	; (8003cb8 <_ZN11PayrollPage6renderEv+0x2e0>)
 8003b08:	f7fd faa2 	bl	8001050 <_ZN7Display10print_textEPciiPh>
	lcd->print_text((char*) "[pay]", 180, 50, ARIAL12);
 8003b0c:	4b64      	ldr	r3, [pc, #400]	; (8003ca0 <_ZN11PayrollPage6renderEv+0x2c8>)
 8003b0e:	6818      	ldr	r0, [r3, #0]
 8003b10:	4b67      	ldr	r3, [pc, #412]	; (8003cb0 <_ZN11PayrollPage6renderEv+0x2d8>)
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	2332      	movs	r3, #50	; 0x32
 8003b16:	22b4      	movs	r2, #180	; 0xb4
 8003b18:	4968      	ldr	r1, [pc, #416]	; (8003cbc <_ZN11PayrollPage6renderEv+0x2e4>)
 8003b1a:	f7fd fa99 	bl	8001050 <_ZN7Display10print_textEPciiPh>
	lcd->line(0, 70, W, 70, White);
 8003b1e:	4b60      	ldr	r3, [pc, #384]	; (8003ca0 <_ZN11PayrollPage6renderEv+0x2c8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	461c      	mov	r4, r3
 8003b24:	4b5e      	ldr	r3, [pc, #376]	; (8003ca0 <_ZN11PayrollPage6renderEv+0x2c8>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	4b5d      	ldr	r3, [pc, #372]	; (8003ca0 <_ZN11PayrollPage6renderEv+0x2c8>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	332c      	adds	r3, #44	; 0x2c
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4610      	mov	r0, r2
 8003b36:	4798      	blx	r3
 8003b38:	4602      	mov	r2, r0
 8003b3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b3e:	9301      	str	r3, [sp, #4]
 8003b40:	2346      	movs	r3, #70	; 0x46
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	4613      	mov	r3, r2
 8003b46:	2246      	movs	r2, #70	; 0x46
 8003b48:	2100      	movs	r1, #0
 8003b4a:	4620      	mov	r0, r4
 8003b4c:	f001 fa9f 	bl	800508e <_ZN15SPI_TFT_ILI93414lineEiiiii>

	// TABLE ROWS
	Employee* e;
	char hours[6], pay[8];
	double pay_val = 0.0, sum = 0.0;
 8003b50:	f04f 0300 	mov.w	r3, #0
 8003b54:	f04f 0400 	mov.w	r4, #0
 8003b58:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8003b5c:	f04f 0300 	mov.w	r3, #0
 8003b60:	f04f 0400 	mov.w	r4, #0
 8003b64:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

	for (int i = 0; i < num_employees; i++) {
 8003b68:	2300      	movs	r3, #0
 8003b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b6c:	4b54      	ldr	r3, [pc, #336]	; (8003cc0 <_ZN11PayrollPage6renderEv+0x2e8>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b72:	429a      	cmp	r2, r3
 8003b74:	f280 80dc 	bge.w	8003d30 <_ZN11PayrollPage6renderEv+0x358>
		e = employees[i];
 8003b78:	4a52      	ldr	r2, [pc, #328]	; (8003cc4 <_ZN11PayrollPage6renderEv+0x2ec>)
 8003b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b80:	61fb      	str	r3, [r7, #28]

		lcd->fillrect(0, 80 + 30 * i, W, 80 + 30 * (i + 1), BG);
 8003b82:	4b47      	ldr	r3, [pc, #284]	; (8003ca0 <_ZN11PayrollPage6renderEv+0x2c8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	461d      	mov	r5, r3
 8003b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	011b      	lsls	r3, r3, #4
 8003b8e:	1a9b      	subs	r3, r3, r2
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8003b96:	4b42      	ldr	r3, [pc, #264]	; (8003ca0 <_ZN11PayrollPage6renderEv+0x2c8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	4b40      	ldr	r3, [pc, #256]	; (8003ca0 <_ZN11PayrollPage6renderEv+0x2c8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	332c      	adds	r3, #44	; 0x2c
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4610      	mov	r0, r2
 8003ba8:	4798      	blx	r3
 8003baa:	4601      	mov	r1, r0
 8003bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bae:	1c5a      	adds	r2, r3, #1
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	1a9b      	subs	r3, r3, r2
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	3350      	adds	r3, #80	; 0x50
 8003bba:	f643 220c 	movw	r2, #14860	; 0x3a0c
 8003bbe:	9201      	str	r2, [sp, #4]
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	4622      	mov	r2, r4
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	4628      	mov	r0, r5
 8003bca:	f001 fb9b 	bl	8005304 <_ZN15SPI_TFT_ILI93418fillrectEiiiii>
		lcd->foreground(LightGrey);
 8003bce:	4b34      	ldr	r3, [pc, #208]	; (8003ca0 <_ZN11PayrollPage6renderEv+0x2c8>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	4b32      	ldr	r3, [pc, #200]	; (8003ca0 <_ZN11PayrollPage6renderEv+0x2c8>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	3318      	adds	r3, #24
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f24c 6118 	movw	r1, #50712	; 0xc618
 8003be2:	4610      	mov	r0, r2
 8003be4:	4798      	blx	r3

		pay_val = calculate_pay(e);
 8003be6:	69f8      	ldr	r0, [r7, #28]
 8003be8:	f7fd fd5e 	bl	80016a8 <calculate_pay>
 8003bec:	ee10 3a10 	vmov	r3, s0
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7fc fcb9 	bl	8000568 <__aeabi_f2d>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	460c      	mov	r4, r1
 8003bfa:	e9c7 3408 	strd	r3, r4, [r7, #32]
		sum += pay_val;
 8003bfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c02:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003c06:	f7fc fb51 	bl	80002ac <__adddf3>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	460c      	mov	r4, r1
 8003c0e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
		sprintf(hours, "%.2f", calculate_hours(e));
 8003c12:	69f8      	ldr	r0, [r7, #28]
 8003c14:	f7fd fce6 	bl	80015e4 <calculate_hours>
 8003c18:	ee10 3a10 	vmov	r3, s0
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7fc fca3 	bl	8000568 <__aeabi_f2d>
 8003c22:	4603      	mov	r3, r0
 8003c24:	460c      	mov	r4, r1
 8003c26:	f107 0014 	add.w	r0, r7, #20
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	4623      	mov	r3, r4
 8003c2e:	4926      	ldr	r1, [pc, #152]	; (8003cc8 <_ZN11PayrollPage6renderEv+0x2f0>)
 8003c30:	f004 fea8 	bl	8008984 <siprintf>
		sprintf(pay, "$%.2f", pay_val);
 8003c34:	f107 000c 	add.w	r0, r7, #12
 8003c38:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c3c:	4923      	ldr	r1, [pc, #140]	; (8003ccc <_ZN11PayrollPage6renderEv+0x2f4>)
 8003c3e:	f004 fea1 	bl	8008984 <siprintf>
		lcd->print_text(e->name, 10, 80 + 30 * i, ARIAL12);
 8003c42:	4b17      	ldr	r3, [pc, #92]	; (8003ca0 <_ZN11PayrollPage6renderEv+0x2c8>)
 8003c44:	6818      	ldr	r0, [r3, #0]
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	1d19      	adds	r1, r3, #4
 8003c4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	1a9b      	subs	r3, r3, r2
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8003c58:	4b15      	ldr	r3, [pc, #84]	; (8003cb0 <_ZN11PayrollPage6renderEv+0x2d8>)
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	220a      	movs	r2, #10
 8003c60:	f7fd f9f6 	bl	8001050 <_ZN7Display10print_textEPciiPh>
		lcd->print_text(hours, 100, 80 + 30 * i, ARIAL12);
 8003c64:	4b0e      	ldr	r3, [pc, #56]	; (8003ca0 <_ZN11PayrollPage6renderEv+0x2c8>)
 8003c66:	6818      	ldr	r0, [r3, #0]
 8003c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	1a9b      	subs	r3, r3, r2
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8003c76:	f107 0114 	add.w	r1, r7, #20
 8003c7a:	4b0d      	ldr	r3, [pc, #52]	; (8003cb0 <_ZN11PayrollPage6renderEv+0x2d8>)
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	2264      	movs	r2, #100	; 0x64
 8003c82:	f7fd f9e5 	bl	8001050 <_ZN7Display10print_textEPciiPh>
		lcd->print_text(pay, 180, 80 + 30 * i, ARIAL12);
 8003c86:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <_ZN11PayrollPage6renderEv+0x2c8>)
 8003c88:	6818      	ldr	r0, [r3, #0]
 8003c8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	1a9b      	subs	r3, r3, r2
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8003c98:	f107 010c 	add.w	r1, r7, #12
 8003c9c:	e018      	b.n	8003cd0 <_ZN11PayrollPage6renderEv+0x2f8>
 8003c9e:	bf00      	nop
 8003ca0:	20000424 	.word	0x20000424
 8003ca4:	08016080 	.word	0x08016080
 8003ca8:	0800c19c 	.word	0x0800c19c
 8003cac:	0800c1a0 	.word	0x0800c1a0
 8003cb0:	0801571c 	.word	0x0801571c
 8003cb4:	0800c1a8 	.word	0x0800c1a8
 8003cb8:	0800c1b0 	.word	0x0800c1b0
 8003cbc:	0800c1b8 	.word	0x0800c1b8
 8003cc0:	200002e0 	.word	0x200002e0
 8003cc4:	200002e4 	.word	0x200002e4
 8003cc8:	0800c1c0 	.word	0x0800c1c0
 8003ccc:	0800c1c8 	.word	0x0800c1c8
 8003cd0:	4b53      	ldr	r3, [pc, #332]	; (8003e20 <_ZN11PayrollPage6renderEv+0x448>)
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	22b4      	movs	r2, #180	; 0xb4
 8003cd8:	f7fd f9ba 	bl	8001050 <_ZN7Display10print_textEPciiPh>
		lcd->line(0, 70 + 30 * (i + 1), W, 70 + 30 * (i + 1), Black);
 8003cdc:	4b51      	ldr	r3, [pc, #324]	; (8003e24 <_ZN11PayrollPage6renderEv+0x44c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	461d      	mov	r5, r3
 8003ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	011b      	lsls	r3, r3, #4
 8003cea:	1a9b      	subs	r3, r3, r2
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	f103 0446 	add.w	r4, r3, #70	; 0x46
 8003cf2:	4b4c      	ldr	r3, [pc, #304]	; (8003e24 <_ZN11PayrollPage6renderEv+0x44c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	4b4a      	ldr	r3, [pc, #296]	; (8003e24 <_ZN11PayrollPage6renderEv+0x44c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	332c      	adds	r3, #44	; 0x2c
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4610      	mov	r0, r2
 8003d04:	4798      	blx	r3
 8003d06:	4601      	mov	r1, r0
 8003d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	1a9b      	subs	r3, r3, r2
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	3346      	adds	r3, #70	; 0x46
 8003d16:	2200      	movs	r2, #0
 8003d18:	9201      	str	r2, [sp, #4]
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4622      	mov	r2, r4
 8003d20:	2100      	movs	r1, #0
 8003d22:	4628      	mov	r0, r5
 8003d24:	f001 f9b3 	bl	800508e <_ZN15SPI_TFT_ILI93414lineEiiiii>
	for (int i = 0; i < num_employees; i++) {
 8003d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d2e:	e71d      	b.n	8003b6c <_ZN11PayrollPage6renderEv+0x194>
	}

	// RESULTS
	lcd->line(0, H - 40, W, H - 40, White);
 8003d30:	4b3c      	ldr	r3, [pc, #240]	; (8003e24 <_ZN11PayrollPage6renderEv+0x44c>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	461d      	mov	r5, r3
 8003d36:	4b3b      	ldr	r3, [pc, #236]	; (8003e24 <_ZN11PayrollPage6renderEv+0x44c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	4b39      	ldr	r3, [pc, #228]	; (8003e24 <_ZN11PayrollPage6renderEv+0x44c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	3330      	adds	r3, #48	; 0x30
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4610      	mov	r0, r2
 8003d48:	4798      	blx	r3
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	f1a3 0428 	sub.w	r4, r3, #40	; 0x28
 8003d50:	4b34      	ldr	r3, [pc, #208]	; (8003e24 <_ZN11PayrollPage6renderEv+0x44c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	461a      	mov	r2, r3
 8003d56:	4b33      	ldr	r3, [pc, #204]	; (8003e24 <_ZN11PayrollPage6renderEv+0x44c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	332c      	adds	r3, #44	; 0x2c
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4610      	mov	r0, r2
 8003d62:	4798      	blx	r3
 8003d64:	4606      	mov	r6, r0
 8003d66:	4b2f      	ldr	r3, [pc, #188]	; (8003e24 <_ZN11PayrollPage6renderEv+0x44c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	4b2d      	ldr	r3, [pc, #180]	; (8003e24 <_ZN11PayrollPage6renderEv+0x44c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3330      	adds	r3, #48	; 0x30
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4610      	mov	r0, r2
 8003d78:	4798      	blx	r3
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	3b28      	subs	r3, #40	; 0x28
 8003d7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d82:	9201      	str	r2, [sp, #4]
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	4633      	mov	r3, r6
 8003d88:	4622      	mov	r2, r4
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	4628      	mov	r0, r5
 8003d8e:	f001 f97e 	bl	800508e <_ZN15SPI_TFT_ILI93414lineEiiiii>
	lcd->foreground(White);
 8003d92:	4b24      	ldr	r3, [pc, #144]	; (8003e24 <_ZN11PayrollPage6renderEv+0x44c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	461a      	mov	r2, r3
 8003d98:	4b22      	ldr	r3, [pc, #136]	; (8003e24 <_ZN11PayrollPage6renderEv+0x44c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	3318      	adds	r3, #24
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003da6:	4610      	mov	r0, r2
 8003da8:	4798      	blx	r3
	sprintf(pay, "$%.2f", sum);
 8003daa:	f107 000c 	add.w	r0, r7, #12
 8003dae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003db2:	491d      	ldr	r1, [pc, #116]	; (8003e28 <_ZN11PayrollPage6renderEv+0x450>)
 8003db4:	f004 fde6 	bl	8008984 <siprintf>
	lcd->print_text((char*) "GRAND TOTAL:", 10, H - 25, ARIAL12);
 8003db8:	4b1a      	ldr	r3, [pc, #104]	; (8003e24 <_ZN11PayrollPage6renderEv+0x44c>)
 8003dba:	681c      	ldr	r4, [r3, #0]
 8003dbc:	4b19      	ldr	r3, [pc, #100]	; (8003e24 <_ZN11PayrollPage6renderEv+0x44c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	4b18      	ldr	r3, [pc, #96]	; (8003e24 <_ZN11PayrollPage6renderEv+0x44c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	3330      	adds	r3, #48	; 0x30
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4610      	mov	r0, r2
 8003dce:	4798      	blx	r3
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	f1a3 0219 	sub.w	r2, r3, #25
 8003dd6:	4b12      	ldr	r3, [pc, #72]	; (8003e20 <_ZN11PayrollPage6renderEv+0x448>)
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	220a      	movs	r2, #10
 8003dde:	4913      	ldr	r1, [pc, #76]	; (8003e2c <_ZN11PayrollPage6renderEv+0x454>)
 8003de0:	4620      	mov	r0, r4
 8003de2:	f7fd f935 	bl	8001050 <_ZN7Display10print_textEPciiPh>
	lcd->print_text(pay, 180, H - 25, ARIAL12);
 8003de6:	4b0f      	ldr	r3, [pc, #60]	; (8003e24 <_ZN11PayrollPage6renderEv+0x44c>)
 8003de8:	681c      	ldr	r4, [r3, #0]
 8003dea:	4b0e      	ldr	r3, [pc, #56]	; (8003e24 <_ZN11PayrollPage6renderEv+0x44c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	461a      	mov	r2, r3
 8003df0:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <_ZN11PayrollPage6renderEv+0x44c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3330      	adds	r3, #48	; 0x30
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	4798      	blx	r3
 8003dfe:	4603      	mov	r3, r0
 8003e00:	f1a3 0219 	sub.w	r2, r3, #25
 8003e04:	f107 010c 	add.w	r1, r7, #12
 8003e08:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <_ZN11PayrollPage6renderEv+0x448>)
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	22b4      	movs	r2, #180	; 0xb4
 8003e10:	4620      	mov	r0, r4
 8003e12:	f7fd f91d 	bl	8001050 <_ZN7Display10print_textEPciiPh>
}
 8003e16:	bf00      	nop
 8003e18:	373c      	adds	r7, #60	; 0x3c
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	0801571c 	.word	0x0801571c
 8003e24:	20000424 	.word	0x20000424
 8003e28:	0800c1c8 	.word	0x0800c1c8
 8003e2c:	0800c1d0 	.word	0x0800c1d0

08003e30 <_ZN11PayrollPage17up_button_handlerEv>:

void PayrollPage::up_button_handler() { get_page((char*) "main")->make_active(); }
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	4806      	ldr	r0, [pc, #24]	; (8003e54 <_ZN11PayrollPage17up_button_handlerEv+0x24>)
 8003e3a:	f7fd fdeb 	bl	8001a14 <_Z8get_pagePc>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	6813      	ldr	r3, [r2, #0]
 8003e42:	3308      	adds	r3, #8
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2100      	movs	r1, #0
 8003e48:	4610      	mov	r0, r2
 8003e4a:	4798      	blx	r3
 8003e4c:	bf00      	nop
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	0800c1e0 	.word	0x0800c1e0

08003e58 <_ZN11PayrollPage19down_button_handlerEv>:

void PayrollPage::down_button_handler() { get_page((char*) "main")->make_active(); }
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	4806      	ldr	r0, [pc, #24]	; (8003e7c <_ZN11PayrollPage19down_button_handlerEv+0x24>)
 8003e62:	f7fd fdd7 	bl	8001a14 <_Z8get_pagePc>
 8003e66:	4602      	mov	r2, r0
 8003e68:	6813      	ldr	r3, [r2, #0]
 8003e6a:	3308      	adds	r3, #8
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2100      	movs	r1, #0
 8003e70:	4610      	mov	r0, r2
 8003e72:	4798      	blx	r3
 8003e74:	bf00      	nop
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	0800c1e0 	.word	0x0800c1e0

08003e80 <_ZN11PayrollPage19left_button_handlerEv>:

void PayrollPage::left_button_handler() { get_page((char*) "main")->make_active(); }
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	4806      	ldr	r0, [pc, #24]	; (8003ea4 <_ZN11PayrollPage19left_button_handlerEv+0x24>)
 8003e8a:	f7fd fdc3 	bl	8001a14 <_Z8get_pagePc>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	6813      	ldr	r3, [r2, #0]
 8003e92:	3308      	adds	r3, #8
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2100      	movs	r1, #0
 8003e98:	4610      	mov	r0, r2
 8003e9a:	4798      	blx	r3
 8003e9c:	bf00      	nop
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	0800c1e0 	.word	0x0800c1e0

08003ea8 <_ZN11PayrollPage20right_button_handlerEv>:

void PayrollPage::right_button_handler() { get_page((char*) "main")->make_active(); }
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	4806      	ldr	r0, [pc, #24]	; (8003ecc <_ZN11PayrollPage20right_button_handlerEv+0x24>)
 8003eb2:	f7fd fdaf 	bl	8001a14 <_Z8get_pagePc>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	6813      	ldr	r3, [r2, #0]
 8003eba:	3308      	adds	r3, #8
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	4798      	blx	r3
 8003ec4:	bf00      	nop
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	0800c1e0 	.word	0x0800c1e0

08003ed0 <_ZN11PayrollPage21center_button_handlerEv>:

void PayrollPage::center_button_handler() { get_page((char*) "main")->make_active(); }
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	4806      	ldr	r0, [pc, #24]	; (8003ef4 <_ZN11PayrollPage21center_button_handlerEv+0x24>)
 8003eda:	f7fd fd9b 	bl	8001a14 <_Z8get_pagePc>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	6813      	ldr	r3, [r2, #0]
 8003ee2:	3308      	adds	r3, #8
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	4610      	mov	r0, r2
 8003eea:	4798      	blx	r3
 8003eec:	bf00      	nop
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	0800c1e0 	.word	0x0800c1e0

08003ef8 <_ZN11PayrollPage19increment_selectionEv>:


// Not used on this page
void PayrollPage::increment_selection() { return; }
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <_ZN11PayrollPage19decrement_selectionEv>:
void PayrollPage::decrement_selection() { return; }
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <_ZN11PayrollPage14make_selectionEv>:
void PayrollPage::make_selection() { return; }
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <_ZN11PayrollPageD1Ev>:
#define INC_PAGES_PAYROLLPAGE_HPP_


#include <pages/Page.hpp>

class PayrollPage : public Page {
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	4a05      	ldr	r2, [pc, #20]	; (8003f54 <_ZN11PayrollPageD1Ev+0x20>)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7fe f923 	bl	8002190 <_ZN4PageD1Ev>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	08017bec 	.word	0x08017bec

08003f58 <_ZN11PayrollPageD0Ev>:
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7ff ffe7 	bl	8003f34 <_ZN11PayrollPageD1Ev>
 8003f66:	213c      	movs	r1, #60	; 0x3c
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f002 ff8a 	bl	8006e82 <_ZdlPvj>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4618      	mov	r0, r3
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003f78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003fb0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003f7c:	f7fe f8c2 	bl	8002104 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003f80:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003f82:	e003      	b.n	8003f8c <LoopCopyDataInit>

08003f84 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003f84:	4b0b      	ldr	r3, [pc, #44]	; (8003fb4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003f86:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003f88:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003f8a:	3104      	adds	r1, #4

08003f8c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003f8c:	480a      	ldr	r0, [pc, #40]	; (8003fb8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003f8e:	4b0b      	ldr	r3, [pc, #44]	; (8003fbc <LoopForever+0xe>)
	adds	r2, r0, r1
 8003f90:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003f92:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003f94:	d3f6      	bcc.n	8003f84 <CopyDataInit>
	ldr	r2, =_sbss
 8003f96:	4a0a      	ldr	r2, [pc, #40]	; (8003fc0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003f98:	e002      	b.n	8003fa0 <LoopFillZerobss>

08003f9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003f9a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003f9c:	f842 3b04 	str.w	r3, [r2], #4

08003fa0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003fa0:	4b08      	ldr	r3, [pc, #32]	; (8003fc4 <LoopForever+0x16>)
	cmp	r2, r3
 8003fa2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003fa4:	d3f9      	bcc.n	8003f9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003fa6:	f003 fa97 	bl	80074d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003faa:	f7fd fea3 	bl	8001cf4 <main>

08003fae <LoopForever>:

LoopForever:
    b LoopForever
 8003fae:	e7fe      	b.n	8003fae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003fb0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003fb4:	0801866c 	.word	0x0801866c
	ldr	r0, =_sdata
 8003fb8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003fbc:	200002c4 	.word	0x200002c4
	ldr	r2, =_sbss
 8003fc0:	200002c4 	.word	0x200002c4
	ldr	r3, = _ebss
 8003fc4:	20000474 	.word	0x20000474

08003fc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003fc8:	e7fe      	b.n	8003fc8 <ADC1_2_IRQHandler>
	...

08003fcc <BSP_LED_Init>:
  *     @arg LED4
  * @retval None
  */
#endif
void BSP_LED_Init(Led_TypeDef Led)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b08a      	sub	sp, #40	; 0x28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8003fd6:	79fb      	ldrb	r3, [r7, #7]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10c      	bne.n	8003ff6 <BSP_LED_Init+0x2a>
 8003fdc:	4b1f      	ldr	r3, [pc, #124]	; (800405c <BSP_LED_Init+0x90>)
 8003fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe0:	4a1e      	ldr	r2, [pc, #120]	; (800405c <BSP_LED_Init+0x90>)
 8003fe2:	f043 0302 	orr.w	r3, r3, #2
 8003fe6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fe8:	4b1c      	ldr	r3, [pc, #112]	; (800405c <BSP_LED_Init+0x90>)
 8003fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	613b      	str	r3, [r7, #16]
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	e00e      	b.n	8004014 <BSP_LED_Init+0x48>
 8003ff6:	79fb      	ldrb	r3, [r7, #7]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d10b      	bne.n	8004014 <BSP_LED_Init+0x48>
 8003ffc:	4b17      	ldr	r3, [pc, #92]	; (800405c <BSP_LED_Init+0x90>)
 8003ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004000:	4a16      	ldr	r2, [pc, #88]	; (800405c <BSP_LED_Init+0x90>)
 8004002:	f043 0310 	orr.w	r3, r3, #16
 8004006:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004008:	4b14      	ldr	r3, [pc, #80]	; (800405c <BSP_LED_Init+0x90>)
 800400a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800400c:	f003 0310 	and.w	r3, r3, #16
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.Pin = LED_PIN[Led];
 8004014:	79fb      	ldrb	r3, [r7, #7]
 8004016:	4a12      	ldr	r2, [pc, #72]	; (8004060 <BSP_LED_Init+0x94>)
 8004018:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800401c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800401e:	2301      	movs	r3, #1
 8004020:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004022:	2300      	movs	r3, #0
 8004024:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004026:	2303      	movs	r3, #3
 8004028:	623b      	str	r3, [r7, #32]

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStructure);
 800402a:	79fb      	ldrb	r3, [r7, #7]
 800402c:	4a0d      	ldr	r2, [pc, #52]	; (8004064 <BSP_LED_Init+0x98>)
 800402e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004032:	f107 0214 	add.w	r2, r7, #20
 8004036:	4611      	mov	r1, r2
 8004038:	4618      	mov	r0, r3
 800403a:	f001 fdc9 	bl	8005bd0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_PORT[Led], GPIO_InitStructure.Pin, GPIO_PIN_RESET);
 800403e:	79fb      	ldrb	r3, [r7, #7]
 8004040:	4a08      	ldr	r2, [pc, #32]	; (8004064 <BSP_LED_Init+0x98>)
 8004042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	b291      	uxth	r1, r2
 800404a:	2200      	movs	r2, #0
 800404c:	4618      	mov	r0, r3
 800404e:	f001 ff6b 	bl	8005f28 <HAL_GPIO_WritePin>
}
 8004052:	bf00      	nop
 8004054:	3728      	adds	r7, #40	; 0x28
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	40021000 	.word	0x40021000
 8004060:	08017c1c 	.word	0x08017c1c
 8004064:	20000088 	.word	0x20000088

08004068 <BSP_LED_On>:
  *     @arg LED4
  * @retval None
  */
#endif
void BSP_LED_On(Led_TypeDef Led)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	4603      	mov	r3, r0
 8004070:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8004072:	79fb      	ldrb	r3, [r7, #7]
 8004074:	4a07      	ldr	r2, [pc, #28]	; (8004094 <BSP_LED_On+0x2c>)
 8004076:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800407a:	79fb      	ldrb	r3, [r7, #7]
 800407c:	4a06      	ldr	r2, [pc, #24]	; (8004098 <BSP_LED_On+0x30>)
 800407e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004082:	2201      	movs	r2, #1
 8004084:	4619      	mov	r1, r3
 8004086:	f001 ff4f 	bl	8005f28 <HAL_GPIO_WritePin>
}
 800408a:	bf00      	nop
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	20000088 	.word	0x20000088
 8004098:	08017c1c 	.word	0x08017c1c

0800409c <_ZN7PinNameC1Ev>:

#include "../../../Drivers/ILI9341_Display_Driver/compat/platform.h"

class PinName {
public:
	PinName() : m_port(0), m_pin(0), m_obj(0) {}
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	605a      	str	r2, [r3, #4]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	609a      	str	r2, [r3, #8]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4618      	mov	r0, r3
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <_Z41__static_initialization_and_destruction_0ii>:
#include <../../../Drivers/ILI9341_Display_Driver/compat/mbed_io.hpp>

PinName PinName::not_connected;
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d107      	bne.n	80040e4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040da:	4293      	cmp	r3, r2
 80040dc:	d102      	bne.n	80040e4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80040de:	4803      	ldr	r0, [pc, #12]	; (80040ec <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80040e0:	f7ff ffdc 	bl	800409c <_ZN7PinNameC1Ev>
 80040e4:	bf00      	nop
 80040e6:	3708      	adds	r7, #8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	20000430 	.word	0x20000430

080040f0 <_GLOBAL__sub_I__ZN7PinName13not_connectedE>:
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80040f8:	2001      	movs	r0, #1
 80040fa:	f7ff ffe3 	bl	80040c4 <_Z41__static_initialization_and_destruction_0ii>
 80040fe:	bd80      	pop	{r7, pc}

08004100 <_ZN15GraphicsDisplayC1EPKc>:
0x0C,0x0C,0x0C,0x00,0x0C,0x0C,0x0C,0x00, // |
0x70,0x18,0x18,0x0E,0x18,0x18,0x70,0x00, // }
0x3B,0x6E,0x00,0x00,0x00,0x00,0x00,0x00, // ~
0x1C,0x36,0x36,0x1C,0x00,0x00,0x00,0x00}; // DEL
    
GraphicsDisplay::GraphicsDisplay(const char *name):TextDisplay(name) {
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6839      	ldr	r1, [r7, #0]
 800410e:	4618      	mov	r0, r3
 8004110:	f001 face 	bl	80056b0 <_ZN11TextDisplayC1EPKc>
 8004114:	4a09      	ldr	r2, [pc, #36]	; (800413c <_ZN15GraphicsDisplayC1EPKc+0x3c>)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	601a      	str	r2, [r3, #0]
    foreground(0xFFFF);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004120:	4618      	mov	r0, r3
 8004122:	f001 fbb8 	bl	8005896 <_ZN11TextDisplay10foregroundEt>
    background(0x0000);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2100      	movs	r1, #0
 800412a:	4618      	mov	r0, r3
 800412c:	f001 fbc2 	bl	80058b4 <_ZN11TextDisplay10backgroundEt>
}
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4618      	mov	r0, r3
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	08017f30 	.word	0x08017f30

08004140 <_ZN15GraphicsDisplay9characterEiii>:
    
void GraphicsDisplay::character(int column, int row, int value) { 
 8004140:	b590      	push	{r4, r7, lr}
 8004142:	b087      	sub	sp, #28
 8004144:	af02      	add	r7, sp, #8
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
 800414c:	603b      	str	r3, [r7, #0]
    blitbit(column * 8, row * 8, 8, 8, (char*)&(F8x8[value - 0x1F][0]));
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	3344      	adds	r3, #68	; 0x44
 8004154:	681c      	ldr	r4, [r3, #0]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	00d9      	lsls	r1, r3, #3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	00d8      	lsls	r0, r3, #3
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	3b1f      	subs	r3, #31
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	4a06      	ldr	r2, [pc, #24]	; (8004180 <_ZN15GraphicsDisplay9characterEiii+0x40>)
 8004166:	4413      	add	r3, r2
 8004168:	9301      	str	r3, [sp, #4]
 800416a:	2308      	movs	r3, #8
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	2308      	movs	r3, #8
 8004170:	4602      	mov	r2, r0
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	47a0      	blx	r4
}
 8004176:	bf00      	nop
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	bd90      	pop	{r4, r7, pc}
 800417e:	bf00      	nop
 8004180:	08017c20 	.word	0x08017c20

08004184 <_ZN15GraphicsDisplay6windowEjjjj>:

void GraphicsDisplay::window(unsigned int x,unsigned  int y,unsigned  int w,unsigned  int h) {
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
 8004190:	603b      	str	r3, [r7, #0]
    // current pixel location
    _x = x;
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	b21a      	sxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	821a      	strh	r2, [r3, #16]
    _y = y;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	b21a      	sxth	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	825a      	strh	r2, [r3, #18]
    // window settings
    _x1 = x;
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	b21a      	sxth	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	829a      	strh	r2, [r3, #20]
    _x2 = x + w - 1;
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	4413      	add	r3, r2
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	b21a      	sxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	82da      	strh	r2, [r3, #22]
    _y1 = y;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	b21a      	sxth	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	831a      	strh	r2, [r3, #24]
    _y2 = y + h - 1;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	4413      	add	r3, r2
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	b21a      	sxth	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	835a      	strh	r2, [r3, #26]
}
 80041de:	bf00      	nop
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <_ZN15GraphicsDisplay4putpEi>:
    
void GraphicsDisplay::putp(int colour) {
 80041ea:	b590      	push	{r4, r7, lr}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
 80041f2:	6039      	str	r1, [r7, #0]
    // put pixel at current pixel location
    pixel(_x, _y, colour);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	3328      	adds	r3, #40	; 0x28
 80041fa:	681c      	ldr	r4, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004202:	4619      	mov	r1, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800420a:	461a      	mov	r2, r3
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	47a0      	blx	r4
    // update pixel location based on window settings
    _x++;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004218:	b29b      	uxth	r3, r3
 800421a:	3301      	adds	r3, #1
 800421c:	b29b      	uxth	r3, r3
 800421e:	b21a      	sxth	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	821a      	strh	r2, [r3, #16]
    if(_x > _x2) {
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004230:	429a      	cmp	r2, r3
 8004232:	dd1a      	ble.n	800426a <_ZN15GraphicsDisplay4putpEi+0x80>
        _x = _x1;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	821a      	strh	r2, [r3, #16]
        _y++;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004244:	b29b      	uxth	r3, r3
 8004246:	3301      	adds	r3, #1
 8004248:	b29b      	uxth	r3, r3
 800424a:	b21a      	sxth	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	825a      	strh	r2, [r3, #18]
        if(_y > _y2) {
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800425c:	429a      	cmp	r2, r3
 800425e:	dd04      	ble.n	800426a <_ZN15GraphicsDisplay4putpEi+0x80>
            _y = _y1;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	825a      	strh	r2, [r3, #18]
        }
    }
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	bd90      	pop	{r4, r7, pc}

08004272 <_ZN15GraphicsDisplay4fillEiiiii>:

void GraphicsDisplay::fill(int x, int y, int w, int h, int colour) { 
 8004272:	b590      	push	{r4, r7, lr}
 8004274:	b089      	sub	sp, #36	; 0x24
 8004276:	af02      	add	r7, sp, #8
 8004278:	60f8      	str	r0, [r7, #12]
 800427a:	60b9      	str	r1, [r7, #8]
 800427c:	607a      	str	r2, [r7, #4]
 800427e:	603b      	str	r3, [r7, #0]
    window(x, y, w, h);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	3334      	adds	r3, #52	; 0x34
 8004286:	681c      	ldr	r4, [r3, #0]
 8004288:	68b9      	ldr	r1, [r7, #8]
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6838      	ldr	r0, [r7, #0]
 800428e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	4603      	mov	r3, r0
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	47a0      	blx	r4
    for(int i=0; i<w*h; i++) {
 8004298:	2300      	movs	r3, #0
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042a0:	fb02 f303 	mul.w	r3, r2, r3
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	da0a      	bge.n	80042c0 <_ZN15GraphicsDisplay4fillEiiiii+0x4e>
        putp(colour);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	3338      	adds	r3, #56	; 0x38
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	4798      	blx	r3
    for(int i=0; i<w*h; i++) {
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	3301      	adds	r3, #1
 80042bc:	617b      	str	r3, [r7, #20]
 80042be:	e7ed      	b.n	800429c <_ZN15GraphicsDisplay4fillEiiiii+0x2a>
    }
}
 80042c0:	bf00      	nop
 80042c2:	371c      	adds	r7, #28
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd90      	pop	{r4, r7, pc}

080042c8 <_ZN15GraphicsDisplay3clsEv>:
    
void GraphicsDisplay::cls() {
 80042c8:	b5b0      	push	{r4, r5, r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af02      	add	r7, sp, #8
 80042ce:	6078      	str	r0, [r7, #4]
    fill(0, 0, width(), height(), _background);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	333c      	adds	r3, #60	; 0x3c
 80042d6:	681c      	ldr	r4, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	332c      	adds	r3, #44	; 0x2c
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	4798      	blx	r3
 80042e4:	4605      	mov	r5, r0
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	3330      	adds	r3, #48	; 0x30
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	4798      	blx	r3
 80042f2:	4602      	mov	r2, r0
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	895b      	ldrh	r3, [r3, #10]
 80042f8:	9301      	str	r3, [sp, #4]
 80042fa:	9200      	str	r2, [sp, #0]
 80042fc:	462b      	mov	r3, r5
 80042fe:	2200      	movs	r2, #0
 8004300:	2100      	movs	r1, #0
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	47a0      	blx	r4
}
 8004306:	bf00      	nop
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bdb0      	pop	{r4, r5, r7, pc}

0800430e <_ZN15GraphicsDisplay4blitEiiiiPKi>:
    
void GraphicsDisplay::blit(int x, int y, int w, int h, const int *colour) { 
 800430e:	b590      	push	{r4, r7, lr}
 8004310:	b089      	sub	sp, #36	; 0x24
 8004312:	af02      	add	r7, sp, #8
 8004314:	60f8      	str	r0, [r7, #12]
 8004316:	60b9      	str	r1, [r7, #8]
 8004318:	607a      	str	r2, [r7, #4]
 800431a:	603b      	str	r3, [r7, #0]
    window(x, y, w, h);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	3334      	adds	r3, #52	; 0x34
 8004322:	681c      	ldr	r4, [r3, #0]
 8004324:	68b9      	ldr	r1, [r7, #8]
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	6838      	ldr	r0, [r7, #0]
 800432a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	4603      	mov	r3, r0
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	47a0      	blx	r4
    for(int i=0; i<w*h; i++) {
 8004334:	2300      	movs	r3, #0
 8004336:	617b      	str	r3, [r7, #20]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800433c:	fb02 f303 	mul.w	r3, r2, r3
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	429a      	cmp	r2, r3
 8004344:	da0f      	bge.n	8004366 <_ZN15GraphicsDisplay4blitEiiiiPKi+0x58>
        putp(colour[i]);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	3338      	adds	r3, #56	; 0x38
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	0092      	lsls	r2, r2, #2
 8004352:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004354:	440a      	add	r2, r1
 8004356:	6812      	ldr	r2, [r2, #0]
 8004358:	4611      	mov	r1, r2
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	4798      	blx	r3
    for(int i=0; i<w*h; i++) {
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	3301      	adds	r3, #1
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	e7e8      	b.n	8004338 <_ZN15GraphicsDisplay4blitEiiiiPKi+0x2a>
    }
}
 8004366:	bf00      	nop
 8004368:	371c      	adds	r7, #28
 800436a:	46bd      	mov	sp, r7
 800436c:	bd90      	pop	{r4, r7, pc}

0800436e <_ZN15GraphicsDisplay7blitbitEiiiiPKc>:
    
void GraphicsDisplay::blitbit(int x, int y, int w, int h, const char* colour) {
 800436e:	b590      	push	{r4, r7, lr}
 8004370:	b08b      	sub	sp, #44	; 0x2c
 8004372:	af02      	add	r7, sp, #8
 8004374:	60f8      	str	r0, [r7, #12]
 8004376:	60b9      	str	r1, [r7, #8]
 8004378:	607a      	str	r2, [r7, #4]
 800437a:	603b      	str	r3, [r7, #0]
    window(x, y, w, h);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3334      	adds	r3, #52	; 0x34
 8004382:	681c      	ldr	r4, [r3, #0]
 8004384:	68b9      	ldr	r1, [r7, #8]
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	6838      	ldr	r0, [r7, #0]
 800438a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	4603      	mov	r3, r0
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	47a0      	blx	r4
    for(int i = 0; i < w*h; i++) {
 8004394:	2300      	movs	r3, #0
 8004396:	61fb      	str	r3, [r7, #28]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800439c:	fb02 f303 	mul.w	r3, r2, r3
 80043a0:	69fa      	ldr	r2, [r7, #28]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	da23      	bge.n	80043ee <_ZN15GraphicsDisplay7blitbitEiiiiPKc+0x80>
        char byte = colour[i >> 3];
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	10db      	asrs	r3, r3, #3
 80043aa:	461a      	mov	r2, r3
 80043ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ae:	4413      	add	r3, r2
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	76fb      	strb	r3, [r7, #27]
        int offset = i & 0x7;
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	617b      	str	r3, [r7, #20]
        int c = ((byte << offset) & 0x80) ? _foreground : _background;
 80043bc:	7efa      	ldrb	r2, [r7, #27]
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	fa02 f303 	lsl.w	r3, r2, r3
 80043c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d002      	beq.n	80043d2 <_ZN15GraphicsDisplay7blitbitEiiiiPKc+0x64>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	891b      	ldrh	r3, [r3, #8]
 80043d0:	e001      	b.n	80043d6 <_ZN15GraphicsDisplay7blitbitEiiiiPKc+0x68>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	895b      	ldrh	r3, [r3, #10]
 80043d6:	613b      	str	r3, [r7, #16]
        putp(c);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3338      	adds	r3, #56	; 0x38
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6939      	ldr	r1, [r7, #16]
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	4798      	blx	r3
    for(int i = 0; i < w*h; i++) {
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	3301      	adds	r3, #1
 80043ea:	61fb      	str	r3, [r7, #28]
 80043ec:	e7d4      	b.n	8004398 <_ZN15GraphicsDisplay7blitbitEiiiiPKc+0x2a>
    }
}
 80043ee:	bf00      	nop
 80043f0:	3724      	adds	r7, #36	; 0x24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd90      	pop	{r4, r7, pc}

080043f6 <_ZN15GraphicsDisplay7columnsEv>:
    
int GraphicsDisplay::columns() { 
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b082      	sub	sp, #8
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
    return width() / 8; 
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	332c      	adds	r3, #44	; 0x2c
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	4798      	blx	r3
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	da00      	bge.n	8004412 <_ZN15GraphicsDisplay7columnsEv+0x1c>
 8004410:	3307      	adds	r3, #7
 8004412:	10db      	asrs	r3, r3, #3
}
 8004414:	4618      	mov	r0, r3
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <_ZN15GraphicsDisplay4rowsEv>:

int GraphicsDisplay::rows() { 
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
    return height() / 8; 
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3330      	adds	r3, #48	; 0x30
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	4798      	blx	r3
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	da00      	bge.n	8004438 <_ZN15GraphicsDisplay4rowsEv+0x1c>
 8004436:	3307      	adds	r3, #7
 8004438:	10db      	asrs	r3, r3, #3
}
 800443a:	4618      	mov	r0, r3
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <_ZN10DigitalOutC1ERK7PinName>:
	DigitalOut(GPIO_TypeDef* port, unsigned pin)
		: m_port(port), m_pin(pin)
		{
			assert_param(m_port != 0);
		}
	DigitalOut(PinName const& N)
 8004442:	b480      	push	{r7}
 8004444:	b083      	sub	sp, #12
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	6039      	str	r1, [r7, #0]
		: m_port(N.m_port), m_pin(N.m_pin)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	605a      	str	r2, [r3, #4]
		{
			assert_param(m_port != 0);
		}
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4618      	mov	r0, r3
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <_ZN10DigitalOutaSEi>:
	void operator =(int bit) {
 800446a:	b480      	push	{r7}
 800446c:	b083      	sub	sp, #12
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
 8004472:	6039      	str	r1, [r7, #0]
		if (bit) m_port->BSRR = m_pin;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d005      	beq.n	8004486 <_ZN10DigitalOutaSEi+0x1c>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	6852      	ldr	r2, [r2, #4]
 8004482:	619a      	str	r2, [r3, #24]
		else     m_port->BRR  = m_pin;
	}
 8004484:	e004      	b.n	8004490 <_ZN10DigitalOutaSEi+0x26>
		else     m_port->BRR  = m_pin;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6852      	ldr	r2, [r2, #4]
 800448e:	629a      	str	r2, [r3, #40]	; 0x28
	}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <_ZN3SPIC1ERK7PinNameS2_S2_S2_>:
	SPI(SPI_HandleTypeDef* hspi)
		: m_hspi(hspi), m_soft_bits(0), m_hard_bits(0)
	{
		assert_param(m_hspi != 0);
	}
	SPI(PinName const& mosi, PinName const& miso, PinName const& sclk, PinName const& ssel = NC)
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	603b      	str	r3, [r7, #0]
		: m_hspi((SPI_HandleTypeDef*)mosi.m_obj), m_soft_bits(0), m_hard_bits(0)
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	689a      	ldr	r2, [r3, #8]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	601a      	str	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	605a      	str	r2, [r3, #4]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	609a      	str	r2, [r3, #8]
	{
		assert_param(mosi.m_obj == miso.m_obj);
		assert_param(mosi.m_obj == sclk.m_obj);
		assert_param(m_hspi != 0);
	}
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	4618      	mov	r0, r3
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <_ZN3SPI6formatEii>:
	void enable()
	{
		__HAL_SPI_ENABLE(m_hspi);
	}
	void format(int bits, int mode = 0)
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
	{
		m_soft_bits = bits;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	68ba      	ldr	r2, [r7, #8]
 80044dc:	605a      	str	r2, [r3, #4]
		m_hard_bits = (m_hspi->Init.DataSize >> 8) + 1;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	0a1b      	lsrs	r3, r3, #8
 80044e6:	3301      	adds	r3, #1
 80044e8:	461a      	mov	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	609a      	str	r2, [r3, #8]
		assert_param(m_soft_bits >= m_hard_bits);
		// The mode must be configured outside of this adaptor
	}
 80044ee:	bf00      	nop
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <_ZN3SPI9frequencyEi>:
	void frequency(int hz = 0)
 80044fa:	b480      	push	{r7}
 80044fc:	b083      	sub	sp, #12
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
 8004502:	6039      	str	r1, [r7, #0]
	{
		// Must be configured outside of this adaptor
	}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <_ZN3SPI5writeEi>:
	int write(int value)
 8004510:	b480      	push	{r7}
 8004512:	b08b      	sub	sp, #44	; 0x2c
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
	{
		int rx, wide = m_soft_bits > 8, swap = wide && m_hard_bits <= 8;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2b08      	cmp	r3, #8
 8004520:	bfcc      	ite	gt
 8004522:	2301      	movgt	r3, #1
 8004524:	2300      	movle	r3, #0
 8004526:	b2db      	uxtb	r3, r3
 8004528:	623b      	str	r3, [r7, #32]
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d005      	beq.n	800453c <_ZN3SPI5writeEi+0x2c>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	2b08      	cmp	r3, #8
 8004536:	dc01      	bgt.n	800453c <_ZN3SPI5writeEi+0x2c>
 8004538:	2301      	movs	r3, #1
 800453a:	e000      	b.n	800453e <_ZN3SPI5writeEi+0x2e>
 800453c:	2300      	movs	r3, #0
 800453e:	61fb      	str	r3, [r7, #28]
		assert_param(m_hard_bits);
		if (wide) {
 8004540:	6a3b      	ldr	r3, [r7, #32]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d017      	beq.n	8004576 <_ZN3SPI5writeEi+0x66>
			if (swap)
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00c      	beq.n	8004566 <_ZN3SPI5writeEi+0x56>
				*(__IO uint16_t*)&m_hspi->Instance->DR = (uint16_t)__REV16(value);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	ba5b      	rev16	r3, r3
 8004554:	617b      	str	r3, [r7, #20]
  return result;
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	330c      	adds	r3, #12
 8004560:	b292      	uxth	r2, r2
 8004562:	801a      	strh	r2, [r3, #0]
 8004564:	e00e      	b.n	8004584 <_ZN3SPI5writeEi+0x74>
			else
				*(__IO uint16_t*)&m_hspi->Instance->DR = (uint16_t)value;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	330c      	adds	r3, #12
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	b292      	uxth	r2, r2
 8004572:	801a      	strh	r2, [r3, #0]
 8004574:	e006      	b.n	8004584 <_ZN3SPI5writeEi+0x74>
		} else {
			*(__IO uint8_t*)&m_hspi->Instance->DR = (uint8_t)value;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	330c      	adds	r3, #12
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	b2d2      	uxtb	r2, r2
 8004582:	701a      	strb	r2, [r3, #0]
		}
		while (m_hspi->Instance->SR & SPI_FLAG_BSY);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004590:	2b00      	cmp	r3, #0
 8004592:	bf14      	ite	ne
 8004594:	2301      	movne	r3, #1
 8004596:	2300      	moveq	r3, #0
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d000      	beq.n	80045a0 <_ZN3SPI5writeEi+0x90>
 800459e:	e7f1      	b.n	8004584 <_ZN3SPI5writeEi+0x74>
		if (wide) {
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d017      	beq.n	80045d6 <_ZN3SPI5writeEi+0xc6>
			if (swap)
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00c      	beq.n	80045c6 <_ZN3SPI5writeEi+0xb6>
				rx = __REV16(*(__IO uint16_t*)&m_hspi->Instance->DR);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	330c      	adds	r3, #12
 80045b4:	881b      	ldrh	r3, [r3, #0]
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	ba5b      	rev16	r3, r3
 80045be:	60fb      	str	r3, [r7, #12]
  return result;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	627b      	str	r3, [r7, #36]	; 0x24
 80045c4:	e00e      	b.n	80045e4 <_ZN3SPI5writeEi+0xd4>
			else
				rx = *(__IO uint16_t*)&m_hspi->Instance->DR;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	330c      	adds	r3, #12
 80045ce:	881b      	ldrh	r3, [r3, #0]
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	627b      	str	r3, [r7, #36]	; 0x24
 80045d4:	e006      	b.n	80045e4 <_ZN3SPI5writeEi+0xd4>
		} else {
			rx = *(__IO uint8_t*)&m_hspi->Instance->DR;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	330c      	adds	r3, #12
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	627b      	str	r3, [r7, #36]	; 0x24
		}
		return rx;
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80045e6:	4618      	mov	r0, r3
 80045e8:	372c      	adds	r7, #44	; 0x2c
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
	...

080045f4 <_ZL7wait_usj>:
#pragma once

#include "../../../Drivers/ILI9341_Display_Driver/compat/platform.h"

static inline void wait_us(unsigned t)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b087      	sub	sp, #28
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
	int curr = SysTick->VAL, last = curr;
 80045fc:	4b15      	ldr	r3, [pc, #84]	; (8004654 <_ZL7wait_usj+0x60>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	617b      	str	r3, [r7, #20]
	int deadline = curr - (SystemCoreClock / 1000000) * t;
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	4b13      	ldr	r3, [pc, #76]	; (8004658 <_ZL7wait_usj+0x64>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4913      	ldr	r1, [pc, #76]	; (800465c <_ZL7wait_usj+0x68>)
 800460e:	fba1 1303 	umull	r1, r3, r1, r3
 8004612:	0c9b      	lsrs	r3, r3, #18
 8004614:	6879      	ldr	r1, [r7, #4]
 8004616:	fb01 f303 	mul.w	r3, r1, r3
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	613b      	str	r3, [r7, #16]
	for (;;) {
		curr = SysTick->VAL;
 800461e:	4b0d      	ldr	r3, [pc, #52]	; (8004654 <_ZL7wait_usj+0x60>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	60fb      	str	r3, [r7, #12]
		if (curr > last) {
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	429a      	cmp	r2, r3
 800462a:	dd04      	ble.n	8004636 <_ZL7wait_usj+0x42>
			deadline += SysTick->LOAD;
 800462c:	4b09      	ldr	r3, [pc, #36]	; (8004654 <_ZL7wait_usj+0x60>)
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	4413      	add	r3, r2
 8004634:	613b      	str	r3, [r7, #16]
		}
		if (curr < deadline) {
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	429a      	cmp	r2, r3
 800463c:	db02      	blt.n	8004644 <_ZL7wait_usj+0x50>
			break;
		}
		last = curr;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	617b      	str	r3, [r7, #20]
		curr = SysTick->VAL;
 8004642:	e7ec      	b.n	800461e <_ZL7wait_usj+0x2a>
			break;
 8004644:	bf00      	nop
	}
}
 8004646:	bf00      	nop
 8004648:	371c      	adds	r7, #28
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	e000e010 	.word	0xe000e010
 8004658:	20000068 	.word	0x20000068
 800465c:	431bde83 	.word	0x431bde83

08004660 <_ZL7wait_msj>:

static inline void wait_ms(unsigned t)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
	HAL_Delay(t);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f001 f9b5 	bl	80059d8 <HAL_Delay>
}
 800466e:	bf00      	nop
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
	...

08004678 <_ZN15SPI_TFT_ILI9341C1E7PinNameS0_S0_S0_S0_S0_PKc>:
#define BPP         16                  // Bits per pixel    
         
//extern Serial pc;
//extern DigitalOut xx;     // debug !!

SPI_TFT_ILI9341::SPI_TFT_ILI9341(PinName mosi, PinName miso, PinName sclk, PinName cs, PinName reset, PinName dc, const char *name)
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af02      	add	r7, sp, #8
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	4638      	mov	r0, r7
 8004682:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    : GraphicsDisplay(name), SPI(mosi, miso, sclk,NC), _cs(cs), _reset(reset), _dc(dc)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800468a:	4618      	mov	r0, r3
 800468c:	f7ff fd38 	bl	8004100 <_ZN15GraphicsDisplayC1EPKc>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f103 001c 	add.w	r0, r3, #28
 8004696:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800469a:	4639      	mov	r1, r7
 800469c:	4b1e      	ldr	r3, [pc, #120]	; (8004718 <_ZN15SPI_TFT_ILI9341C1E7PinNameS0_S0_S0_S0_S0_PKc+0xa0>)
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	4613      	mov	r3, r2
 80046a2:	f107 0218 	add.w	r2, r7, #24
 80046a6:	f7ff fef9 	bl	800449c <_ZN3SPIC1ERK7PinNameS2_S2_S2_>
 80046aa:	4a1c      	ldr	r2, [pc, #112]	; (800471c <_ZN15SPI_TFT_ILI9341C1E7PinNameS0_S0_S0_S0_S0_PKc+0xa4>)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	3328      	adds	r3, #40	; 0x28
 80046b4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80046b8:	4611      	mov	r1, r2
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7ff fec1 	bl	8004442 <_ZN10DigitalOutC1ERK7PinName>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	3330      	adds	r3, #48	; 0x30
 80046c4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80046c8:	4611      	mov	r1, r2
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7ff feb9 	bl	8004442 <_ZN10DigitalOutC1ERK7PinName>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	3338      	adds	r3, #56	; 0x38
 80046d4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80046d8:	4611      	mov	r1, r2
 80046da:	4618      	mov	r0, r3
 80046dc:	f7ff feb1 	bl	8004442 <_ZN10DigitalOutC1ERK7PinName>
{
    
    orientation = 0;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	649a      	str	r2, [r3, #72]	; 0x48
    char_x = 0;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	64da      	str	r2, [r3, #76]	; 0x4c
    SPI::format(8,3);                  // 8 bit spi mode 3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	331c      	adds	r3, #28
 80046f0:	2203      	movs	r2, #3
 80046f2:	2108      	movs	r1, #8
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff fee9 	bl	80044cc <_ZN3SPI6formatEii>
    SPI::frequency(10000000);          // 10 Mhz SPI clock
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	331c      	adds	r3, #28
 80046fe:	4908      	ldr	r1, [pc, #32]	; (8004720 <_ZN15SPI_TFT_ILI9341C1E7PinNameS0_S0_S0_S0_S0_PKc+0xa8>)
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff fefa 	bl	80044fa <_ZN3SPI9frequencyEi>
    tft_reset();
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 f8a1 	bl	800484e <_ZN15SPI_TFT_ILI93419tft_resetEv>
}
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	20000430 	.word	0x20000430
 800471c:	08017f80 	.word	0x08017f80
 8004720:	00989680 	.word	0x00989680

08004724 <_ZN15SPI_TFT_ILI93415widthEv>:

int SPI_TFT_ILI9341::width()
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
    if (orientation == 0 || orientation == 2) return 240;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <_ZN15SPI_TFT_ILI93415widthEv+0x18>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004738:	2b02      	cmp	r3, #2
 800473a:	d101      	bne.n	8004740 <_ZN15SPI_TFT_ILI93415widthEv+0x1c>
 800473c:	23f0      	movs	r3, #240	; 0xf0
 800473e:	e001      	b.n	8004744 <_ZN15SPI_TFT_ILI93415widthEv+0x20>
    else return 320;
 8004740:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8004744:	4618      	mov	r0, r3
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <_ZN15SPI_TFT_ILI93416heightEv>:


int SPI_TFT_ILI9341::height()
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
    if (orientation == 0 || orientation == 2) return 320;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <_ZN15SPI_TFT_ILI93416heightEv+0x18>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004764:	2b02      	cmp	r3, #2
 8004766:	d102      	bne.n	800476e <_ZN15SPI_TFT_ILI93416heightEv+0x1e>
 8004768:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800476c:	e000      	b.n	8004770 <_ZN15SPI_TFT_ILI93416heightEv+0x20>
    else return 240;
 800476e:	23f0      	movs	r3, #240	; 0xf0
}
 8004770:	4618      	mov	r0, r3
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <_ZN15SPI_TFT_ILI934115set_orientationEj>:


void SPI_TFT_ILI9341::set_orientation(unsigned int o)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
    orientation = o;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	649a      	str	r2, [r3, #72]	; 0x48
    wr_cmd(0x36);                     // MEMORY_ACCESS_CONTROL
 800478c:	2136      	movs	r1, #54	; 0x36
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f83a 	bl	8004808 <_ZN15SPI_TFT_ILI93416wr_cmdEh>
    switch (orientation) {
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004798:	2b03      	cmp	r3, #3
 800479a:	d827      	bhi.n	80047ec <_ZN15SPI_TFT_ILI934115set_orientationEj+0x70>
 800479c:	a201      	add	r2, pc, #4	; (adr r2, 80047a4 <_ZN15SPI_TFT_ILI934115set_orientationEj+0x28>)
 800479e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a2:	bf00      	nop
 80047a4:	080047b5 	.word	0x080047b5
 80047a8:	080047c3 	.word	0x080047c3
 80047ac:	080047d1 	.word	0x080047d1
 80047b0:	080047df 	.word	0x080047df
        case 0:
            SPI::write(0x48);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	331c      	adds	r3, #28
 80047b8:	2148      	movs	r1, #72	; 0x48
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff fea8 	bl	8004510 <_ZN3SPI5writeEi>
            break;
 80047c0:	e014      	b.n	80047ec <_ZN15SPI_TFT_ILI934115set_orientationEj+0x70>
        case 1:
            SPI::write(0x28);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	331c      	adds	r3, #28
 80047c6:	2128      	movs	r1, #40	; 0x28
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff fea1 	bl	8004510 <_ZN3SPI5writeEi>
            break;
 80047ce:	e00d      	b.n	80047ec <_ZN15SPI_TFT_ILI934115set_orientationEj+0x70>
        case 2:
            SPI::write(0x88);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	331c      	adds	r3, #28
 80047d4:	2188      	movs	r1, #136	; 0x88
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7ff fe9a 	bl	8004510 <_ZN3SPI5writeEi>
            break;
 80047dc:	e006      	b.n	80047ec <_ZN15SPI_TFT_ILI934115set_orientationEj+0x70>
        case 3:
            SPI::write(0xE8);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	331c      	adds	r3, #28
 80047e2:	21e8      	movs	r1, #232	; 0xe8
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7ff fe93 	bl	8004510 <_ZN3SPI5writeEi>
            break;
 80047ea:	bf00      	nop
    }
    _cs = 1; 
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3328      	adds	r3, #40	; 0x28
 80047f0:	2101      	movs	r1, #1
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7ff fe39 	bl	800446a <_ZN10DigitalOutaSEi>
    WindowMax();
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 fb78 	bl	8004eee <_ZN15SPI_TFT_ILI93419WindowMaxEv>
} 
 80047fe:	bf00      	nop
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop

08004808 <_ZN15SPI_TFT_ILI93416wr_cmdEh>:


// write command to tft register

void SPI_TFT_ILI9341::wr_cmd(unsigned char cmd)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	460b      	mov	r3, r1
 8004812:	70fb      	strb	r3, [r7, #3]
    _dc = 0;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	3338      	adds	r3, #56	; 0x38
 8004818:	2100      	movs	r1, #0
 800481a:	4618      	mov	r0, r3
 800481c:	f7ff fe25 	bl	800446a <_ZN10DigitalOutaSEi>
    _cs = 0;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	3328      	adds	r3, #40	; 0x28
 8004824:	2100      	movs	r1, #0
 8004826:	4618      	mov	r0, r3
 8004828:	f7ff fe1f 	bl	800446a <_ZN10DigitalOutaSEi>
    SPI::write(cmd);      // mbed lib
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	331c      	adds	r3, #28
 8004830:	78fa      	ldrb	r2, [r7, #3]
 8004832:	4611      	mov	r1, r2
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff fe6b 	bl	8004510 <_ZN3SPI5writeEi>
    _dc = 1;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3338      	adds	r3, #56	; 0x38
 800483e:	2101      	movs	r1, #1
 8004840:	4618      	mov	r0, r3
 8004842:	f7ff fe12 	bl	800446a <_ZN10DigitalOutaSEi>
}
 8004846:	bf00      	nop
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <_ZN15SPI_TFT_ILI93419tft_resetEv>:


// Init code based on MI0283QT datasheet

void SPI_TFT_ILI9341::tft_reset()
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b082      	sub	sp, #8
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
    _cs = 1;                           // cs high
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	3328      	adds	r3, #40	; 0x28
 800485a:	2101      	movs	r1, #1
 800485c:	4618      	mov	r0, r3
 800485e:	f7ff fe04 	bl	800446a <_ZN10DigitalOutaSEi>
    _dc = 1;                           // dc high 
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	3338      	adds	r3, #56	; 0x38
 8004866:	2101      	movs	r1, #1
 8004868:	4618      	mov	r0, r3
 800486a:	f7ff fdfe 	bl	800446a <_ZN10DigitalOutaSEi>
    _reset = 0;                        // display reset
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	3330      	adds	r3, #48	; 0x30
 8004872:	2100      	movs	r1, #0
 8004874:	4618      	mov	r0, r3
 8004876:	f7ff fdf8 	bl	800446a <_ZN10DigitalOutaSEi>

    wait_us(50);
 800487a:	2032      	movs	r0, #50	; 0x32
 800487c:	f7ff feba 	bl	80045f4 <_ZL7wait_usj>
    _reset = 1;                       // end hardware reset
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3330      	adds	r3, #48	; 0x30
 8004884:	2101      	movs	r1, #1
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff fdef 	bl	800446a <_ZN10DigitalOutaSEi>
    wait_ms(5);
 800488c:	2005      	movs	r0, #5
 800488e:	f7ff fee7 	bl	8004660 <_ZL7wait_msj>
     
    wr_cmd(0x01);                     // SW reset  
 8004892:	2101      	movs	r1, #1
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f7ff ffb7 	bl	8004808 <_ZN15SPI_TFT_ILI93416wr_cmdEh>
    wait_ms(5);
 800489a:	2005      	movs	r0, #5
 800489c:	f7ff fee0 	bl	8004660 <_ZL7wait_msj>
    wr_cmd(0x28);                     // display off  
 80048a0:	2128      	movs	r1, #40	; 0x28
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7ff ffb0 	bl	8004808 <_ZN15SPI_TFT_ILI93416wr_cmdEh>

    /* Start Initial Sequence ----------------------------------------------------*/
     wr_cmd(0xCF);                     
 80048a8:	21cf      	movs	r1, #207	; 0xcf
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7ff ffac 	bl	8004808 <_ZN15SPI_TFT_ILI93416wr_cmdEh>
     SPI::write(0x00);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	331c      	adds	r3, #28
 80048b4:	2100      	movs	r1, #0
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff fe2a 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x83);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	331c      	adds	r3, #28
 80048c0:	2183      	movs	r1, #131	; 0x83
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7ff fe24 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x30);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	331c      	adds	r3, #28
 80048cc:	2130      	movs	r1, #48	; 0x30
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7ff fe1e 	bl	8004510 <_ZN3SPI5writeEi>
     _cs = 1;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	3328      	adds	r3, #40	; 0x28
 80048d8:	2101      	movs	r1, #1
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff fdc5 	bl	800446a <_ZN10DigitalOutaSEi>
     
     wr_cmd(0xED);                     
 80048e0:	21ed      	movs	r1, #237	; 0xed
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7ff ff90 	bl	8004808 <_ZN15SPI_TFT_ILI93416wr_cmdEh>
     SPI::write(0x64);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	331c      	adds	r3, #28
 80048ec:	2164      	movs	r1, #100	; 0x64
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7ff fe0e 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x03);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	331c      	adds	r3, #28
 80048f8:	2103      	movs	r1, #3
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7ff fe08 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x12);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	331c      	adds	r3, #28
 8004904:	2112      	movs	r1, #18
 8004906:	4618      	mov	r0, r3
 8004908:	f7ff fe02 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x81);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	331c      	adds	r3, #28
 8004910:	2181      	movs	r1, #129	; 0x81
 8004912:	4618      	mov	r0, r3
 8004914:	f7ff fdfc 	bl	8004510 <_ZN3SPI5writeEi>
     _cs = 1;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3328      	adds	r3, #40	; 0x28
 800491c:	2101      	movs	r1, #1
 800491e:	4618      	mov	r0, r3
 8004920:	f7ff fda3 	bl	800446a <_ZN10DigitalOutaSEi>
     
     wr_cmd(0xE8);                     
 8004924:	21e8      	movs	r1, #232	; 0xe8
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7ff ff6e 	bl	8004808 <_ZN15SPI_TFT_ILI93416wr_cmdEh>
     SPI::write(0x85);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	331c      	adds	r3, #28
 8004930:	2185      	movs	r1, #133	; 0x85
 8004932:	4618      	mov	r0, r3
 8004934:	f7ff fdec 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x01);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	331c      	adds	r3, #28
 800493c:	2101      	movs	r1, #1
 800493e:	4618      	mov	r0, r3
 8004940:	f7ff fde6 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x79);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	331c      	adds	r3, #28
 8004948:	2179      	movs	r1, #121	; 0x79
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff fde0 	bl	8004510 <_ZN3SPI5writeEi>
     _cs = 1;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	3328      	adds	r3, #40	; 0x28
 8004954:	2101      	movs	r1, #1
 8004956:	4618      	mov	r0, r3
 8004958:	f7ff fd87 	bl	800446a <_ZN10DigitalOutaSEi>
     
     wr_cmd(0xCB);                     
 800495c:	21cb      	movs	r1, #203	; 0xcb
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7ff ff52 	bl	8004808 <_ZN15SPI_TFT_ILI93416wr_cmdEh>
     SPI::write(0x39);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	331c      	adds	r3, #28
 8004968:	2139      	movs	r1, #57	; 0x39
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff fdd0 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x2C);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	331c      	adds	r3, #28
 8004974:	212c      	movs	r1, #44	; 0x2c
 8004976:	4618      	mov	r0, r3
 8004978:	f7ff fdca 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x00);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	331c      	adds	r3, #28
 8004980:	2100      	movs	r1, #0
 8004982:	4618      	mov	r0, r3
 8004984:	f7ff fdc4 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x34);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	331c      	adds	r3, #28
 800498c:	2134      	movs	r1, #52	; 0x34
 800498e:	4618      	mov	r0, r3
 8004990:	f7ff fdbe 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x02);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	331c      	adds	r3, #28
 8004998:	2102      	movs	r1, #2
 800499a:	4618      	mov	r0, r3
 800499c:	f7ff fdb8 	bl	8004510 <_ZN3SPI5writeEi>
     _cs = 1;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	3328      	adds	r3, #40	; 0x28
 80049a4:	2101      	movs	r1, #1
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff fd5f 	bl	800446a <_ZN10DigitalOutaSEi>
           
     wr_cmd(0xF7);                     
 80049ac:	21f7      	movs	r1, #247	; 0xf7
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7ff ff2a 	bl	8004808 <_ZN15SPI_TFT_ILI93416wr_cmdEh>
     SPI::write(0x20);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	331c      	adds	r3, #28
 80049b8:	2120      	movs	r1, #32
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff fda8 	bl	8004510 <_ZN3SPI5writeEi>
     _cs = 1;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	3328      	adds	r3, #40	; 0x28
 80049c4:	2101      	movs	r1, #1
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7ff fd4f 	bl	800446a <_ZN10DigitalOutaSEi>
           
     wr_cmd(0xEA);                     
 80049cc:	21ea      	movs	r1, #234	; 0xea
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7ff ff1a 	bl	8004808 <_ZN15SPI_TFT_ILI93416wr_cmdEh>
     SPI::write(0x00);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	331c      	adds	r3, #28
 80049d8:	2100      	movs	r1, #0
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff fd98 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x00);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	331c      	adds	r3, #28
 80049e4:	2100      	movs	r1, #0
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7ff fd92 	bl	8004510 <_ZN3SPI5writeEi>
     _cs = 1;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	3328      	adds	r3, #40	; 0x28
 80049f0:	2101      	movs	r1, #1
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7ff fd39 	bl	800446a <_ZN10DigitalOutaSEi>
     
     wr_cmd(0xC0);                     // POWER_CONTROL_1
 80049f8:	21c0      	movs	r1, #192	; 0xc0
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7ff ff04 	bl	8004808 <_ZN15SPI_TFT_ILI93416wr_cmdEh>
     SPI::write(0x26);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	331c      	adds	r3, #28
 8004a04:	2126      	movs	r1, #38	; 0x26
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff fd82 	bl	8004510 <_ZN3SPI5writeEi>
     _cs = 1;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3328      	adds	r3, #40	; 0x28
 8004a10:	2101      	movs	r1, #1
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7ff fd29 	bl	800446a <_ZN10DigitalOutaSEi>
 
     wr_cmd(0xC1);                     // POWER_CONTROL_2
 8004a18:	21c1      	movs	r1, #193	; 0xc1
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7ff fef4 	bl	8004808 <_ZN15SPI_TFT_ILI93416wr_cmdEh>
     SPI::write(0x11);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	331c      	adds	r3, #28
 8004a24:	2111      	movs	r1, #17
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7ff fd72 	bl	8004510 <_ZN3SPI5writeEi>
     _cs = 1;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3328      	adds	r3, #40	; 0x28
 8004a30:	2101      	movs	r1, #1
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7ff fd19 	bl	800446a <_ZN10DigitalOutaSEi>
     
     wr_cmd(0xC5);                     // VCOM_CONTROL_1
 8004a38:	21c5      	movs	r1, #197	; 0xc5
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7ff fee4 	bl	8004808 <_ZN15SPI_TFT_ILI93416wr_cmdEh>
     SPI::write(0x35);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	331c      	adds	r3, #28
 8004a44:	2135      	movs	r1, #53	; 0x35
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7ff fd62 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x3E);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	331c      	adds	r3, #28
 8004a50:	213e      	movs	r1, #62	; 0x3e
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7ff fd5c 	bl	8004510 <_ZN3SPI5writeEi>
     _cs = 1;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	3328      	adds	r3, #40	; 0x28
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7ff fd03 	bl	800446a <_ZN10DigitalOutaSEi>
     
     wr_cmd(0xC7);                     // VCOM_CONTROL_2
 8004a64:	21c7      	movs	r1, #199	; 0xc7
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7ff fece 	bl	8004808 <_ZN15SPI_TFT_ILI93416wr_cmdEh>
     SPI::write(0xBE);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	331c      	adds	r3, #28
 8004a70:	21be      	movs	r1, #190	; 0xbe
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7ff fd4c 	bl	8004510 <_ZN3SPI5writeEi>
     _cs = 1; 
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3328      	adds	r3, #40	; 0x28
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7ff fcf3 	bl	800446a <_ZN10DigitalOutaSEi>
     
     wr_cmd(0x36);                     // MEMORY_ACCESS_CONTROL
 8004a84:	2136      	movs	r1, #54	; 0x36
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7ff febe 	bl	8004808 <_ZN15SPI_TFT_ILI93416wr_cmdEh>
     SPI::write(0x48);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	331c      	adds	r3, #28
 8004a90:	2148      	movs	r1, #72	; 0x48
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7ff fd3c 	bl	8004510 <_ZN3SPI5writeEi>
     _cs = 1; 
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3328      	adds	r3, #40	; 0x28
 8004a9c:	2101      	movs	r1, #1
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7ff fce3 	bl	800446a <_ZN10DigitalOutaSEi>
     
     wr_cmd(0x3A);                     // COLMOD_PIXEL_FORMAT_SET
 8004aa4:	213a      	movs	r1, #58	; 0x3a
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7ff feae 	bl	8004808 <_ZN15SPI_TFT_ILI93416wr_cmdEh>
     SPI::write(0x55);                 // 16 bit pixel 
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	331c      	adds	r3, #28
 8004ab0:	2155      	movs	r1, #85	; 0x55
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7ff fd2c 	bl	8004510 <_ZN3SPI5writeEi>
     _cs = 1;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3328      	adds	r3, #40	; 0x28
 8004abc:	2101      	movs	r1, #1
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7ff fcd3 	bl	800446a <_ZN10DigitalOutaSEi>
     
     wr_cmd(0xB1);                     // Frame Rate
 8004ac4:	21b1      	movs	r1, #177	; 0xb1
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7ff fe9e 	bl	8004808 <_ZN15SPI_TFT_ILI93416wr_cmdEh>
     SPI::write(0x00);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	331c      	adds	r3, #28
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7ff fd1c 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x1B);               
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	331c      	adds	r3, #28
 8004adc:	211b      	movs	r1, #27
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7ff fd16 	bl	8004510 <_ZN3SPI5writeEi>
     _cs = 1;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3328      	adds	r3, #40	; 0x28
 8004ae8:	2101      	movs	r1, #1
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7ff fcbd 	bl	800446a <_ZN10DigitalOutaSEi>
     
     wr_cmd(0xF2);                     // Gamma Function Disable
 8004af0:	21f2      	movs	r1, #242	; 0xf2
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7ff fe88 	bl	8004808 <_ZN15SPI_TFT_ILI93416wr_cmdEh>
     SPI::write(0x08);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	331c      	adds	r3, #28
 8004afc:	2108      	movs	r1, #8
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7ff fd06 	bl	8004510 <_ZN3SPI5writeEi>
     _cs = 1; 
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3328      	adds	r3, #40	; 0x28
 8004b08:	2101      	movs	r1, #1
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7ff fcad 	bl	800446a <_ZN10DigitalOutaSEi>
     
     wr_cmd(0x26);                     
 8004b10:	2126      	movs	r1, #38	; 0x26
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f7ff fe78 	bl	8004808 <_ZN15SPI_TFT_ILI93416wr_cmdEh>
     SPI::write(0x01);                 // gamma set for curve 01/2/04/08
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	331c      	adds	r3, #28
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7ff fcf6 	bl	8004510 <_ZN3SPI5writeEi>
     _cs = 1; 
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	3328      	adds	r3, #40	; 0x28
 8004b28:	2101      	movs	r1, #1
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7ff fc9d 	bl	800446a <_ZN10DigitalOutaSEi>
     
     wr_cmd(0xE0);                     // positive gamma correction
 8004b30:	21e0      	movs	r1, #224	; 0xe0
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7ff fe68 	bl	8004808 <_ZN15SPI_TFT_ILI93416wr_cmdEh>
     SPI::write(0x1F); 
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	331c      	adds	r3, #28
 8004b3c:	211f      	movs	r1, #31
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7ff fce6 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x1A); 
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	331c      	adds	r3, #28
 8004b48:	211a      	movs	r1, #26
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7ff fce0 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x18); 
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	331c      	adds	r3, #28
 8004b54:	2118      	movs	r1, #24
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7ff fcda 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x0A); 
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	331c      	adds	r3, #28
 8004b60:	210a      	movs	r1, #10
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7ff fcd4 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x0F); 
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	331c      	adds	r3, #28
 8004b6c:	210f      	movs	r1, #15
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7ff fcce 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x06); 
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	331c      	adds	r3, #28
 8004b78:	2106      	movs	r1, #6
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff fcc8 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x45); 
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	331c      	adds	r3, #28
 8004b84:	2145      	movs	r1, #69	; 0x45
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7ff fcc2 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x87); 
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	331c      	adds	r3, #28
 8004b90:	2187      	movs	r1, #135	; 0x87
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7ff fcbc 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x32); 
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	331c      	adds	r3, #28
 8004b9c:	2132      	movs	r1, #50	; 0x32
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7ff fcb6 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x0A); 
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	331c      	adds	r3, #28
 8004ba8:	210a      	movs	r1, #10
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff fcb0 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x07); 
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	331c      	adds	r3, #28
 8004bb4:	2107      	movs	r1, #7
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff fcaa 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x02); 
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	331c      	adds	r3, #28
 8004bc0:	2102      	movs	r1, #2
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7ff fca4 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x07);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	331c      	adds	r3, #28
 8004bcc:	2107      	movs	r1, #7
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7ff fc9e 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x05); 
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	331c      	adds	r3, #28
 8004bd8:	2105      	movs	r1, #5
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7ff fc98 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x00);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	331c      	adds	r3, #28
 8004be4:	2100      	movs	r1, #0
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7ff fc92 	bl	8004510 <_ZN3SPI5writeEi>
     _cs = 1;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3328      	adds	r3, #40	; 0x28
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7ff fc39 	bl	800446a <_ZN10DigitalOutaSEi>
     
     wr_cmd(0xE1);                     // negativ gamma correction
 8004bf8:	21e1      	movs	r1, #225	; 0xe1
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7ff fe04 	bl	8004808 <_ZN15SPI_TFT_ILI93416wr_cmdEh>
     SPI::write(0x00); 
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	331c      	adds	r3, #28
 8004c04:	2100      	movs	r1, #0
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7ff fc82 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x25); 
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	331c      	adds	r3, #28
 8004c10:	2125      	movs	r1, #37	; 0x25
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7ff fc7c 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x27); 
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	331c      	adds	r3, #28
 8004c1c:	2127      	movs	r1, #39	; 0x27
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7ff fc76 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x05); 
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	331c      	adds	r3, #28
 8004c28:	2105      	movs	r1, #5
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7ff fc70 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x10); 
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	331c      	adds	r3, #28
 8004c34:	2110      	movs	r1, #16
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7ff fc6a 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x09); 
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	331c      	adds	r3, #28
 8004c40:	2109      	movs	r1, #9
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7ff fc64 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x3A); 
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	331c      	adds	r3, #28
 8004c4c:	213a      	movs	r1, #58	; 0x3a
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7ff fc5e 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x78); 
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	331c      	adds	r3, #28
 8004c58:	2178      	movs	r1, #120	; 0x78
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7ff fc58 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x4D); 
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	331c      	adds	r3, #28
 8004c64:	214d      	movs	r1, #77	; 0x4d
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7ff fc52 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x05); 
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	331c      	adds	r3, #28
 8004c70:	2105      	movs	r1, #5
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7ff fc4c 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x18); 
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	331c      	adds	r3, #28
 8004c7c:	2118      	movs	r1, #24
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7ff fc46 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x0D); 
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	331c      	adds	r3, #28
 8004c88:	210d      	movs	r1, #13
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7ff fc40 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x38);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	331c      	adds	r3, #28
 8004c94:	2138      	movs	r1, #56	; 0x38
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7ff fc3a 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x3A); 
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	331c      	adds	r3, #28
 8004ca0:	213a      	movs	r1, #58	; 0x3a
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7ff fc34 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x1F);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	331c      	adds	r3, #28
 8004cac:	211f      	movs	r1, #31
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7ff fc2e 	bl	8004510 <_ZN3SPI5writeEi>
     _cs = 1;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	3328      	adds	r3, #40	; 0x28
 8004cb8:	2101      	movs	r1, #1
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7ff fbd5 	bl	800446a <_ZN10DigitalOutaSEi>
     
     WindowMax ();
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f914 	bl	8004eee <_ZN15SPI_TFT_ILI93419WindowMaxEv>
     //_cs = 1;
     
     //wr_cmd(0x35);                     // tearing effect on
     //_cs = 1;
      
     wr_cmd(0xB7);                       // entry mode
 8004cc6:	21b7      	movs	r1, #183	; 0xb7
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f7ff fd9d 	bl	8004808 <_ZN15SPI_TFT_ILI93416wr_cmdEh>
     SPI::write(0x07);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	331c      	adds	r3, #28
 8004cd2:	2107      	movs	r1, #7
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7ff fc1b 	bl	8004510 <_ZN3SPI5writeEi>
     _cs = 1;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	3328      	adds	r3, #40	; 0x28
 8004cde:	2101      	movs	r1, #1
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7ff fbc2 	bl	800446a <_ZN10DigitalOutaSEi>
     
     wr_cmd(0xB6);                       // display function control
 8004ce6:	21b6      	movs	r1, #182	; 0xb6
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7ff fd8d 	bl	8004808 <_ZN15SPI_TFT_ILI93416wr_cmdEh>
     SPI::write(0x0A);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	331c      	adds	r3, #28
 8004cf2:	210a      	movs	r1, #10
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7ff fc0b 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x82);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	331c      	adds	r3, #28
 8004cfe:	2182      	movs	r1, #130	; 0x82
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7ff fc05 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x27);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	331c      	adds	r3, #28
 8004d0a:	2127      	movs	r1, #39	; 0x27
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7ff fbff 	bl	8004510 <_ZN3SPI5writeEi>
     SPI::write(0x00);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	331c      	adds	r3, #28
 8004d16:	2100      	movs	r1, #0
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7ff fbf9 	bl	8004510 <_ZN3SPI5writeEi>
     _cs = 1;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	3328      	adds	r3, #40	; 0x28
 8004d22:	2101      	movs	r1, #1
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7ff fba0 	bl	800446a <_ZN10DigitalOutaSEi>
     
     wr_cmd(0x11);                     // sleep out
 8004d2a:	2111      	movs	r1, #17
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f7ff fd6b 	bl	8004808 <_ZN15SPI_TFT_ILI93416wr_cmdEh>
     _cs = 1;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	3328      	adds	r3, #40	; 0x28
 8004d36:	2101      	movs	r1, #1
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7ff fb96 	bl	800446a <_ZN10DigitalOutaSEi>
     
     wait_ms(100);
 8004d3e:	2064      	movs	r0, #100	; 0x64
 8004d40:	f7ff fc8e 	bl	8004660 <_ZL7wait_msj>
     
     wr_cmd(0x29);                     // display on
 8004d44:	2129      	movs	r1, #41	; 0x29
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7ff fd5e 	bl	8004808 <_ZN15SPI_TFT_ILI93416wr_cmdEh>
     _cs = 1;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3328      	adds	r3, #40	; 0x28
 8004d50:	2101      	movs	r1, #1
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7ff fb89 	bl	800446a <_ZN10DigitalOutaSEi>
     
     wait_ms(100);
 8004d58:	2064      	movs	r0, #100	; 0x64
 8004d5a:	f7ff fc81 	bl	8004660 <_ZL7wait_msj>
     
 }
 8004d5e:	bf00      	nop
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <_ZN15SPI_TFT_ILI93415pixelEiii>:


void SPI_TFT_ILI9341::pixel(int x, int y, int color)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b084      	sub	sp, #16
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	60f8      	str	r0, [r7, #12]
 8004d6e:	60b9      	str	r1, [r7, #8]
 8004d70:	607a      	str	r2, [r7, #4]
 8004d72:	603b      	str	r3, [r7, #0]
    wr_cmd(0x2A);
 8004d74:	212a      	movs	r1, #42	; 0x2a
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f7ff fd46 	bl	8004808 <_ZN15SPI_TFT_ILI93416wr_cmdEh>
    SPI::write(x >> 8);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f103 021c 	add.w	r2, r3, #28
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	121b      	asrs	r3, r3, #8
 8004d86:	4619      	mov	r1, r3
 8004d88:	4610      	mov	r0, r2
 8004d8a:	f7ff fbc1 	bl	8004510 <_ZN3SPI5writeEi>
    SPI::write(x);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	331c      	adds	r3, #28
 8004d92:	68b9      	ldr	r1, [r7, #8]
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7ff fbbb 	bl	8004510 <_ZN3SPI5writeEi>
    _cs = 1;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	3328      	adds	r3, #40	; 0x28
 8004d9e:	2101      	movs	r1, #1
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7ff fb62 	bl	800446a <_ZN10DigitalOutaSEi>
    wr_cmd(0x2B);
 8004da6:	212b      	movs	r1, #43	; 0x2b
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f7ff fd2d 	bl	8004808 <_ZN15SPI_TFT_ILI93416wr_cmdEh>
    SPI::write(y >> 8);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f103 021c 	add.w	r2, r3, #28
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	121b      	asrs	r3, r3, #8
 8004db8:	4619      	mov	r1, r3
 8004dba:	4610      	mov	r0, r2
 8004dbc:	f7ff fba8 	bl	8004510 <_ZN3SPI5writeEi>
    SPI::write(y);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	331c      	adds	r3, #28
 8004dc4:	6879      	ldr	r1, [r7, #4]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7ff fba2 	bl	8004510 <_ZN3SPI5writeEi>
    _cs = 1;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	3328      	adds	r3, #40	; 0x28
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7ff fb49 	bl	800446a <_ZN10DigitalOutaSEi>
    wr_cmd(0x2C);  // send pixel
 8004dd8:	212c      	movs	r1, #44	; 0x2c
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f7ff fd14 	bl	8004808 <_ZN15SPI_TFT_ILI93416wr_cmdEh>
    #if defined TARGET_KL25Z  // 8 Bit SPI
    SPI::write(color >> 8);
    SPI::write(color & 0xff);
    #else 
    SPI::format(16,3);                            // switch to 16 bit Mode 3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	331c      	adds	r3, #28
 8004de4:	2203      	movs	r2, #3
 8004de6:	2110      	movs	r1, #16
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff fb6f 	bl	80044cc <_ZN3SPI6formatEii>
    SPI::write(color);                              // Write D0..D15
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	331c      	adds	r3, #28
 8004df2:	6839      	ldr	r1, [r7, #0]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7ff fb8b 	bl	8004510 <_ZN3SPI5writeEi>
    SPI::format(8,3);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	331c      	adds	r3, #28
 8004dfe:	2203      	movs	r2, #3
 8004e00:	2108      	movs	r1, #8
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7ff fb62 	bl	80044cc <_ZN3SPI6formatEii>
    #endif
    _cs = 1;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	3328      	adds	r3, #40	; 0x28
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7ff fb2b 	bl	800446a <_ZN10DigitalOutaSEi>
}
 8004e14:	bf00      	nop
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <_ZN15SPI_TFT_ILI93416windowEjjjj>:


void SPI_TFT_ILI9341::window (unsigned int x, unsigned int y, unsigned int w, unsigned int h)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
 8004e28:	603b      	str	r3, [r7, #0]
    wr_cmd(0x2A);
 8004e2a:	212a      	movs	r1, #42	; 0x2a
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f7ff fceb 	bl	8004808 <_ZN15SPI_TFT_ILI93416wr_cmdEh>
    SPI::write(x >> 8);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f103 021c 	add.w	r2, r3, #28
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	0a1b      	lsrs	r3, r3, #8
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	4610      	mov	r0, r2
 8004e40:	f7ff fb66 	bl	8004510 <_ZN3SPI5writeEi>
    SPI::write(x);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	331c      	adds	r3, #28
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	4611      	mov	r1, r2
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7ff fb5f 	bl	8004510 <_ZN3SPI5writeEi>
    SPI::write((x+w-1) >> 8);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f103 001c 	add.w	r0, r3, #28
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	0a1b      	lsrs	r3, r3, #8
 8004e62:	4619      	mov	r1, r3
 8004e64:	f7ff fb54 	bl	8004510 <_ZN3SPI5writeEi>
    SPI::write(x+w-1);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f103 001c 	add.w	r0, r3, #28
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	4413      	add	r3, r2
 8004e74:	3b01      	subs	r3, #1
 8004e76:	4619      	mov	r1, r3
 8004e78:	f7ff fb4a 	bl	8004510 <_ZN3SPI5writeEi>
    
    _cs = 1;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	3328      	adds	r3, #40	; 0x28
 8004e80:	2101      	movs	r1, #1
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7ff faf1 	bl	800446a <_ZN10DigitalOutaSEi>
    wr_cmd(0x2B);
 8004e88:	212b      	movs	r1, #43	; 0x2b
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f7ff fcbc 	bl	8004808 <_ZN15SPI_TFT_ILI93416wr_cmdEh>
    SPI::write(y >> 8);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f103 021c 	add.w	r2, r3, #28
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	0a1b      	lsrs	r3, r3, #8
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	f7ff fb37 	bl	8004510 <_ZN3SPI5writeEi>
    SPI::write(y);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	331c      	adds	r3, #28
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	4611      	mov	r1, r2
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7ff fb30 	bl	8004510 <_ZN3SPI5writeEi>
    SPI::write((y+h-1) >> 8);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f103 001c 	add.w	r0, r3, #28
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	4413      	add	r3, r2
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	0a1b      	lsrs	r3, r3, #8
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	f7ff fb25 	bl	8004510 <_ZN3SPI5writeEi>
    SPI::write(y+h-1);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f103 001c 	add.w	r0, r3, #28
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	f7ff fb1b 	bl	8004510 <_ZN3SPI5writeEi>
    _cs = 1;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	3328      	adds	r3, #40	; 0x28
 8004ede:	2101      	movs	r1, #1
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7ff fac2 	bl	800446a <_ZN10DigitalOutaSEi>
}
 8004ee6:	bf00      	nop
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <_ZN15SPI_TFT_ILI93419WindowMaxEv>:


void SPI_TFT_ILI9341::WindowMax (void)
{
 8004eee:	b5b0      	push	{r4, r5, r7, lr}
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	af02      	add	r7, sp, #8
 8004ef4:	6078      	str	r0, [r7, #4]
    window (0, 0, width(),  height());
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3334      	adds	r3, #52	; 0x34
 8004efc:	681c      	ldr	r4, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	332c      	adds	r3, #44	; 0x2c
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	4798      	blx	r3
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	461d      	mov	r5, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3330      	adds	r3, #48	; 0x30
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	4798      	blx	r3
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	462b      	mov	r3, r5
 8004f20:	2200      	movs	r2, #0
 8004f22:	2100      	movs	r1, #0
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	47a0      	blx	r4
}
 8004f28:	bf00      	nop
 8004f2a:	3708      	adds	r7, #8
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bdb0      	pop	{r4, r5, r7, pc}

08004f30 <_ZN15SPI_TFT_ILI93413clsEv>:



void SPI_TFT_ILI9341::cls (void)
{
 8004f30:	b590      	push	{r4, r7, lr}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af02      	add	r7, sp, #8
 8004f36:	6078      	str	r0, [r7, #4]
   // we can use the fillrect function 
   fillrect(0,0,width()-1,height()-1,_background);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	332c      	adds	r3, #44	; 0x2c
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	4798      	blx	r3
 8004f44:	4603      	mov	r3, r0
 8004f46:	1e5c      	subs	r4, r3, #1
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	3330      	adds	r3, #48	; 0x30
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	4798      	blx	r3
 8004f54:	4603      	mov	r3, r0
 8004f56:	3b01      	subs	r3, #1
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	8952      	ldrh	r2, [r2, #10]
 8004f5c:	9201      	str	r2, [sp, #4]
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	4623      	mov	r3, r4
 8004f62:	2200      	movs	r2, #0
 8004f64:	2100      	movs	r1, #0
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f9cc 	bl	8005304 <_ZN15SPI_TFT_ILI93418fillrectEiiiii>
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd90      	pop	{r4, r7, pc}

08004f74 <_ZN15SPI_TFT_ILI93415hlineEiiii>:
    } while (x <= 0);
}


void SPI_TFT_ILI9341::hline(int x0, int x1, int y, int color)
{
 8004f74:	b590      	push	{r4, r7, lr}
 8004f76:	b089      	sub	sp, #36	; 0x24
 8004f78:	af02      	add	r7, sp, #8
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
 8004f80:	603b      	str	r3, [r7, #0]
    int w;
    w = x1 - x0 + 1;
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	3301      	adds	r3, #1
 8004f8a:	613b      	str	r3, [r7, #16]
    window(x0,y,w,1);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3334      	adds	r3, #52	; 0x34
 8004f92:	681c      	ldr	r4, [r3, #0]
 8004f94:	68b9      	ldr	r1, [r7, #8]
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	6938      	ldr	r0, [r7, #16]
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	47a0      	blx	r4
    wr_cmd(0x2C);  // send pixel
 8004fa4:	212c      	movs	r1, #44	; 0x2c
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f7ff fc2e 	bl	8004808 <_ZN15SPI_TFT_ILI93416wr_cmdEh>
    for (j=0; j<w; j++) {
        SPI::write(color >> 8);
        SPI::write(color & 0xff);
    } 
    #else 
    SPI::format(16,3);                            // switch to 16 bit Mode 3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	331c      	adds	r3, #28
 8004fb0:	2203      	movs	r2, #3
 8004fb2:	2110      	movs	r1, #16
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7ff fa89 	bl	80044cc <_ZN3SPI6formatEii>
    int j;
    for (j=0; j<w; j++) {
 8004fba:	2300      	movs	r3, #0
 8004fbc:	617b      	str	r3, [r7, #20]
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	da09      	bge.n	8004fda <_ZN15SPI_TFT_ILI93415hlineEiiii+0x66>
        SPI::write(color);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	331c      	adds	r3, #28
 8004fca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7ff fa9f 	bl	8004510 <_ZN3SPI5writeEi>
    for (j=0; j<w; j++) {
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	e7f1      	b.n	8004fbe <_ZN15SPI_TFT_ILI93415hlineEiiii+0x4a>
    }
    SPI::format(8,3);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	331c      	adds	r3, #28
 8004fde:	2203      	movs	r2, #3
 8004fe0:	2108      	movs	r1, #8
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7ff fa72 	bl	80044cc <_ZN3SPI6formatEii>
    #endif
    _cs = 1;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	3328      	adds	r3, #40	; 0x28
 8004fec:	2101      	movs	r1, #1
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7ff fa3b 	bl	800446a <_ZN10DigitalOutaSEi>
    WindowMax();
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f7ff ff7a 	bl	8004eee <_ZN15SPI_TFT_ILI93419WindowMaxEv>
    return;
 8004ffa:	bf00      	nop
}
 8004ffc:	371c      	adds	r7, #28
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd90      	pop	{r4, r7, pc}

08005002 <_ZN15SPI_TFT_ILI93415vlineEiiii>:

void SPI_TFT_ILI9341::vline(int x, int y0, int y1, int color)
{
 8005002:	b590      	push	{r4, r7, lr}
 8005004:	b089      	sub	sp, #36	; 0x24
 8005006:	af02      	add	r7, sp, #8
 8005008:	60f8      	str	r0, [r7, #12]
 800500a:	60b9      	str	r1, [r7, #8]
 800500c:	607a      	str	r2, [r7, #4]
 800500e:	603b      	str	r3, [r7, #0]
    int h;
    h = y1 - y0 + 1;
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	3301      	adds	r3, #1
 8005018:	613b      	str	r3, [r7, #16]
    window(x,y0,1,h);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	3334      	adds	r3, #52	; 0x34
 8005020:	681c      	ldr	r4, [r3, #0]
 8005022:	68b9      	ldr	r1, [r7, #8]
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	2301      	movs	r3, #1
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	47a0      	blx	r4
    wr_cmd(0x2C);  // send pixel
 8005030:	212c      	movs	r1, #44	; 0x2c
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f7ff fbe8 	bl	8004808 <_ZN15SPI_TFT_ILI93416wr_cmdEh>
    for (int y=0; y<h; y++) {
        SPI::write(color >> 8);
        SPI::write(color & 0xff);
    } 
    #else 
    SPI::format(16,3);                            // switch to 16 bit Mode 3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	331c      	adds	r3, #28
 800503c:	2203      	movs	r2, #3
 800503e:	2110      	movs	r1, #16
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff fa43 	bl	80044cc <_ZN3SPI6formatEii>
    for (int y=0; y<h; y++) {
 8005046:	2300      	movs	r3, #0
 8005048:	617b      	str	r3, [r7, #20]
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	429a      	cmp	r2, r3
 8005050:	da09      	bge.n	8005066 <_ZN15SPI_TFT_ILI93415vlineEiiii+0x64>
        SPI::write(color);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	331c      	adds	r3, #28
 8005056:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005058:	4618      	mov	r0, r3
 800505a:	f7ff fa59 	bl	8004510 <_ZN3SPI5writeEi>
    for (int y=0; y<h; y++) {
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	3301      	adds	r3, #1
 8005062:	617b      	str	r3, [r7, #20]
 8005064:	e7f1      	b.n	800504a <_ZN15SPI_TFT_ILI93415vlineEiiii+0x48>
    }
    SPI::format(8,3);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	331c      	adds	r3, #28
 800506a:	2203      	movs	r2, #3
 800506c:	2108      	movs	r1, #8
 800506e:	4618      	mov	r0, r3
 8005070:	f7ff fa2c 	bl	80044cc <_ZN3SPI6formatEii>
    #endif
    _cs = 1;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	3328      	adds	r3, #40	; 0x28
 8005078:	2101      	movs	r1, #1
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff f9f5 	bl	800446a <_ZN10DigitalOutaSEi>
    WindowMax();
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f7ff ff34 	bl	8004eee <_ZN15SPI_TFT_ILI93419WindowMaxEv>
    return;
 8005086:	bf00      	nop
}
 8005088:	371c      	adds	r7, #28
 800508a:	46bd      	mov	sp, r7
 800508c:	bd90      	pop	{r4, r7, pc}

0800508e <_ZN15SPI_TFT_ILI93414lineEiiiii>:



void SPI_TFT_ILI9341::line(int x0, int y0, int x1, int y1, int color)
{
 800508e:	b590      	push	{r4, r7, lr}
 8005090:	b08f      	sub	sp, #60	; 0x3c
 8005092:	af02      	add	r7, sp, #8
 8005094:	60f8      	str	r0, [r7, #12]
 8005096:	60b9      	str	r1, [r7, #8]
 8005098:	607a      	str	r2, [r7, #4]
 800509a:	603b      	str	r3, [r7, #0]
    //WindowMax();
    int   dx = 0, dy = 0;
 800509c:	2300      	movs	r3, #0
 800509e:	623b      	str	r3, [r7, #32]
 80050a0:	2300      	movs	r3, #0
 80050a2:	61fb      	str	r3, [r7, #28]
    int   dx_sym = 0, dy_sym = 0;
 80050a4:	2300      	movs	r3, #0
 80050a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050a8:	2300      	movs	r3, #0
 80050aa:	62bb      	str	r3, [r7, #40]	; 0x28
    int   dx_x2 = 0, dy_x2 = 0;
 80050ac:	2300      	movs	r3, #0
 80050ae:	61bb      	str	r3, [r7, #24]
 80050b0:	2300      	movs	r3, #0
 80050b2:	617b      	str	r3, [r7, #20]
    int   di = 0;
 80050b4:	2300      	movs	r3, #0
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24

    dx = x1-x0;
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	623b      	str	r3, [r7, #32]
    dy = y1-y0;
 80050c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	61fb      	str	r3, [r7, #28]

    if (dx == 0) {        /* vertical line */
 80050c8:	6a3b      	ldr	r3, [r7, #32]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d115      	bne.n	80050fa <_ZN15SPI_TFT_ILI93414lineEiiiii+0x6c>
        if (y1 > y0) vline(x0,y0,y1,color);
 80050ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	dd08      	ble.n	80050e8 <_ZN15SPI_TFT_ILI93414lineEiiiii+0x5a>
 80050d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	68b9      	ldr	r1, [r7, #8]
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f7ff ff8e 	bl	8005002 <_ZN15SPI_TFT_ILI93415vlineEiiii>
        else vline(x0,y1,y0,color);
        return;
 80050e6:	e0ab      	b.n	8005240 <_ZN15SPI_TFT_ILI93414lineEiiiii+0x1b2>
        else vline(x0,y1,y0,color);
 80050e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050f0:	68b9      	ldr	r1, [r7, #8]
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f7ff ff85 	bl	8005002 <_ZN15SPI_TFT_ILI93415vlineEiiii>
        return;
 80050f8:	e0a2      	b.n	8005240 <_ZN15SPI_TFT_ILI93414lineEiiiii+0x1b2>
    }

    if (dx > 0) {
 80050fa:	6a3b      	ldr	r3, [r7, #32]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	dd02      	ble.n	8005106 <_ZN15SPI_TFT_ILI93414lineEiiiii+0x78>
        dx_sym = 1;
 8005100:	2301      	movs	r3, #1
 8005102:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005104:	e002      	b.n	800510c <_ZN15SPI_TFT_ILI93414lineEiiiii+0x7e>
    } else {
        dx_sym = -1;
 8005106:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800510a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    if (dy == 0) {        /* horizontal line */
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d115      	bne.n	800513e <_ZN15SPI_TFT_ILI93414lineEiiiii+0xb0>
        if (x1 > x0) hline(x0,x1,y0,color);
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	429a      	cmp	r2, r3
 8005118:	dd08      	ble.n	800512c <_ZN15SPI_TFT_ILI93414lineEiiiii+0x9e>
 800511a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	68b9      	ldr	r1, [r7, #8]
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f7ff ff25 	bl	8004f74 <_ZN15SPI_TFT_ILI93415hlineEiiii>
        else  hline(x1,x0,y0,color);
        return;
 800512a:	e089      	b.n	8005240 <_ZN15SPI_TFT_ILI93414lineEiiiii+0x1b2>
        else  hline(x1,x0,y0,color);
 800512c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	6839      	ldr	r1, [r7, #0]
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f7ff ff1c 	bl	8004f74 <_ZN15SPI_TFT_ILI93415hlineEiiii>
        return;
 800513c:	e080      	b.n	8005240 <_ZN15SPI_TFT_ILI93414lineEiiiii+0x1b2>
    }

    if (dy > 0) {
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	2b00      	cmp	r3, #0
 8005142:	dd02      	ble.n	800514a <_ZN15SPI_TFT_ILI93414lineEiiiii+0xbc>
        dy_sym = 1;
 8005144:	2301      	movs	r3, #1
 8005146:	62bb      	str	r3, [r7, #40]	; 0x28
 8005148:	e002      	b.n	8005150 <_ZN15SPI_TFT_ILI93414lineEiiiii+0xc2>
    } else {
        dy_sym = -1;
 800514a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800514e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    dx = dx_sym*dx;
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005154:	fb02 f303 	mul.w	r3, r2, r3
 8005158:	623b      	str	r3, [r7, #32]
    dy = dy_sym*dy;
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800515e:	fb02 f303 	mul.w	r3, r2, r3
 8005162:	61fb      	str	r3, [r7, #28]

    dx_x2 = dx*2;
 8005164:	6a3b      	ldr	r3, [r7, #32]
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	61bb      	str	r3, [r7, #24]
    dy_x2 = dy*2;
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	617b      	str	r3, [r7, #20]

    if (dx >= dy) {
 8005170:	6a3a      	ldr	r2, [r7, #32]
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	429a      	cmp	r2, r3
 8005176:	db31      	blt.n	80051dc <_ZN15SPI_TFT_ILI93414lineEiiiii+0x14e>
        di = dy_x2 - dx;
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	6a3b      	ldr	r3, [r7, #32]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	627b      	str	r3, [r7, #36]	; 0x24
        while (x0 != x1) {
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	429a      	cmp	r2, r3
 8005186:	d01f      	beq.n	80051c8 <_ZN15SPI_TFT_ILI93414lineEiiiii+0x13a>

            pixel(x0, y0, color);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	3328      	adds	r3, #40	; 0x28
 800518e:	681c      	ldr	r4, [r3, #0]
 8005190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	68b9      	ldr	r1, [r7, #8]
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	47a0      	blx	r4
            x0 += dx_sym;
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519e:	4413      	add	r3, r2
 80051a0:	60bb      	str	r3, [r7, #8]
            if (di<0) {
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	da04      	bge.n	80051b2 <_ZN15SPI_TFT_ILI93414lineEiiiii+0x124>
                di += dy_x2;
 80051a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	4413      	add	r3, r2
 80051ae:	627b      	str	r3, [r7, #36]	; 0x24
 80051b0:	e7e6      	b.n	8005180 <_ZN15SPI_TFT_ILI93414lineEiiiii+0xf2>
            } else {
                di += dy_x2 - dx_x2;
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ba:	4413      	add	r3, r2
 80051bc:	627b      	str	r3, [r7, #36]	; 0x24
                y0 += dy_sym;
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c2:	4413      	add	r3, r2
 80051c4:	607b      	str	r3, [r7, #4]
        while (x0 != x1) {
 80051c6:	e7db      	b.n	8005180 <_ZN15SPI_TFT_ILI93414lineEiiiii+0xf2>
            }
        }
        pixel(x0, y0, color);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	3328      	adds	r3, #40	; 0x28
 80051ce:	681c      	ldr	r4, [r3, #0]
 80051d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	68b9      	ldr	r1, [r7, #8]
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	47a0      	blx	r4
                x0 += dx_sym;
            }
        }
        pixel(x0, y0, color);
    }
    return;
 80051da:	e031      	b.n	8005240 <_ZN15SPI_TFT_ILI93414lineEiiiii+0x1b2>
        di = dx_x2 - dy;
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	627b      	str	r3, [r7, #36]	; 0x24
        while (y0 != y1) {
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d01f      	beq.n	800522c <_ZN15SPI_TFT_ILI93414lineEiiiii+0x19e>
            pixel(x0, y0, color);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3328      	adds	r3, #40	; 0x28
 80051f2:	681c      	ldr	r4, [r3, #0]
 80051f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	68b9      	ldr	r1, [r7, #8]
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	47a0      	blx	r4
            y0 += dy_sym;
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005202:	4413      	add	r3, r2
 8005204:	607b      	str	r3, [r7, #4]
            if (di < 0) {
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	2b00      	cmp	r3, #0
 800520a:	da04      	bge.n	8005216 <_ZN15SPI_TFT_ILI93414lineEiiiii+0x188>
                di += dx_x2;
 800520c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	4413      	add	r3, r2
 8005212:	627b      	str	r3, [r7, #36]	; 0x24
 8005214:	e7e6      	b.n	80051e4 <_ZN15SPI_TFT_ILI93414lineEiiiii+0x156>
                di += dx_x2 - dy_x2;
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800521e:	4413      	add	r3, r2
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
                x0 += dx_sym;
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005226:	4413      	add	r3, r2
 8005228:	60bb      	str	r3, [r7, #8]
        while (y0 != y1) {
 800522a:	e7db      	b.n	80051e4 <_ZN15SPI_TFT_ILI93414lineEiiiii+0x156>
        pixel(x0, y0, color);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	3328      	adds	r3, #40	; 0x28
 8005232:	681c      	ldr	r4, [r3, #0]
 8005234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	68b9      	ldr	r1, [r7, #8]
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	47a0      	blx	r4
    return;
 800523e:	bf00      	nop
}
 8005240:	3734      	adds	r7, #52	; 0x34
 8005242:	46bd      	mov	sp, r7
 8005244:	bd90      	pop	{r4, r7, pc}

08005246 <_ZN15SPI_TFT_ILI93414rectEiiiii>:


void SPI_TFT_ILI9341::rect(int x0, int y0, int x1, int y1, int color)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b086      	sub	sp, #24
 800524a:	af02      	add	r7, sp, #8
 800524c:	60f8      	str	r0, [r7, #12]
 800524e:	60b9      	str	r1, [r7, #8]
 8005250:	607a      	str	r2, [r7, #4]
 8005252:	603b      	str	r3, [r7, #0]

    if (x1 > x0) hline(x0,x1,y0,color);
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	429a      	cmp	r2, r3
 800525a:	dd08      	ble.n	800526e <_ZN15SPI_TFT_ILI93414rectEiiiii+0x28>
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	68b9      	ldr	r1, [r7, #8]
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f7ff fe84 	bl	8004f74 <_ZN15SPI_TFT_ILI93415hlineEiiii>
 800526c:	e007      	b.n	800527e <_ZN15SPI_TFT_ILI93414rectEiiiii+0x38>
    else  hline(x1,x0,y0,color);
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	6839      	ldr	r1, [r7, #0]
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f7ff fe7b 	bl	8004f74 <_ZN15SPI_TFT_ILI93415hlineEiiii>

    if (y1 > y0) vline(x0,y0,y1,color);
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	429a      	cmp	r2, r3
 8005284:	dd08      	ble.n	8005298 <_ZN15SPI_TFT_ILI93414rectEiiiii+0x52>
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	68b9      	ldr	r1, [r7, #8]
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f7ff feb6 	bl	8005002 <_ZN15SPI_TFT_ILI93415vlineEiiii>
 8005296:	e007      	b.n	80052a8 <_ZN15SPI_TFT_ILI93414rectEiiiii+0x62>
    else vline(x0,y1,y0,color);
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	69ba      	ldr	r2, [r7, #24]
 80052a0:	68b9      	ldr	r1, [r7, #8]
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f7ff fead 	bl	8005002 <_ZN15SPI_TFT_ILI93415vlineEiiii>

    if (x1 > x0) hline(x0,x1,y1,color);
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	dd08      	ble.n	80052c2 <_ZN15SPI_TFT_ILI93414rectEiiiii+0x7c>
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	68b9      	ldr	r1, [r7, #8]
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f7ff fe5a 	bl	8004f74 <_ZN15SPI_TFT_ILI93415hlineEiiii>
 80052c0:	e007      	b.n	80052d2 <_ZN15SPI_TFT_ILI93414rectEiiiii+0x8c>
    else  hline(x1,x0,y1,color);
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	6839      	ldr	r1, [r7, #0]
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f7ff fe51 	bl	8004f74 <_ZN15SPI_TFT_ILI93415hlineEiiii>

    if (y1 > y0) vline(x1,y0,y1,color);
 80052d2:	69ba      	ldr	r2, [r7, #24]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	dd08      	ble.n	80052ec <_ZN15SPI_TFT_ILI93414rectEiiiii+0xa6>
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	6839      	ldr	r1, [r7, #0]
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f7ff fe8c 	bl	8005002 <_ZN15SPI_TFT_ILI93415vlineEiiii>
    else vline(x1,y1,y0,color);

    return;
 80052ea:	e008      	b.n	80052fe <_ZN15SPI_TFT_ILI93414rectEiiiii+0xb8>
    else vline(x1,y1,y0,color);
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	69ba      	ldr	r2, [r7, #24]
 80052f4:	6839      	ldr	r1, [r7, #0]
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f7ff fe83 	bl	8005002 <_ZN15SPI_TFT_ILI93415vlineEiiii>
    return;
 80052fc:	bf00      	nop
}
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <_ZN15SPI_TFT_ILI93418fillrectEiiiii>:



void SPI_TFT_ILI9341::fillrect(int x0, int y0, int x1, int y1, int color)
{
 8005304:	b590      	push	{r4, r7, lr}
 8005306:	b08b      	sub	sp, #44	; 0x2c
 8005308:	af02      	add	r7, sp, #8
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
 8005310:	603b      	str	r3, [r7, #0]

    int h = y1 - y0 + 1;
 8005312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	3301      	adds	r3, #1
 800531a:	61bb      	str	r3, [r7, #24]
    int w = x1 - x0 + 1;
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	3301      	adds	r3, #1
 8005324:	617b      	str	r3, [r7, #20]
    int pixel = h * w;
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	fb02 f303 	mul.w	r3, r2, r3
 800532e:	613b      	str	r3, [r7, #16]
    window(x0,y0,w,h);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3334      	adds	r3, #52	; 0x34
 8005336:	681c      	ldr	r4, [r3, #0]
 8005338:	68b9      	ldr	r1, [r7, #8]
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6978      	ldr	r0, [r7, #20]
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	4603      	mov	r3, r0
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	47a0      	blx	r4
    wr_cmd(0x2C);  // send pixel 
 8005348:	212c      	movs	r1, #44	; 0x2c
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f7ff fa5c 	bl	8004808 <_ZN15SPI_TFT_ILI93416wr_cmdEh>
    for (int p=0; p<pixel; p++) {
        SPI::write(color >> 8);
        SPI::write(color & 0xff);
    }
   #else
    SPI::format(16,3);                            // switch to 16 bit Mode 3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	331c      	adds	r3, #28
 8005354:	2203      	movs	r2, #3
 8005356:	2110      	movs	r1, #16
 8005358:	4618      	mov	r0, r3
 800535a:	f7ff f8b7 	bl	80044cc <_ZN3SPI6formatEii>
    for (int p=0; p<pixel; p++) {
 800535e:	2300      	movs	r3, #0
 8005360:	61fb      	str	r3, [r7, #28]
 8005362:	69fa      	ldr	r2, [r7, #28]
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	429a      	cmp	r2, r3
 8005368:	da09      	bge.n	800537e <_ZN15SPI_TFT_ILI93418fillrectEiiiii+0x7a>
        SPI::write(color);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	331c      	adds	r3, #28
 800536e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005370:	4618      	mov	r0, r3
 8005372:	f7ff f8cd 	bl	8004510 <_ZN3SPI5writeEi>
    for (int p=0; p<pixel; p++) {
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	3301      	adds	r3, #1
 800537a:	61fb      	str	r3, [r7, #28]
 800537c:	e7f1      	b.n	8005362 <_ZN15SPI_TFT_ILI93418fillrectEiiiii+0x5e>
    }
    SPI::format(8,3);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	331c      	adds	r3, #28
 8005382:	2203      	movs	r2, #3
 8005384:	2108      	movs	r1, #8
 8005386:	4618      	mov	r0, r3
 8005388:	f7ff f8a0 	bl	80044cc <_ZN3SPI6formatEii>
    #endif
    _cs = 1;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	3328      	adds	r3, #40	; 0x28
 8005390:	2101      	movs	r1, #1
 8005392:	4618      	mov	r0, r3
 8005394:	f7ff f869 	bl	800446a <_ZN10DigitalOutaSEi>
    WindowMax();
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f7ff fda8 	bl	8004eee <_ZN15SPI_TFT_ILI93419WindowMaxEv>
    return;
 800539e:	bf00      	nop
}
 80053a0:	3724      	adds	r7, #36	; 0x24
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd90      	pop	{r4, r7, pc}

080053a6 <_ZN15SPI_TFT_ILI93416locateEii>:


void SPI_TFT_ILI9341::locate(int x, int y)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b085      	sub	sp, #20
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	60f8      	str	r0, [r7, #12]
 80053ae:	60b9      	str	r1, [r7, #8]
 80053b0:	607a      	str	r2, [r7, #4]
    char_x = x;
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	64da      	str	r2, [r3, #76]	; 0x4c
    char_y = y;
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80053be:	bf00      	nop
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <_ZN15SPI_TFT_ILI93417columnsEv>:



int SPI_TFT_ILI9341::columns()
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b082      	sub	sp, #8
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
    return width() / font[1];
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	332c      	adds	r3, #44	; 0x2c
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	4798      	blx	r3
 80053de:	4602      	mov	r2, r0
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e4:	3301      	adds	r3, #1
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	fb92 f3f3 	sdiv	r3, r2, r3
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3708      	adds	r7, #8
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <_ZN15SPI_TFT_ILI93414rowsEv>:



int SPI_TFT_ILI9341::rows()
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
    return height() / font[2];
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	3330      	adds	r3, #48	; 0x30
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	4798      	blx	r3
 8005408:	4602      	mov	r2, r0
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540e:	3302      	adds	r3, #2
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8005416:	4618      	mov	r0, r3
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <_ZN15SPI_TFT_ILI93415_putcEi>:



int SPI_TFT_ILI9341::_putc(int value)
{
 800541e:	b590      	push	{r4, r7, lr}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
 8005426:	6039      	str	r1, [r7, #0]
    if (value == '\n') {    // new line
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	2b0a      	cmp	r3, #10
 800542c:	d124      	bne.n	8005478 <_ZN15SPI_TFT_ILI93415_putcEi+0x5a>
        char_x = 0;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	64da      	str	r2, [r3, #76]	; 0x4c
        char_y = char_y + font[2];
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800543c:	3202      	adds	r2, #2
 800543e:	7812      	ldrb	r2, [r2, #0]
 8005440:	441a      	add	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	651a      	str	r2, [r3, #80]	; 0x50
        if (char_y >= height() - font[2]) {
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	3330      	adds	r3, #48	; 0x30
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	4798      	blx	r3
 8005456:	4602      	mov	r2, r0
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545c:	3302      	adds	r3, #2
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	429c      	cmp	r4, r3
 8005464:	bf2c      	ite	cs
 8005466:	2301      	movcs	r3, #1
 8005468:	2300      	movcc	r3, #0
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00f      	beq.n	8005490 <_ZN15SPI_TFT_ILI93415_putcEi+0x72>
            char_y = 0;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	651a      	str	r2, [r3, #80]	; 0x50
 8005476:	e00b      	b.n	8005490 <_ZN15SPI_TFT_ILI93415_putcEi+0x72>
        }
    } else {
        character(char_x, char_y, value);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681c      	ldr	r4, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005482:	4619      	mov	r1, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005488:	461a      	mov	r2, r3
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	47a0      	blx	r4
    }
    return value;
 8005490:	683b      	ldr	r3, [r7, #0]
}
 8005492:	4618      	mov	r0, r3
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	bd90      	pop	{r4, r7, pc}

0800549a <_ZN15SPI_TFT_ILI93419characterEiii>:


void SPI_TFT_ILI9341::character(int x, int y, int c)
{
 800549a:	b590      	push	{r4, r7, lr}
 800549c:	b091      	sub	sp, #68	; 0x44
 800549e:	af02      	add	r7, sp, #8
 80054a0:	60f8      	str	r0, [r7, #12]
 80054a2:	60b9      	str	r1, [r7, #8]
 80054a4:	607a      	str	r2, [r7, #4]
 80054a6:	603b      	str	r3, [r7, #0]
    unsigned int hor,vert,offset,bpl,j,i,b;
    unsigned char* zeichen;
    unsigned char z,w;

    if ((c < 31) || (c > 127)) return;   // test char range
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	2b1e      	cmp	r3, #30
 80054ac:	f340 80d6 	ble.w	800565c <_ZN15SPI_TFT_ILI93419characterEiii+0x1c2>
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	2b7f      	cmp	r3, #127	; 0x7f
 80054b4:	f300 80d2 	bgt.w	800565c <_ZN15SPI_TFT_ILI93419characterEiii+0x1c2>

    // read font parameter from start of array
    offset = font[0];                    // bytes / char
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	62fb      	str	r3, [r7, #44]	; 0x2c
    hor = font[1];                       // get hor size of font
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c4:	3301      	adds	r3, #1
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	62bb      	str	r3, [r7, #40]	; 0x28
    vert = font[2];                      // get vert size of font
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	3302      	adds	r3, #2
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	627b      	str	r3, [r7, #36]	; 0x24
    bpl = font[3];                       // bytes per line
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d8:	3303      	adds	r3, #3
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	623b      	str	r3, [r7, #32]

    if (char_x + hor > width()) {
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e4:	18d4      	adds	r4, r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	332c      	adds	r3, #44	; 0x2c
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	4798      	blx	r3
 80054f2:	4603      	mov	r3, r0
 80054f4:	429c      	cmp	r4, r3
 80054f6:	bf8c      	ite	hi
 80054f8:	2301      	movhi	r3, #1
 80054fa:	2300      	movls	r3, #0
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d020      	beq.n	8005544 <_ZN15SPI_TFT_ILI93419characterEiii+0xaa>
        char_x = 0;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	64da      	str	r2, [r3, #76]	; 0x4c
        char_y = char_y + vert;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550e:	441a      	add	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	651a      	str	r2, [r3, #80]	; 0x50
        if (char_y >= height() - font[2]) {
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	3330      	adds	r3, #48	; 0x30
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	4798      	blx	r3
 8005524:	4602      	mov	r2, r0
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	3302      	adds	r3, #2
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	429c      	cmp	r4, r3
 8005532:	bf2c      	ite	cs
 8005534:	2301      	movcs	r3, #1
 8005536:	2300      	movcc	r3, #0
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d002      	beq.n	8005544 <_ZN15SPI_TFT_ILI93419characterEiii+0xaa>
            char_y = 0;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	651a      	str	r2, [r3, #80]	; 0x50
        }
    }
    window(char_x, char_y,hor,vert); // char box
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	3334      	adds	r3, #52	; 0x34
 800554a:	681c      	ldr	r4, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	47a0      	blx	r4
    wr_cmd(0x2C);  // send pixel
 800555e:	212c      	movs	r1, #44	; 0x2c
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f7ff f951 	bl	8004808 <_ZN15SPI_TFT_ILI93416wr_cmdEh>
    #ifndef TARGET_KL25Z  // 16 Bit SPI 
    SPI::format(16,3);   
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	331c      	adds	r3, #28
 800556a:	2203      	movs	r2, #3
 800556c:	2110      	movs	r1, #16
 800556e:	4618      	mov	r0, r3
 8005570:	f7fe ffac 	bl	80044cc <_ZN3SPI6formatEii>
    #endif                         // switch to 16 bit Mode 3
    zeichen = &font[((c -32) * offset) + 4]; // start of char bitmap
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	3b20      	subs	r3, #32
 800557c:	4619      	mov	r1, r3
 800557e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005580:	fb03 f301 	mul.w	r3, r3, r1
 8005584:	3304      	adds	r3, #4
 8005586:	4413      	add	r3, r2
 8005588:	61fb      	str	r3, [r7, #28]
    w = zeichen[0];                          // width of actual char
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	76fb      	strb	r3, [r7, #27]
     for (j=0; j<vert; j++) {  //  vert line
 8005590:	2300      	movs	r3, #0
 8005592:	637b      	str	r3, [r7, #52]	; 0x34
 8005594:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	429a      	cmp	r2, r3
 800559a:	d23a      	bcs.n	8005612 <_ZN15SPI_TFT_ILI93419characterEiii+0x178>
        for (i=0; i<hor; i++) {   //  horz line
 800559c:	2300      	movs	r3, #0
 800559e:	633b      	str	r3, [r7, #48]	; 0x30
 80055a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d230      	bcs.n	800560a <_ZN15SPI_TFT_ILI93419characterEiii+0x170>
            z =  zeichen[bpl * i + ((j & 0xF8) >> 3)+1];
 80055a8:	6a3b      	ldr	r3, [r7, #32]
 80055aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ac:	fb02 f203 	mul.w	r2, r2, r3
 80055b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b2:	08db      	lsrs	r3, r3, #3
 80055b4:	f003 031f 	and.w	r3, r3, #31
 80055b8:	4413      	add	r3, r2
 80055ba:	3301      	adds	r3, #1
 80055bc:	69fa      	ldr	r2, [r7, #28]
 80055be:	4413      	add	r3, r2
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	76bb      	strb	r3, [r7, #26]
            b = 1 << (j & 0x07);
 80055c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c6:	f003 0307 	and.w	r3, r3, #7
 80055ca:	2201      	movs	r2, #1
 80055cc:	fa02 f303 	lsl.w	r3, r2, r3
 80055d0:	617b      	str	r3, [r7, #20]
            if (( z & b ) == 0x00) {
 80055d2:	7eba      	ldrb	r2, [r7, #26]
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	4013      	ands	r3, r2
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d109      	bne.n	80055f0 <_ZN15SPI_TFT_ILI93419characterEiii+0x156>
               #ifndef TARGET_KL25Z  // 16 Bit SPI 
                SPI::write(_background);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f103 021c 	add.w	r2, r3, #28
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	895b      	ldrh	r3, [r3, #10]
 80055e6:	4619      	mov	r1, r3
 80055e8:	4610      	mov	r0, r2
 80055ea:	f7fe ff91 	bl	8004510 <_ZN3SPI5writeEi>
 80055ee:	e008      	b.n	8005602 <_ZN15SPI_TFT_ILI93419characterEiii+0x168>
                SPI::write(_background >> 8);
                SPI::write(_background & 0xff);
                #endif
            } else {
                #ifndef TARGET_KL25Z  // 16 Bit SPI
                SPI::write(_foreground);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f103 021c 	add.w	r2, r3, #28
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	891b      	ldrh	r3, [r3, #8]
 80055fa:	4619      	mov	r1, r3
 80055fc:	4610      	mov	r0, r2
 80055fe:	f7fe ff87 	bl	8004510 <_ZN3SPI5writeEi>
        for (i=0; i<hor; i++) {   //  horz line
 8005602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005604:	3301      	adds	r3, #1
 8005606:	633b      	str	r3, [r7, #48]	; 0x30
 8005608:	e7ca      	b.n	80055a0 <_ZN15SPI_TFT_ILI93419characterEiii+0x106>
     for (j=0; j<vert; j++) {  //  vert line
 800560a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800560c:	3301      	adds	r3, #1
 800560e:	637b      	str	r3, [r7, #52]	; 0x34
 8005610:	e7c0      	b.n	8005594 <_ZN15SPI_TFT_ILI93419characterEiii+0xfa>
                SPI::write(_foreground & 0xff);
                #endif
            }
        }
    }
    _cs = 1;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	3328      	adds	r3, #40	; 0x28
 8005616:	2101      	movs	r1, #1
 8005618:	4618      	mov	r0, r3
 800561a:	f7fe ff26 	bl	800446a <_ZN10DigitalOutaSEi>
    #ifndef TARGET_KL25Z  // 16 Bit SPI
    SPI::format(8,3);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	331c      	adds	r3, #28
 8005622:	2203      	movs	r2, #3
 8005624:	2108      	movs	r1, #8
 8005626:	4618      	mov	r0, r3
 8005628:	f7fe ff50 	bl	80044cc <_ZN3SPI6formatEii>
    #endif
    WindowMax();
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f7ff fc5e 	bl	8004eee <_ZN15SPI_TFT_ILI93419WindowMaxEv>
    if ((w + 2) < hor) {                   // x offset to next char
 8005632:	7efb      	ldrb	r3, [r7, #27]
 8005634:	3302      	adds	r3, #2
 8005636:	461a      	mov	r2, r3
 8005638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563a:	4293      	cmp	r3, r2
 800563c:	d907      	bls.n	800564e <_ZN15SPI_TFT_ILI93419characterEiii+0x1b4>
        char_x += w + 2;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005642:	7efb      	ldrb	r3, [r7, #27]
 8005644:	4413      	add	r3, r2
 8005646:	1c9a      	adds	r2, r3, #2
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	64da      	str	r2, [r3, #76]	; 0x4c
 800564c:	e007      	b.n	800565e <_ZN15SPI_TFT_ILI93419characterEiii+0x1c4>
    } else char_x += hor;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005654:	441a      	add	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	64da      	str	r2, [r3, #76]	; 0x4c
 800565a:	e000      	b.n	800565e <_ZN15SPI_TFT_ILI93419characterEiii+0x1c4>
    if ((c < 31) || (c > 127)) return;   // test char range
 800565c:	bf00      	nop
}
 800565e:	373c      	adds	r7, #60	; 0x3c
 8005660:	46bd      	mov	sp, r7
 8005662:	bd90      	pop	{r4, r7, pc}

08005664 <_ZN15SPI_TFT_ILI93418set_fontEPh>:


void SPI_TFT_ILI9341::set_font(unsigned char* f)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
    font = f;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <_ZN4mbed6StreamC1EPKc>:
int mbed_getc(FILE *_file);
char* mbed_gets(char *s, int size, FILE *_file);

class Stream {
public:
    Stream(const char *name=NULL) {}
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4618      	mov	r0, r3
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <_ZN4mbed6Stream4putcEi>:
    int putc(int c) { return 0; }
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
 80056a2:	2300      	movs	r3, #0
 80056a4:	4618      	mov	r0, r3
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <_ZN11TextDisplayC1EPKc>:
 * Released under the MIT License: http://mbed.org/license/mit
 */
 
#include "../../../Drivers/ILI9341_Display_Driver/third/TextDisplay.hpp"

TextDisplay::TextDisplay(const char *name) : Stream(name){
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
 80056ba:	6839      	ldr	r1, [r7, #0]
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7ff ffdf 	bl	8005680 <_ZN4mbed6StreamC1EPKc>
 80056c2:	4a14      	ldr	r2, [pc, #80]	; (8005714 <_ZN11TextDisplayC1EPKc+0x64>)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	601a      	str	r2, [r3, #0]
    _row = 0;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	80da      	strh	r2, [r3, #6]
    _column = 0;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	809a      	strh	r2, [r3, #4]
    if (name == NULL) {
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d103      	bne.n	80056e2 <_ZN11TextDisplayC1EPKc+0x32>
        _path = NULL;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	60da      	str	r2, [r3, #12]
 80056e0:	e012      	b.n	8005708 <_ZN11TextDisplayC1EPKc+0x58>
    } else {
        _path = new char[strlen(name) + 2];
 80056e2:	6838      	ldr	r0, [r7, #0]
 80056e4:	f7fa fd7e 	bl	80001e4 <strlen>
 80056e8:	4603      	mov	r3, r0
 80056ea:	3302      	adds	r3, #2
 80056ec:	4618      	mov	r0, r3
 80056ee:	f001 fbdb 	bl	8006ea8 <_Znaj>
 80056f2:	4603      	mov	r3, r0
 80056f4:	461a      	mov	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	60da      	str	r2, [r3, #12]
        sprintf(_path, "/%s", name);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	4905      	ldr	r1, [pc, #20]	; (8005718 <_ZN11TextDisplayC1EPKc+0x68>)
 8005702:	4618      	mov	r0, r3
 8005704:	f003 f93e 	bl	8008984 <siprintf>
    }
}
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4618      	mov	r0, r3
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	08017fd0 	.word	0x08017fd0
 8005718:	0800c1e8 	.word	0x0800c1e8

0800571c <_ZN11TextDisplay5_putcEi>:
    
int TextDisplay::_putc(int value) {
 800571c:	b590      	push	{r4, r7, lr}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
    if(value == '\n') {
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	2b0a      	cmp	r3, #10
 800572a:	d11d      	bne.n	8005768 <_ZN11TextDisplay5_putcEi+0x4c>
        _column = 0;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	809a      	strh	r2, [r3, #4]
        _row++;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	88db      	ldrh	r3, [r3, #6]
 8005736:	3301      	adds	r3, #1
 8005738:	b29a      	uxth	r2, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	80da      	strh	r2, [r3, #6]
        if(_row >= rows()) {
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	88db      	ldrh	r3, [r3, #6]
 8005742:	461c      	mov	r4, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	3304      	adds	r3, #4
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	4798      	blx	r3
 8005750:	4603      	mov	r3, r0
 8005752:	429c      	cmp	r4, r3
 8005754:	bfac      	ite	ge
 8005756:	2301      	movge	r3, #1
 8005758:	2300      	movlt	r3, #0
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d043      	beq.n	80057e8 <_ZN11TextDisplay5_putcEi+0xcc>
            _row = 0;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	80da      	strh	r2, [r3, #6]
 8005766:	e03f      	b.n	80057e8 <_ZN11TextDisplay5_putcEi+0xcc>
        }
    } else {
        character(_column, _row, value);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681c      	ldr	r4, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	889b      	ldrh	r3, [r3, #4]
 8005772:	4619      	mov	r1, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	88db      	ldrh	r3, [r3, #6]
 8005778:	461a      	mov	r2, r3
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	47a0      	blx	r4
        _column++;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	889b      	ldrh	r3, [r3, #4]
 8005784:	3301      	adds	r3, #1
 8005786:	b29a      	uxth	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	809a      	strh	r2, [r3, #4]
        if(_column >= columns()) {
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	889b      	ldrh	r3, [r3, #4]
 8005790:	461c      	mov	r4, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	3308      	adds	r3, #8
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	4798      	blx	r3
 800579e:	4603      	mov	r3, r0
 80057a0:	429c      	cmp	r4, r3
 80057a2:	bfac      	ite	ge
 80057a4:	2301      	movge	r3, #1
 80057a6:	2300      	movlt	r3, #0
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d01c      	beq.n	80057e8 <_ZN11TextDisplay5_putcEi+0xcc>
            _column = 0;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	809a      	strh	r2, [r3, #4]
            _row++;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	88db      	ldrh	r3, [r3, #6]
 80057b8:	3301      	adds	r3, #1
 80057ba:	b29a      	uxth	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	80da      	strh	r2, [r3, #6]
            if(_row >= rows()) {
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	88db      	ldrh	r3, [r3, #6]
 80057c4:	461c      	mov	r4, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3304      	adds	r3, #4
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	4798      	blx	r3
 80057d2:	4603      	mov	r3, r0
 80057d4:	429c      	cmp	r4, r3
 80057d6:	bfac      	ite	ge
 80057d8:	2301      	movge	r3, #1
 80057da:	2300      	movlt	r3, #0
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d002      	beq.n	80057e8 <_ZN11TextDisplay5_putcEi+0xcc>
                _row = 0;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	80da      	strh	r2, [r3, #6]
            }
        }
    }
    return value;
 80057e8:	683b      	ldr	r3, [r7, #0]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd90      	pop	{r4, r7, pc}

080057f2 <_ZN11TextDisplay3clsEv>:

// crude cls implementation, should generally be overwritten in derived class
void TextDisplay::cls() {
 80057f2:	b590      	push	{r4, r7, lr}
 80057f4:	b085      	sub	sp, #20
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
    locate(0, 0);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	3314      	adds	r3, #20
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2200      	movs	r2, #0
 8005804:	2100      	movs	r1, #0
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	4798      	blx	r3
    for(int i=0; i<columns()*rows(); i++) {
 800580a:	2300      	movs	r3, #0
 800580c:	60fb      	str	r3, [r7, #12]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	3308      	adds	r3, #8
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	4798      	blx	r3
 800581a:	4604      	mov	r4, r0
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	3304      	adds	r3, #4
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	4798      	blx	r3
 8005828:	4603      	mov	r3, r0
 800582a:	fb03 f304 	mul.w	r3, r3, r4
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	429a      	cmp	r2, r3
 8005832:	bfb4      	ite	lt
 8005834:	2301      	movlt	r3, #1
 8005836:	2300      	movge	r3, #0
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d007      	beq.n	800584e <_ZN11TextDisplay3clsEv+0x5c>
        putc(' ');
 800583e:	2120      	movs	r1, #32
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f7ff ff29 	bl	8005698 <_ZN4mbed6Stream4putcEi>
    for(int i=0; i<columns()*rows(); i++) {
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	3301      	adds	r3, #1
 800584a:	60fb      	str	r3, [r7, #12]
 800584c:	e7df      	b.n	800580e <_ZN11TextDisplay3clsEv+0x1c>
    }
}
 800584e:	bf00      	nop
 8005850:	3714      	adds	r7, #20
 8005852:	46bd      	mov	sp, r7
 8005854:	bd90      	pop	{r4, r7, pc}

08005856 <_ZN11TextDisplay6locateEii>:

void TextDisplay::locate(int column, int row) {
 8005856:	b480      	push	{r7}
 8005858:	b085      	sub	sp, #20
 800585a:	af00      	add	r7, sp, #0
 800585c:	60f8      	str	r0, [r7, #12]
 800585e:	60b9      	str	r1, [r7, #8]
 8005860:	607a      	str	r2, [r7, #4]
    _column = column;
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	b29a      	uxth	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	809a      	strh	r2, [r3, #4]
    _row = row;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	b29a      	uxth	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	80da      	strh	r2, [r3, #6]
}
 8005872:	bf00      	nop
 8005874:	3714      	adds	r7, #20
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <_ZN11TextDisplay5_getcEv>:

int TextDisplay::_getc() {
 800587e:	b480      	push	{r7}
 8005880:	b083      	sub	sp, #12
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
    return -1;
 8005886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800588a:	4618      	mov	r0, r3
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <_ZN11TextDisplay10foregroundEt>:
        
void TextDisplay::foreground(uint16_t colour) {
 8005896:	b480      	push	{r7}
 8005898:	b083      	sub	sp, #12
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
 800589e:	460b      	mov	r3, r1
 80058a0:	807b      	strh	r3, [r7, #2]
    _foreground = colour;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	887a      	ldrh	r2, [r7, #2]
 80058a6:	811a      	strh	r2, [r3, #8]
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <_ZN11TextDisplay10backgroundEt>:

void TextDisplay::background(uint16_t colour) {
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	460b      	mov	r3, r1
 80058be:	807b      	strh	r3, [r7, #2]
    _background = colour;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	887a      	ldrh	r2, [r7, #2]
 80058c4:	815a      	strh	r2, [r3, #10]
}
 80058c6:	bf00      	nop
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
	...

080058d4 <_ZN11TextDisplay5claimEP7__sFILE>:

bool TextDisplay::claim (FILE *stream) {
 80058d4:	b590      	push	{r4, r7, lr}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
    if ( _path == NULL) {
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d109      	bne.n	80058fa <_ZN11TextDisplay5claimEP7__sFILE+0x26>
        fprintf(stderr, "claim requires a name to be given in the instantioator of the TextDisplay instance!\r\n");
 80058e6:	4b17      	ldr	r3, [pc, #92]	; (8005944 <_ZN11TextDisplay5claimEP7__sFILE+0x70>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	2255      	movs	r2, #85	; 0x55
 80058ee:	2101      	movs	r1, #1
 80058f0:	4815      	ldr	r0, [pc, #84]	; (8005948 <_ZN11TextDisplay5claimEP7__sFILE+0x74>)
 80058f2:	f001 fde3 	bl	80074bc <fwrite>
        return false;
 80058f6:	2300      	movs	r3, #0
 80058f8:	e020      	b.n	800593c <_ZN11TextDisplay5claimEP7__sFILE+0x68>
    }
    if (freopen(_path, "w", stream) == NULL) {
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	4912      	ldr	r1, [pc, #72]	; (800594c <_ZN11TextDisplay5claimEP7__sFILE+0x78>)
 8005902:	4618      	mov	r0, r3
 8005904:	f001 fd64 	bl	80073d0 <freopen>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	bf0c      	ite	eq
 800590e:	2301      	moveq	r3, #1
 8005910:	2300      	movne	r3, #0
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b00      	cmp	r3, #0
 8005916:	d001      	beq.n	800591c <_ZN11TextDisplay5claimEP7__sFILE+0x48>
        // Failed, should not happen
        return false;
 8005918:	2300      	movs	r3, #0
 800591a:	e00f      	b.n	800593c <_ZN11TextDisplay5claimEP7__sFILE+0x68>
    }
    // make sure we use line buffering
    setvbuf(stdout, NULL, _IOLBF, columns());
 800591c:	4b09      	ldr	r3, [pc, #36]	; (8005944 <_ZN11TextDisplay5claimEP7__sFILE+0x70>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689c      	ldr	r4, [r3, #8]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	3308      	adds	r3, #8
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	4798      	blx	r3
 800592e:	4603      	mov	r3, r0
 8005930:	2201      	movs	r2, #1
 8005932:	2100      	movs	r1, #0
 8005934:	4620      	mov	r0, r4
 8005936:	f002 ff33 	bl	80087a0 <setvbuf>
    return true;
 800593a:	2301      	movs	r3, #1
} 
 800593c:	4618      	mov	r0, r3
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	bd90      	pop	{r4, r7, pc}
 8005944:	20000094 	.word	0x20000094
 8005948:	0800c1ec 	.word	0x0800c1ec
 800594c:	0800c244 	.word	0x0800c244

08005950 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005954:	2003      	movs	r0, #3
 8005956:	f000 f907 	bl	8005b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800595a:	2000      	movs	r0, #0
 800595c:	f000 f806 	bl	800596c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005960:	f7fc fab8 	bl	8001ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	bd80      	pop	{r7, pc}
	...

0800596c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8005974:	4b09      	ldr	r3, [pc, #36]	; (800599c <HAL_InitTick+0x30>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a09      	ldr	r2, [pc, #36]	; (80059a0 <HAL_InitTick+0x34>)
 800597a:	fba2 2303 	umull	r2, r3, r2, r3
 800597e:	099b      	lsrs	r3, r3, #6
 8005980:	4618      	mov	r0, r3
 8005982:	f000 f918 	bl	8005bb6 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8005986:	2200      	movs	r2, #0
 8005988:	6879      	ldr	r1, [r7, #4]
 800598a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800598e:	f000 f8f6 	bl	8005b7e <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	20000068 	.word	0x20000068
 80059a0:	10624dd3 	.word	0x10624dd3

080059a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059a4:	b480      	push	{r7}
 80059a6:	af00      	add	r7, sp, #0
  uwTick++;
 80059a8:	4b04      	ldr	r3, [pc, #16]	; (80059bc <HAL_IncTick+0x18>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	3301      	adds	r3, #1
 80059ae:	4a03      	ldr	r2, [pc, #12]	; (80059bc <HAL_IncTick+0x18>)
 80059b0:	6013      	str	r3, [r2, #0]
}
 80059b2:	bf00      	nop
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	2000046c 	.word	0x2000046c

080059c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059c0:	b480      	push	{r7}
 80059c2:	af00      	add	r7, sp, #0
  return uwTick;
 80059c4:	4b03      	ldr	r3, [pc, #12]	; (80059d4 <HAL_GetTick+0x14>)
 80059c6:	681b      	ldr	r3, [r3, #0]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	2000046c 	.word	0x2000046c

080059d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80059e0:	2300      	movs	r3, #0
 80059e2:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 80059e4:	f7ff ffec 	bl	80059c0 <HAL_GetTick>
 80059e8:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80059ea:	bf00      	nop
 80059ec:	f7ff ffe8 	bl	80059c0 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d8f7      	bhi.n	80059ec <HAL_Delay+0x14>
  {
  }
}
 80059fc:	bf00      	nop
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <__NVIC_SetPriorityGrouping>:
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f003 0307 	and.w	r3, r3, #7
 8005a12:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a14:	4b0c      	ldr	r3, [pc, #48]	; (8005a48 <__NVIC_SetPriorityGrouping+0x44>)
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a20:	4013      	ands	r3, r2
 8005a22:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a36:	4a04      	ldr	r2, [pc, #16]	; (8005a48 <__NVIC_SetPriorityGrouping+0x44>)
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	60d3      	str	r3, [r2, #12]
}
 8005a3c:	bf00      	nop
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	e000ed00 	.word	0xe000ed00

08005a4c <__NVIC_GetPriorityGrouping>:
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a50:	4b04      	ldr	r3, [pc, #16]	; (8005a64 <__NVIC_GetPriorityGrouping+0x18>)
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	0a1b      	lsrs	r3, r3, #8
 8005a56:	f003 0307 	and.w	r3, r3, #7
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr
 8005a64:	e000ed00 	.word	0xe000ed00

08005a68 <__NVIC_SetPriority>:
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	4603      	mov	r3, r0
 8005a70:	6039      	str	r1, [r7, #0]
 8005a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	db0a      	blt.n	8005a92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	b2da      	uxtb	r2, r3
 8005a80:	490c      	ldr	r1, [pc, #48]	; (8005ab4 <__NVIC_SetPriority+0x4c>)
 8005a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a86:	0112      	lsls	r2, r2, #4
 8005a88:	b2d2      	uxtb	r2, r2
 8005a8a:	440b      	add	r3, r1
 8005a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005a90:	e00a      	b.n	8005aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	b2da      	uxtb	r2, r3
 8005a96:	4908      	ldr	r1, [pc, #32]	; (8005ab8 <__NVIC_SetPriority+0x50>)
 8005a98:	79fb      	ldrb	r3, [r7, #7]
 8005a9a:	f003 030f 	and.w	r3, r3, #15
 8005a9e:	3b04      	subs	r3, #4
 8005aa0:	0112      	lsls	r2, r2, #4
 8005aa2:	b2d2      	uxtb	r2, r2
 8005aa4:	440b      	add	r3, r1
 8005aa6:	761a      	strb	r2, [r3, #24]
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr
 8005ab4:	e000e100 	.word	0xe000e100
 8005ab8:	e000ed00 	.word	0xe000ed00

08005abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b089      	sub	sp, #36	; 0x24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f003 0307 	and.w	r3, r3, #7
 8005ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	f1c3 0307 	rsb	r3, r3, #7
 8005ad6:	2b04      	cmp	r3, #4
 8005ad8:	bf28      	it	cs
 8005ada:	2304      	movcs	r3, #4
 8005adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	3304      	adds	r3, #4
 8005ae2:	2b06      	cmp	r3, #6
 8005ae4:	d902      	bls.n	8005aec <NVIC_EncodePriority+0x30>
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	3b03      	subs	r3, #3
 8005aea:	e000      	b.n	8005aee <NVIC_EncodePriority+0x32>
 8005aec:	2300      	movs	r3, #0
 8005aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005af0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	fa02 f303 	lsl.w	r3, r2, r3
 8005afa:	43da      	mvns	r2, r3
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	401a      	ands	r2, r3
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b0e:	43d9      	mvns	r1, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b14:	4313      	orrs	r3, r2
         );
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3724      	adds	r7, #36	; 0x24
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
	...

08005b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b34:	d301      	bcc.n	8005b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b36:	2301      	movs	r3, #1
 8005b38:	e00f      	b.n	8005b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b3a:	4a0a      	ldr	r2, [pc, #40]	; (8005b64 <SysTick_Config+0x40>)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b42:	210f      	movs	r1, #15
 8005b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b48:	f7ff ff8e 	bl	8005a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b4c:	4b05      	ldr	r3, [pc, #20]	; (8005b64 <SysTick_Config+0x40>)
 8005b4e:	2200      	movs	r2, #0
 8005b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b52:	4b04      	ldr	r3, [pc, #16]	; (8005b64 <SysTick_Config+0x40>)
 8005b54:	2207      	movs	r2, #7
 8005b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3708      	adds	r7, #8
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	e000e010 	.word	0xe000e010

08005b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f7ff ff47 	bl	8005a04 <__NVIC_SetPriorityGrouping>
}
 8005b76:	bf00      	nop
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b086      	sub	sp, #24
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	4603      	mov	r3, r0
 8005b86:	60b9      	str	r1, [r7, #8]
 8005b88:	607a      	str	r2, [r7, #4]
 8005b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005b90:	f7ff ff5c 	bl	8005a4c <__NVIC_GetPriorityGrouping>
 8005b94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	68b9      	ldr	r1, [r7, #8]
 8005b9a:	6978      	ldr	r0, [r7, #20]
 8005b9c:	f7ff ff8e 	bl	8005abc <NVIC_EncodePriority>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ba6:	4611      	mov	r1, r2
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7ff ff5d 	bl	8005a68 <__NVIC_SetPriority>
}
 8005bae:	bf00      	nop
 8005bb0:	3718      	adds	r7, #24
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b082      	sub	sp, #8
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7ff ffb0 	bl	8005b24 <SysTick_Config>
 8005bc4:	4603      	mov	r3, r0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
	...

08005bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005bde:	2300      	movs	r3, #0
 8005be0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8005be2:	2300      	movs	r3, #0
 8005be4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8005be6:	e17f      	b.n	8005ee8 <HAL_GPIO_Init+0x318>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	2101      	movs	r1, #1
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f000 8171 	beq.w	8005ee2 <HAL_GPIO_Init+0x312>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d003      	beq.n	8005c10 <HAL_GPIO_Init+0x40>
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	2b12      	cmp	r3, #18
 8005c0e:	d123      	bne.n	8005c58 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	08da      	lsrs	r2, r3, #3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	3208      	adds	r2, #8
 8005c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c1c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f003 0307 	and.w	r3, r3, #7
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	220f      	movs	r2, #15
 8005c28:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2c:	43db      	mvns	r3, r3
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	4013      	ands	r3, r2
 8005c32:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	691a      	ldr	r2, [r3, #16]
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	f003 0307 	and.w	r3, r3, #7
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	fa02 f303 	lsl.w	r3, r2, r3
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	08da      	lsrs	r2, r3, #3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	3208      	adds	r2, #8
 8005c52:	6939      	ldr	r1, [r7, #16]
 8005c54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	005b      	lsls	r3, r3, #1
 8005c62:	2203      	movs	r2, #3
 8005c64:	fa02 f303 	lsl.w	r3, r2, r3
 8005c68:	43db      	mvns	r3, r3
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f003 0203 	and.w	r2, r3, #3
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	005b      	lsls	r3, r3, #1
 8005c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d00b      	beq.n	8005cac <HAL_GPIO_Init+0xdc>
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d007      	beq.n	8005cac <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005ca0:	2b11      	cmp	r3, #17
 8005ca2:	d003      	beq.n	8005cac <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	2b12      	cmp	r3, #18
 8005caa:	d130      	bne.n	8005d0e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	005b      	lsls	r3, r3, #1
 8005cb6:	2203      	movs	r2, #3
 8005cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cbc:	43db      	mvns	r3, r3
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	68da      	ldr	r2, [r3, #12]
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	005b      	lsls	r3, r3, #1
 8005ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cea:	43db      	mvns	r3, r3
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	4013      	ands	r3, r2
 8005cf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	091b      	lsrs	r3, r3, #4
 8005cf8:	f003 0201 	and.w	r2, r3, #1
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	605a      	str	r2, [r3, #4]
      }

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f003 0303 	and.w	r3, r3, #3
 8005d16:	2b03      	cmp	r3, #3
 8005d18:	d118      	bne.n	8005d4c <HAL_GPIO_Init+0x17c>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005d20:	2201      	movs	r2, #1
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	fa02 f303 	lsl.w	r3, r2, r3
 8005d28:	43db      	mvns	r3, r3
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	08db      	lsrs	r3, r3, #3
 8005d36:	f003 0201 	and.w	r2, r3, #1
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	2203      	movs	r2, #3
 8005d58:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5c:	43db      	mvns	r3, r3
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	4013      	ands	r3, r2
 8005d62:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	689a      	ldr	r2, [r3, #8]
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	005b      	lsls	r3, r3, #1
 8005d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 80ac 	beq.w	8005ee2 <HAL_GPIO_Init+0x312>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d8a:	4b5e      	ldr	r3, [pc, #376]	; (8005f04 <HAL_GPIO_Init+0x334>)
 8005d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d8e:	4a5d      	ldr	r2, [pc, #372]	; (8005f04 <HAL_GPIO_Init+0x334>)
 8005d90:	f043 0301 	orr.w	r3, r3, #1
 8005d94:	6613      	str	r3, [r2, #96]	; 0x60
 8005d96:	4b5b      	ldr	r3, [pc, #364]	; (8005f04 <HAL_GPIO_Init+0x334>)
 8005d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	60bb      	str	r3, [r7, #8]
 8005da0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8005da2:	4a59      	ldr	r2, [pc, #356]	; (8005f08 <HAL_GPIO_Init+0x338>)
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	089b      	lsrs	r3, r3, #2
 8005da8:	3302      	adds	r3, #2
 8005daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dae:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f003 0303 	and.w	r3, r3, #3
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	220f      	movs	r2, #15
 8005dba:	fa02 f303 	lsl.w	r3, r2, r3
 8005dbe:	43db      	mvns	r3, r3
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005dcc:	d025      	beq.n	8005e1a <HAL_GPIO_Init+0x24a>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a4e      	ldr	r2, [pc, #312]	; (8005f0c <HAL_GPIO_Init+0x33c>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d01f      	beq.n	8005e16 <HAL_GPIO_Init+0x246>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a4d      	ldr	r2, [pc, #308]	; (8005f10 <HAL_GPIO_Init+0x340>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d019      	beq.n	8005e12 <HAL_GPIO_Init+0x242>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a4c      	ldr	r2, [pc, #304]	; (8005f14 <HAL_GPIO_Init+0x344>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d013      	beq.n	8005e0e <HAL_GPIO_Init+0x23e>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a4b      	ldr	r2, [pc, #300]	; (8005f18 <HAL_GPIO_Init+0x348>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d00d      	beq.n	8005e0a <HAL_GPIO_Init+0x23a>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a4a      	ldr	r2, [pc, #296]	; (8005f1c <HAL_GPIO_Init+0x34c>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d007      	beq.n	8005e06 <HAL_GPIO_Init+0x236>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a49      	ldr	r2, [pc, #292]	; (8005f20 <HAL_GPIO_Init+0x350>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d101      	bne.n	8005e02 <HAL_GPIO_Init+0x232>
 8005dfe:	2306      	movs	r3, #6
 8005e00:	e00c      	b.n	8005e1c <HAL_GPIO_Init+0x24c>
 8005e02:	2307      	movs	r3, #7
 8005e04:	e00a      	b.n	8005e1c <HAL_GPIO_Init+0x24c>
 8005e06:	2305      	movs	r3, #5
 8005e08:	e008      	b.n	8005e1c <HAL_GPIO_Init+0x24c>
 8005e0a:	2304      	movs	r3, #4
 8005e0c:	e006      	b.n	8005e1c <HAL_GPIO_Init+0x24c>
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e004      	b.n	8005e1c <HAL_GPIO_Init+0x24c>
 8005e12:	2302      	movs	r3, #2
 8005e14:	e002      	b.n	8005e1c <HAL_GPIO_Init+0x24c>
 8005e16:	2301      	movs	r3, #1
 8005e18:	e000      	b.n	8005e1c <HAL_GPIO_Init+0x24c>
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	f002 0203 	and.w	r2, r2, #3
 8005e22:	0092      	lsls	r2, r2, #2
 8005e24:	4093      	lsls	r3, r2
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005e2c:	4936      	ldr	r1, [pc, #216]	; (8005f08 <HAL_GPIO_Init+0x338>)
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	089b      	lsrs	r3, r3, #2
 8005e32:	3302      	adds	r3, #2
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005e3a:	4b3a      	ldr	r3, [pc, #232]	; (8005f24 <HAL_GPIO_Init+0x354>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	43db      	mvns	r3, r3
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	4013      	ands	r3, r2
 8005e48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d003      	beq.n	8005e5e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005e5e:	4a31      	ldr	r2, [pc, #196]	; (8005f24 <HAL_GPIO_Init+0x354>)
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8005e64:	4b2f      	ldr	r3, [pc, #188]	; (8005f24 <HAL_GPIO_Init+0x354>)
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	43db      	mvns	r3, r3
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	4013      	ands	r3, r2
 8005e72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d003      	beq.n	8005e88 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005e88:	4a26      	ldr	r2, [pc, #152]	; (8005f24 <HAL_GPIO_Init+0x354>)
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e8e:	4b25      	ldr	r3, [pc, #148]	; (8005f24 <HAL_GPIO_Init+0x354>)
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	43db      	mvns	r3, r3
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <HAL_GPIO_Init+0x2e2>
        {
          temp |= iocurrent;
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005eb2:	4a1c      	ldr	r2, [pc, #112]	; (8005f24 <HAL_GPIO_Init+0x354>)
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005eb8:	4b1a      	ldr	r3, [pc, #104]	; (8005f24 <HAL_GPIO_Init+0x354>)
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	43db      	mvns	r3, r3
 8005ec2:	693a      	ldr	r2, [r7, #16]
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d003      	beq.n	8005edc <HAL_GPIO_Init+0x30c>
        {
          temp |= iocurrent;
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005edc:	4a11      	ldr	r2, [pc, #68]	; (8005f24 <HAL_GPIO_Init+0x354>)
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f47f ae78 	bne.w	8005be8 <HAL_GPIO_Init+0x18>
  }
}
 8005ef8:	bf00      	nop
 8005efa:	371c      	adds	r7, #28
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr
 8005f04:	40021000 	.word	0x40021000
 8005f08:	40010000 	.word	0x40010000
 8005f0c:	48000400 	.word	0x48000400
 8005f10:	48000800 	.word	0x48000800
 8005f14:	48000c00 	.word	0x48000c00
 8005f18:	48001000 	.word	0x48001000
 8005f1c:	48001400 	.word	0x48001400
 8005f20:	48001800 	.word	0x48001800
 8005f24:	40010400 	.word	0x40010400

08005f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	460b      	mov	r3, r1
 8005f32:	807b      	strh	r3, [r7, #2]
 8005f34:	4613      	mov	r3, r2
 8005f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f38:	787b      	ldrb	r3, [r7, #1]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005f3e:	887a      	ldrh	r2, [r7, #2]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005f44:	e002      	b.n	8005f4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005f46:	887a      	ldrh	r2, [r7, #2]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005f5c:	4b04      	ldr	r3, [pc, #16]	; (8005f70 <HAL_PWREx_GetVoltageRange+0x18>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	40007000 	.word	0x40007000

08005f74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index = 0;  
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	60fb      	str	r3, [r7, #12]

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f86:	d12f      	bne.n	8005fe8 <HAL_PWREx_ControlVoltageScaling+0x74>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f88:	4b22      	ldr	r3, [pc, #136]	; (8006014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f94:	d037      	beq.n	8006006 <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f96:	4b1f      	ldr	r3, [pc, #124]	; (8006014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005f9e:	4a1d      	ldr	r2, [pc, #116]	; (8006014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fa0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fa4:	6013      	str	r3, [r2, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8005fa6:	4b1c      	ldr	r3, [pc, #112]	; (8006018 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a1c      	ldr	r2, [pc, #112]	; (800601c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005fac:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb0:	0c9b      	lsrs	r3, r3, #18
 8005fb2:	2232      	movs	r2, #50	; 0x32
 8005fb4:	fb02 f303 	mul.w	r3, r2, r3
 8005fb8:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8005fba:	e002      	b.n	8005fc2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d006      	beq.n	8005fd6 <HAL_PWREx_ControlVoltageScaling+0x62>
 8005fc8:	4b12      	ldr	r3, [pc, #72]	; (8006014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fca:	695b      	ldr	r3, [r3, #20]
 8005fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fd4:	d0f2      	beq.n	8005fbc <HAL_PWREx_ControlVoltageScaling+0x48>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005fd6:	4b0f      	ldr	r3, [pc, #60]	; (8006014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fe2:	d110      	bne.n	8006006 <HAL_PWREx_ControlVoltageScaling+0x92>
      {
        return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e00f      	b.n	8006008 <HAL_PWREx_ControlVoltageScaling+0x94>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005fe8:	4b0a      	ldr	r3, [pc, #40]	; (8006014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ff4:	d007      	beq.n	8006006 <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005ff6:	4b07      	ldr	r3, [pc, #28]	; (8006014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005ffe:	4a05      	ldr	r2, [pc, #20]	; (8006014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006000:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006004:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  
  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}  
 8006008:	4618      	mov	r0, r3
 800600a:	3714      	adds	r7, #20
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr
 8006014:	40007000 	.word	0x40007000
 8006018:	20000068 	.word	0x20000068
 800601c:	431bde83 	.word	0x431bde83

08006020 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b08e      	sub	sp, #56	; 0x38
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006028:	2300      	movs	r3, #0
 800602a:	633b      	str	r3, [r7, #48]	; 0x30
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0310 	and.w	r3, r3, #16
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 80e2 	beq.w	80061fe <HAL_RCC_OscConfig+0x1de>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 800603a:	4b9a      	ldr	r3, [pc, #616]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f003 030c 	and.w	r3, r3, #12
 8006042:	2b00      	cmp	r3, #0
 8006044:	f040 808b 	bne.w	800615e <HAL_RCC_OscConfig+0x13e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006048:	4b96      	ldr	r3, [pc, #600]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0302 	and.w	r3, r3, #2
 8006050:	2b00      	cmp	r3, #0
 8006052:	d005      	beq.n	8006060 <HAL_RCC_OscConfig+0x40>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d101      	bne.n	8006060 <HAL_RCC_OscConfig+0x40>
      {
        return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e3ae      	b.n	80067be <HAL_RCC_OscConfig+0x79e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a1a      	ldr	r2, [r3, #32]
 8006064:	4b8f      	ldr	r3, [pc, #572]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0308 	and.w	r3, r3, #8
 800606c:	2b00      	cmp	r3, #0
 800606e:	d004      	beq.n	800607a <HAL_RCC_OscConfig+0x5a>
 8006070:	4b8c      	ldr	r3, [pc, #560]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006078:	e005      	b.n	8006086 <HAL_RCC_OscConfig+0x66>
 800607a:	4b8a      	ldr	r3, [pc, #552]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 800607c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006080:	091b      	lsrs	r3, r3, #4
 8006082:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006086:	4293      	cmp	r3, r2
 8006088:	d223      	bcs.n	80060d2 <HAL_RCC_OscConfig+0xb2>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	4618      	mov	r0, r3
 8006090:	f000 fdf4 	bl	8006c7c <RCC_SetFlashLatencyFromMSIRange>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <HAL_RCC_OscConfig+0x7e>
          {
            return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e38f      	b.n	80067be <HAL_RCC_OscConfig+0x79e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800609e:	4b81      	ldr	r3, [pc, #516]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a80      	ldr	r2, [pc, #512]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 80060a4:	f043 0308 	orr.w	r3, r3, #8
 80060a8:	6013      	str	r3, [r2, #0]
 80060aa:	4b7e      	ldr	r3, [pc, #504]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	497b      	ldr	r1, [pc, #492]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80060bc:	4b79      	ldr	r3, [pc, #484]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	69db      	ldr	r3, [r3, #28]
 80060c8:	021b      	lsls	r3, r3, #8
 80060ca:	4976      	ldr	r1, [pc, #472]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 80060cc:	4313      	orrs	r3, r2
 80060ce:	604b      	str	r3, [r1, #4]
 80060d0:	e022      	b.n	8006118 <HAL_RCC_OscConfig+0xf8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060d2:	4b74      	ldr	r3, [pc, #464]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a73      	ldr	r2, [pc, #460]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 80060d8:	f043 0308 	orr.w	r3, r3, #8
 80060dc:	6013      	str	r3, [r2, #0]
 80060de:	4b71      	ldr	r3, [pc, #452]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	496e      	ldr	r1, [pc, #440]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80060f0:	4b6c      	ldr	r3, [pc, #432]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	69db      	ldr	r3, [r3, #28]
 80060fc:	021b      	lsls	r3, r3, #8
 80060fe:	4969      	ldr	r1, [pc, #420]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 8006100:	4313      	orrs	r3, r2
 8006102:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	4618      	mov	r0, r3
 800610a:	f000 fdb7 	bl	8006c7c <RCC_SetFlashLatencyFromMSIRange>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d001      	beq.n	8006118 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e352      	b.n	80067be <HAL_RCC_OscConfig+0x79e>
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8006118:	f000 fc84 	bl	8006a24 <HAL_RCC_GetSysClockFreq>
 800611c:	4601      	mov	r1, r0
 800611e:	4b61      	ldr	r3, [pc, #388]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006126:	22f0      	movs	r2, #240	; 0xf0
 8006128:	62ba      	str	r2, [r7, #40]	; 0x28
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800612a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800612c:	fa92 f2a2 	rbit	r2, r2
 8006130:	627a      	str	r2, [r7, #36]	; 0x24
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006134:	62fa      	str	r2, [r7, #44]	; 0x2c
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006136:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006138:	2a00      	cmp	r2, #0
 800613a:	d101      	bne.n	8006140 <HAL_RCC_OscConfig+0x120>
  {
    return 32U;
 800613c:	2220      	movs	r2, #32
 800613e:	e003      	b.n	8006148 <HAL_RCC_OscConfig+0x128>
  }
  return __builtin_clz(value);
 8006140:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006142:	fab2 f282 	clz	r2, r2
 8006146:	b2d2      	uxtb	r2, r2
 8006148:	40d3      	lsrs	r3, r2
 800614a:	4a57      	ldr	r2, [pc, #348]	; (80062a8 <HAL_RCC_OscConfig+0x288>)
 800614c:	5cd3      	ldrb	r3, [r2, r3]
 800614e:	fa21 f303 	lsr.w	r3, r1, r3
 8006152:	4a56      	ldr	r2, [pc, #344]	; (80062ac <HAL_RCC_OscConfig+0x28c>)
 8006154:	6013      	str	r3, [r2, #0]
        
        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 8006156:	2000      	movs	r0, #0
 8006158:	f7ff fc08 	bl	800596c <HAL_InitTick>
 800615c:	e04f      	b.n	80061fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d032      	beq.n	80061cc <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006166:	4b4f      	ldr	r3, [pc, #316]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a4e      	ldr	r2, [pc, #312]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 800616c:	f043 0301 	orr.w	r3, r3, #1
 8006170:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006172:	f7ff fc25 	bl	80059c0 <HAL_GetTick>
 8006176:	6338      	str	r0, [r7, #48]	; 0x30

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8006178:	e008      	b.n	800618c <HAL_RCC_OscConfig+0x16c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800617a:	f7ff fc21 	bl	80059c0 <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	2b02      	cmp	r3, #2
 8006186:	d901      	bls.n	800618c <HAL_RCC_OscConfig+0x16c>
          {
            return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e318      	b.n	80067be <HAL_RCC_OscConfig+0x79e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800618c:	4b45      	ldr	r3, [pc, #276]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0302 	and.w	r3, r3, #2
 8006194:	2b00      	cmp	r3, #0
 8006196:	d0f0      	beq.n	800617a <HAL_RCC_OscConfig+0x15a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006198:	4b42      	ldr	r3, [pc, #264]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a41      	ldr	r2, [pc, #260]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 800619e:	f043 0308 	orr.w	r3, r3, #8
 80061a2:	6013      	str	r3, [r2, #0]
 80061a4:	4b3f      	ldr	r3, [pc, #252]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	493c      	ldr	r1, [pc, #240]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80061b6:	4b3b      	ldr	r3, [pc, #236]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	021b      	lsls	r3, r3, #8
 80061c4:	4937      	ldr	r1, [pc, #220]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	604b      	str	r3, [r1, #4]
 80061ca:	e018      	b.n	80061fe <HAL_RCC_OscConfig+0x1de>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80061cc:	4b35      	ldr	r3, [pc, #212]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a34      	ldr	r2, [pc, #208]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 80061d2:	f023 0301 	bic.w	r3, r3, #1
 80061d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80061d8:	f7ff fbf2 	bl	80059c0 <HAL_GetTick>
 80061dc:	6338      	str	r0, [r7, #48]	; 0x30

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 80061de:	e008      	b.n	80061f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80061e0:	f7ff fbee 	bl	80059c0 <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d901      	bls.n	80061f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e2e5      	b.n	80067be <HAL_RCC_OscConfig+0x79e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 80061f2:	4b2c      	ldr	r3, [pc, #176]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0302 	and.w	r3, r3, #2
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1f0      	bne.n	80061e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0301 	and.w	r3, r3, #1
 8006206:	2b00      	cmp	r3, #0
 8006208:	f000 80a3 	beq.w	8006352 <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 800620c:	4b25      	ldr	r3, [pc, #148]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f003 030c 	and.w	r3, r3, #12
 8006214:	2b08      	cmp	r3, #8
 8006216:	d00b      	beq.n	8006230 <HAL_RCC_OscConfig+0x210>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006218:	4b22      	ldr	r3, [pc, #136]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8006220:	2b0c      	cmp	r3, #12
 8006222:	d113      	bne.n	800624c <HAL_RCC_OscConfig+0x22c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006224:	4b1f      	ldr	r3, [pc, #124]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	f003 0303 	and.w	r3, r3, #3
 800622c:	2b03      	cmp	r3, #3
 800622e:	d10d      	bne.n	800624c <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006230:	4b1c      	ldr	r3, [pc, #112]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 8089 	beq.w	8006350 <HAL_RCC_OscConfig+0x330>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	f040 8084 	bne.w	8006350 <HAL_RCC_OscConfig+0x330>
      {
        return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e2b8      	b.n	80067be <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 800624c:	4b15      	ldr	r3, [pc, #84]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a14      	ldr	r2, [pc, #80]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 8006252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006256:	6013      	str	r3, [r2, #0]
 8006258:	4b12      	ldr	r3, [pc, #72]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a11      	ldr	r2, [pc, #68]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 800625e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006262:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006264:	f7ff fbac 	bl	80059c0 <HAL_GetTick>
 8006268:	6338      	str	r0, [r7, #48]	; 0x30

      /* Wait till HSE is disabled */
      while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800626a:	e008      	b.n	800627e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800626c:	f7ff fba8 	bl	80059c0 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b64      	cmp	r3, #100	; 0x64
 8006278:	d901      	bls.n	800627e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e29f      	b.n	80067be <HAL_RCC_OscConfig+0x79e>
      while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800627e:	4b09      	ldr	r3, [pc, #36]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1f0      	bne.n	800626c <HAL_RCC_OscConfig+0x24c>
        }
      }

      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006292:	d10d      	bne.n	80062b0 <HAL_RCC_OscConfig+0x290>
 8006294:	4b03      	ldr	r3, [pc, #12]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a02      	ldr	r2, [pc, #8]	; (80062a4 <HAL_RCC_OscConfig+0x284>)
 800629a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800629e:	6013      	str	r3, [r2, #0]
 80062a0:	e02a      	b.n	80062f8 <HAL_RCC_OscConfig+0x2d8>
 80062a2:	bf00      	nop
 80062a4:	40021000 	.word	0x40021000
 80062a8:	0800c2a4 	.word	0x0800c2a4
 80062ac:	20000068 	.word	0x20000068
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062b8:	d112      	bne.n	80062e0 <HAL_RCC_OscConfig+0x2c0>
 80062ba:	4ba9      	ldr	r3, [pc, #676]	; (8006560 <HAL_RCC_OscConfig+0x540>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4aa8      	ldr	r2, [pc, #672]	; (8006560 <HAL_RCC_OscConfig+0x540>)
 80062c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062c4:	6013      	str	r3, [r2, #0]
 80062c6:	4ba6      	ldr	r3, [pc, #664]	; (8006560 <HAL_RCC_OscConfig+0x540>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4aa5      	ldr	r2, [pc, #660]	; (8006560 <HAL_RCC_OscConfig+0x540>)
 80062cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062d0:	6013      	str	r3, [r2, #0]
 80062d2:	4ba3      	ldr	r3, [pc, #652]	; (8006560 <HAL_RCC_OscConfig+0x540>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4aa2      	ldr	r2, [pc, #648]	; (8006560 <HAL_RCC_OscConfig+0x540>)
 80062d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062dc:	6013      	str	r3, [r2, #0]
 80062de:	e00b      	b.n	80062f8 <HAL_RCC_OscConfig+0x2d8>
 80062e0:	4b9f      	ldr	r3, [pc, #636]	; (8006560 <HAL_RCC_OscConfig+0x540>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a9e      	ldr	r2, [pc, #632]	; (8006560 <HAL_RCC_OscConfig+0x540>)
 80062e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062ea:	6013      	str	r3, [r2, #0]
 80062ec:	4b9c      	ldr	r3, [pc, #624]	; (8006560 <HAL_RCC_OscConfig+0x540>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a9b      	ldr	r2, [pc, #620]	; (8006560 <HAL_RCC_OscConfig+0x540>)
 80062f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d013      	beq.n	8006328 <HAL_RCC_OscConfig+0x308>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006300:	f7ff fb5e 	bl	80059c0 <HAL_GetTick>
 8006304:	6338      	str	r0, [r7, #48]	; 0x30

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8006306:	e008      	b.n	800631a <HAL_RCC_OscConfig+0x2fa>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006308:	f7ff fb5a 	bl	80059c0 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	2b64      	cmp	r3, #100	; 0x64
 8006314:	d901      	bls.n	800631a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e251      	b.n	80067be <HAL_RCC_OscConfig+0x79e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800631a:	4b91      	ldr	r3, [pc, #580]	; (8006560 <HAL_RCC_OscConfig+0x540>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d0f0      	beq.n	8006308 <HAL_RCC_OscConfig+0x2e8>
 8006326:	e014      	b.n	8006352 <HAL_RCC_OscConfig+0x332>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006328:	f7ff fb4a 	bl	80059c0 <HAL_GetTick>
 800632c:	6338      	str	r0, [r7, #48]	; 0x30

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800632e:	e008      	b.n	8006342 <HAL_RCC_OscConfig+0x322>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006330:	f7ff fb46 	bl	80059c0 <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	2b64      	cmp	r3, #100	; 0x64
 800633c:	d901      	bls.n	8006342 <HAL_RCC_OscConfig+0x322>
          {
            return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e23d      	b.n	80067be <HAL_RCC_OscConfig+0x79e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8006342:	4b87      	ldr	r3, [pc, #540]	; (8006560 <HAL_RCC_OscConfig+0x540>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1f0      	bne.n	8006330 <HAL_RCC_OscConfig+0x310>
 800634e:	e000      	b.n	8006352 <HAL_RCC_OscConfig+0x332>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0302 	and.w	r3, r3, #2
 800635a:	2b00      	cmp	r3, #0
 800635c:	f000 808e 	beq.w	800647c <HAL_RCC_OscConfig+0x45c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8006360:	4b7f      	ldr	r3, [pc, #508]	; (8006560 <HAL_RCC_OscConfig+0x540>)
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f003 030c 	and.w	r3, r3, #12
 8006368:	2b04      	cmp	r3, #4
 800636a:	d00b      	beq.n	8006384 <HAL_RCC_OscConfig+0x364>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800636c:	4b7c      	ldr	r3, [pc, #496]	; (8006560 <HAL_RCC_OscConfig+0x540>)
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8006374:	2b0c      	cmp	r3, #12
 8006376:	d12e      	bne.n	80063d6 <HAL_RCC_OscConfig+0x3b6>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006378:	4b79      	ldr	r3, [pc, #484]	; (8006560 <HAL_RCC_OscConfig+0x540>)
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	f003 0303 	and.w	r3, r3, #3
 8006380:	2b02      	cmp	r3, #2
 8006382:	d128      	bne.n	80063d6 <HAL_RCC_OscConfig+0x3b6>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006384:	4b76      	ldr	r3, [pc, #472]	; (8006560 <HAL_RCC_OscConfig+0x540>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800638c:	2b00      	cmp	r3, #0
 800638e:	d005      	beq.n	800639c <HAL_RCC_OscConfig+0x37c>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d101      	bne.n	800639c <HAL_RCC_OscConfig+0x37c>
      {
        return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e210      	b.n	80067be <HAL_RCC_OscConfig+0x79e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800639c:	4b70      	ldr	r3, [pc, #448]	; (8006560 <HAL_RCC_OscConfig+0x540>)
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	f04f 51f8 	mov.w	r1, #520093696	; 0x1f000000
 80063ac:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ae:	69f9      	ldr	r1, [r7, #28]
 80063b0:	fa91 f1a1 	rbit	r1, r1
 80063b4:	61b9      	str	r1, [r7, #24]
  return result;
 80063b6:	69b9      	ldr	r1, [r7, #24]
 80063b8:	6239      	str	r1, [r7, #32]
  if (value == 0U)
 80063ba:	6a39      	ldr	r1, [r7, #32]
 80063bc:	2900      	cmp	r1, #0
 80063be:	d101      	bne.n	80063c4 <HAL_RCC_OscConfig+0x3a4>
    return 32U;
 80063c0:	2120      	movs	r1, #32
 80063c2:	e003      	b.n	80063cc <HAL_RCC_OscConfig+0x3ac>
  return __builtin_clz(value);
 80063c4:	6a39      	ldr	r1, [r7, #32]
 80063c6:	fab1 f181 	clz	r1, r1
 80063ca:	b2c9      	uxtb	r1, r1
 80063cc:	408b      	lsls	r3, r1
 80063ce:	4964      	ldr	r1, [pc, #400]	; (8006560 <HAL_RCC_OscConfig+0x540>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063d4:	e052      	b.n	800647c <HAL_RCC_OscConfig+0x45c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d035      	beq.n	800644a <HAL_RCC_OscConfig+0x42a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063de:	4b60      	ldr	r3, [pc, #384]	; (8006560 <HAL_RCC_OscConfig+0x540>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a5f      	ldr	r2, [pc, #380]	; (8006560 <HAL_RCC_OscConfig+0x540>)
 80063e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ea:	f7ff fae9 	bl	80059c0 <HAL_GetTick>
 80063ee:	6338      	str	r0, [r7, #48]	; 0x30

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80063f0:	e008      	b.n	8006404 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063f2:	f7ff fae5 	bl	80059c0 <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d901      	bls.n	8006404 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	e1dc      	b.n	80067be <HAL_RCC_OscConfig+0x79e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8006404:	4b56      	ldr	r3, [pc, #344]	; (8006560 <HAL_RCC_OscConfig+0x540>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800640c:	2b00      	cmp	r3, #0
 800640e:	d0f0      	beq.n	80063f2 <HAL_RCC_OscConfig+0x3d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006410:	4b53      	ldr	r3, [pc, #332]	; (8006560 <HAL_RCC_OscConfig+0x540>)
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	f04f 51f8 	mov.w	r1, #520093696	; 0x1f000000
 8006420:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006422:	6939      	ldr	r1, [r7, #16]
 8006424:	fa91 f1a1 	rbit	r1, r1
 8006428:	60f9      	str	r1, [r7, #12]
  return result;
 800642a:	68f9      	ldr	r1, [r7, #12]
 800642c:	6179      	str	r1, [r7, #20]
  if (value == 0U)
 800642e:	6979      	ldr	r1, [r7, #20]
 8006430:	2900      	cmp	r1, #0
 8006432:	d101      	bne.n	8006438 <HAL_RCC_OscConfig+0x418>
    return 32U;
 8006434:	2120      	movs	r1, #32
 8006436:	e003      	b.n	8006440 <HAL_RCC_OscConfig+0x420>
  return __builtin_clz(value);
 8006438:	6979      	ldr	r1, [r7, #20]
 800643a:	fab1 f181 	clz	r1, r1
 800643e:	b2c9      	uxtb	r1, r1
 8006440:	408b      	lsls	r3, r1
 8006442:	4947      	ldr	r1, [pc, #284]	; (8006560 <HAL_RCC_OscConfig+0x540>)
 8006444:	4313      	orrs	r3, r2
 8006446:	604b      	str	r3, [r1, #4]
 8006448:	e018      	b.n	800647c <HAL_RCC_OscConfig+0x45c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800644a:	4b45      	ldr	r3, [pc, #276]	; (8006560 <HAL_RCC_OscConfig+0x540>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a44      	ldr	r2, [pc, #272]	; (8006560 <HAL_RCC_OscConfig+0x540>)
 8006450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006454:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006456:	f7ff fab3 	bl	80059c0 <HAL_GetTick>
 800645a:	6338      	str	r0, [r7, #48]	; 0x30

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 800645c:	e008      	b.n	8006470 <HAL_RCC_OscConfig+0x450>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800645e:	f7ff faaf 	bl	80059c0 <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	2b02      	cmp	r3, #2
 800646a:	d901      	bls.n	8006470 <HAL_RCC_OscConfig+0x450>
          {
            return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e1a6      	b.n	80067be <HAL_RCC_OscConfig+0x79e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8006470:	4b3b      	ldr	r3, [pc, #236]	; (8006560 <HAL_RCC_OscConfig+0x540>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006478:	2b00      	cmp	r3, #0
 800647a:	d1f0      	bne.n	800645e <HAL_RCC_OscConfig+0x43e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0308 	and.w	r3, r3, #8
 8006484:	2b00      	cmp	r3, #0
 8006486:	d03c      	beq.n	8006502 <HAL_RCC_OscConfig+0x4e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	695b      	ldr	r3, [r3, #20]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d01c      	beq.n	80064ca <HAL_RCC_OscConfig+0x4aa>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006490:	4b33      	ldr	r3, [pc, #204]	; (8006560 <HAL_RCC_OscConfig+0x540>)
 8006492:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006496:	4a32      	ldr	r2, [pc, #200]	; (8006560 <HAL_RCC_OscConfig+0x540>)
 8006498:	f043 0301 	orr.w	r3, r3, #1
 800649c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064a0:	f7ff fa8e 	bl	80059c0 <HAL_GetTick>
 80064a4:	6338      	str	r0, [r7, #48]	; 0x30

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 80064a6:	e008      	b.n	80064ba <HAL_RCC_OscConfig+0x49a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064a8:	f7ff fa8a 	bl	80059c0 <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d901      	bls.n	80064ba <HAL_RCC_OscConfig+0x49a>
        {
          return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e181      	b.n	80067be <HAL_RCC_OscConfig+0x79e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 80064ba:	4b29      	ldr	r3, [pc, #164]	; (8006560 <HAL_RCC_OscConfig+0x540>)
 80064bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064c0:	f003 0302 	and.w	r3, r3, #2
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d0ef      	beq.n	80064a8 <HAL_RCC_OscConfig+0x488>
 80064c8:	e01b      	b.n	8006502 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064ca:	4b25      	ldr	r3, [pc, #148]	; (8006560 <HAL_RCC_OscConfig+0x540>)
 80064cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064d0:	4a23      	ldr	r2, [pc, #140]	; (8006560 <HAL_RCC_OscConfig+0x540>)
 80064d2:	f023 0301 	bic.w	r3, r3, #1
 80064d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064da:	f7ff fa71 	bl	80059c0 <HAL_GetTick>
 80064de:	6338      	str	r0, [r7, #48]	; 0x30

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 80064e0:	e008      	b.n	80064f4 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064e2:	f7ff fa6d 	bl	80059c0 <HAL_GetTick>
 80064e6:	4602      	mov	r2, r0
 80064e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d901      	bls.n	80064f4 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e164      	b.n	80067be <HAL_RCC_OscConfig+0x79e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 80064f4:	4b1a      	ldr	r3, [pc, #104]	; (8006560 <HAL_RCC_OscConfig+0x540>)
 80064f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064fa:	f003 0302 	and.w	r3, r3, #2
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1ef      	bne.n	80064e2 <HAL_RCC_OscConfig+0x4c2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0304 	and.w	r3, r3, #4
 800650a:	2b00      	cmp	r3, #0
 800650c:	f000 80c5 	beq.w	800669a <HAL_RCC_OscConfig+0x67a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006510:	2300      	movs	r3, #0
 8006512:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006516:	4b12      	ldr	r3, [pc, #72]	; (8006560 <HAL_RCC_OscConfig+0x540>)
 8006518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800651a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10e      	bne.n	8006540 <HAL_RCC_OscConfig+0x520>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006522:	4b0f      	ldr	r3, [pc, #60]	; (8006560 <HAL_RCC_OscConfig+0x540>)
 8006524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006526:	4a0e      	ldr	r2, [pc, #56]	; (8006560 <HAL_RCC_OscConfig+0x540>)
 8006528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800652c:	6593      	str	r3, [r2, #88]	; 0x58
 800652e:	4b0c      	ldr	r3, [pc, #48]	; (8006560 <HAL_RCC_OscConfig+0x540>)
 8006530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006536:	60bb      	str	r3, [r7, #8]
 8006538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800653a:	2301      	movs	r3, #1
 800653c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006540:	4b08      	ldr	r3, [pc, #32]	; (8006564 <HAL_RCC_OscConfig+0x544>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006548:	2b00      	cmp	r3, #0
 800654a:	d11c      	bne.n	8006586 <HAL_RCC_OscConfig+0x566>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800654c:	4b05      	ldr	r3, [pc, #20]	; (8006564 <HAL_RCC_OscConfig+0x544>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a04      	ldr	r2, [pc, #16]	; (8006564 <HAL_RCC_OscConfig+0x544>)
 8006552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006556:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006558:	f7ff fa32 	bl	80059c0 <HAL_GetTick>
 800655c:	6338      	str	r0, [r7, #48]	; 0x30

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800655e:	e00c      	b.n	800657a <HAL_RCC_OscConfig+0x55a>
 8006560:	40021000 	.word	0x40021000
 8006564:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006568:	f7ff fa2a 	bl	80059c0 <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	2b02      	cmp	r3, #2
 8006574:	d901      	bls.n	800657a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e121      	b.n	80067be <HAL_RCC_OscConfig+0x79e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800657a:	4b93      	ldr	r3, [pc, #588]	; (80067c8 <HAL_RCC_OscConfig+0x7a8>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006582:	2b00      	cmp	r3, #0
 8006584:	d0f0      	beq.n	8006568 <HAL_RCC_OscConfig+0x548>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d108      	bne.n	80065a0 <HAL_RCC_OscConfig+0x580>
 800658e:	4b8f      	ldr	r3, [pc, #572]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 8006590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006594:	4a8d      	ldr	r2, [pc, #564]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 8006596:	f043 0301 	orr.w	r3, r3, #1
 800659a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800659e:	e041      	b.n	8006624 <HAL_RCC_OscConfig+0x604>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d110      	bne.n	80065ca <HAL_RCC_OscConfig+0x5aa>
 80065a8:	4b88      	ldr	r3, [pc, #544]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 80065aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ae:	4a87      	ldr	r2, [pc, #540]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 80065b0:	f023 0301 	bic.w	r3, r3, #1
 80065b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80065b8:	4b84      	ldr	r3, [pc, #528]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 80065ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065be:	4a83      	ldr	r2, [pc, #524]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 80065c0:	f023 0304 	bic.w	r3, r3, #4
 80065c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80065c8:	e02c      	b.n	8006624 <HAL_RCC_OscConfig+0x604>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	2b05      	cmp	r3, #5
 80065d0:	d118      	bne.n	8006604 <HAL_RCC_OscConfig+0x5e4>
 80065d2:	4b7e      	ldr	r3, [pc, #504]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 80065d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065d8:	4a7c      	ldr	r2, [pc, #496]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 80065da:	f023 0301 	bic.w	r3, r3, #1
 80065de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80065e2:	4b7a      	ldr	r3, [pc, #488]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 80065e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065e8:	4a78      	ldr	r2, [pc, #480]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 80065ea:	f043 0304 	orr.w	r3, r3, #4
 80065ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80065f2:	4b76      	ldr	r3, [pc, #472]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 80065f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065f8:	4a74      	ldr	r2, [pc, #464]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 80065fa:	f043 0301 	orr.w	r3, r3, #1
 80065fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006602:	e00f      	b.n	8006624 <HAL_RCC_OscConfig+0x604>
 8006604:	4b71      	ldr	r3, [pc, #452]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 8006606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800660a:	4a70      	ldr	r2, [pc, #448]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 800660c:	f023 0301 	bic.w	r3, r3, #1
 8006610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006614:	4b6d      	ldr	r3, [pc, #436]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 8006616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800661a:	4a6c      	ldr	r2, [pc, #432]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 800661c:	f023 0304 	bic.w	r3, r3, #4
 8006620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d016      	beq.n	800665a <HAL_RCC_OscConfig+0x63a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800662c:	f7ff f9c8 	bl	80059c0 <HAL_GetTick>
 8006630:	6338      	str	r0, [r7, #48]	; 0x30

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8006632:	e00a      	b.n	800664a <HAL_RCC_OscConfig+0x62a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006634:	f7ff f9c4 	bl	80059c0 <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006642:	4293      	cmp	r3, r2
 8006644:	d901      	bls.n	800664a <HAL_RCC_OscConfig+0x62a>
        {
          return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e0b9      	b.n	80067be <HAL_RCC_OscConfig+0x79e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800664a:	4b60      	ldr	r3, [pc, #384]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 800664c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006650:	f003 0302 	and.w	r3, r3, #2
 8006654:	2b00      	cmp	r3, #0
 8006656:	d0ed      	beq.n	8006634 <HAL_RCC_OscConfig+0x614>
 8006658:	e015      	b.n	8006686 <HAL_RCC_OscConfig+0x666>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800665a:	f7ff f9b1 	bl	80059c0 <HAL_GetTick>
 800665e:	6338      	str	r0, [r7, #48]	; 0x30

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8006660:	e00a      	b.n	8006678 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006662:	f7ff f9ad 	bl	80059c0 <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006670:	4293      	cmp	r3, r2
 8006672:	d901      	bls.n	8006678 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	e0a2      	b.n	80067be <HAL_RCC_OscConfig+0x79e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8006678:	4b54      	ldr	r3, [pc, #336]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 800667a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800667e:	f003 0302 	and.w	r3, r3, #2
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1ed      	bne.n	8006662 <HAL_RCC_OscConfig+0x642>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006686:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800668a:	2b01      	cmp	r3, #1
 800668c:	d105      	bne.n	800669a <HAL_RCC_OscConfig+0x67a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800668e:	4b4f      	ldr	r3, [pc, #316]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 8006690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006692:	4a4e      	ldr	r2, [pc, #312]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 8006694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006698:	6593      	str	r3, [r2, #88]	; 0x58
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669e:	2b00      	cmp	r3, #0
 80066a0:	f000 808c 	beq.w	80067bc <HAL_RCC_OscConfig+0x79c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066a4:	4b49      	ldr	r3, [pc, #292]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	f003 030c 	and.w	r3, r3, #12
 80066ac:	2b0c      	cmp	r3, #12
 80066ae:	f000 8083 	beq.w	80067b8 <HAL_RCC_OscConfig+0x798>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d156      	bne.n	8006768 <HAL_RCC_OscConfig+0x748>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066ba:	4b44      	ldr	r3, [pc, #272]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a43      	ldr	r2, [pc, #268]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 80066c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c6:	f7ff f97b 	bl	80059c0 <HAL_GetTick>
 80066ca:	6338      	str	r0, [r7, #48]	; 0x30

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80066cc:	e008      	b.n	80066e0 <HAL_RCC_OscConfig+0x6c0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066ce:	f7ff f977 	bl	80059c0 <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d901      	bls.n	80066e0 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e06e      	b.n	80067be <HAL_RCC_OscConfig+0x79e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80066e0:	4b3a      	ldr	r3, [pc, #232]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1f0      	bne.n	80066ce <HAL_RCC_OscConfig+0x6ae>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f0:	3b01      	subs	r3, #1
 80066f2:	011a      	lsls	r2, r3, #4
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f8:	021b      	lsls	r3, r3, #8
 80066fa:	431a      	orrs	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006700:	091b      	lsrs	r3, r3, #4
 8006702:	045b      	lsls	r3, r3, #17
 8006704:	431a      	orrs	r2, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800670a:	431a      	orrs	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006710:	085b      	lsrs	r3, r3, #1
 8006712:	3b01      	subs	r3, #1
 8006714:	055b      	lsls	r3, r3, #21
 8006716:	431a      	orrs	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800671c:	085b      	lsrs	r3, r3, #1
 800671e:	3b01      	subs	r3, #1
 8006720:	065b      	lsls	r3, r3, #25
 8006722:	492a      	ldr	r1, [pc, #168]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 8006724:	4313      	orrs	r3, r2
 8006726:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006728:	4b28      	ldr	r3, [pc, #160]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a27      	ldr	r2, [pc, #156]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 800672e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006732:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006734:	4b25      	ldr	r3, [pc, #148]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	4a24      	ldr	r2, [pc, #144]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 800673a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800673e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006740:	f7ff f93e 	bl	80059c0 <HAL_GetTick>
 8006744:	6338      	str	r0, [r7, #48]	; 0x30

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8006746:	e008      	b.n	800675a <HAL_RCC_OscConfig+0x73a>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006748:	f7ff f93a 	bl	80059c0 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	2b02      	cmp	r3, #2
 8006754:	d901      	bls.n	800675a <HAL_RCC_OscConfig+0x73a>
          {
            return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e031      	b.n	80067be <HAL_RCC_OscConfig+0x79e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800675a:	4b1c      	ldr	r3, [pc, #112]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d0f0      	beq.n	8006748 <HAL_RCC_OscConfig+0x728>
 8006766:	e029      	b.n	80067bc <HAL_RCC_OscConfig+0x79c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006768:	4b18      	ldr	r3, [pc, #96]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a17      	ldr	r2, [pc, #92]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 800676e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006772:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8006774:	4b15      	ldr	r3, [pc, #84]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	4a14      	ldr	r2, [pc, #80]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 800677a:	f023 0303 	bic.w	r3, r3, #3
 800677e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006780:	4b12      	ldr	r3, [pc, #72]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	4a11      	ldr	r2, [pc, #68]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 8006786:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800678a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800678e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006790:	f7ff f916 	bl	80059c0 <HAL_GetTick>
 8006794:	6338      	str	r0, [r7, #48]	; 0x30

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8006796:	e008      	b.n	80067aa <HAL_RCC_OscConfig+0x78a>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006798:	f7ff f912 	bl	80059c0 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d901      	bls.n	80067aa <HAL_RCC_OscConfig+0x78a>
          {
            return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e009      	b.n	80067be <HAL_RCC_OscConfig+0x79e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80067aa:	4b08      	ldr	r3, [pc, #32]	; (80067cc <HAL_RCC_OscConfig+0x7ac>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1f0      	bne.n	8006798 <HAL_RCC_OscConfig+0x778>
 80067b6:	e001      	b.n	80067bc <HAL_RCC_OscConfig+0x79c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e000      	b.n	80067be <HAL_RCC_OscConfig+0x79e>
    }
  }
  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3738      	adds	r7, #56	; 0x38
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	40007000 	.word	0x40007000
 80067cc:	40021000 	.word	0x40021000

080067d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80067da:	2300      	movs	r3, #0
 80067dc:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80067de:	4b8d      	ldr	r3, [pc, #564]	; (8006a14 <HAL_RCC_ClockConfig+0x244>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0307 	and.w	r3, r3, #7
 80067e6:	683a      	ldr	r2, [r7, #0]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d910      	bls.n	800680e <HAL_RCC_ClockConfig+0x3e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ec:	4b89      	ldr	r3, [pc, #548]	; (8006a14 <HAL_RCC_ClockConfig+0x244>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f023 0207 	bic.w	r2, r3, #7
 80067f4:	4987      	ldr	r1, [pc, #540]	; (8006a14 <HAL_RCC_ClockConfig+0x244>)
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80067fc:	4b85      	ldr	r3, [pc, #532]	; (8006a14 <HAL_RCC_ClockConfig+0x244>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0307 	and.w	r3, r3, #7
 8006804:	683a      	ldr	r2, [r7, #0]
 8006806:	429a      	cmp	r2, r3
 8006808:	d001      	beq.n	800680e <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e0fd      	b.n	8006a0a <HAL_RCC_ClockConfig+0x23a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	2b00      	cmp	r3, #0
 8006818:	d008      	beq.n	800682c <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800681a:	4b7f      	ldr	r3, [pc, #508]	; (8006a18 <HAL_RCC_ClockConfig+0x248>)
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	497c      	ldr	r1, [pc, #496]	; (8006a18 <HAL_RCC_ClockConfig+0x248>)
 8006828:	4313      	orrs	r3, r2
 800682a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0301 	and.w	r3, r3, #1
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 808e 	beq.w	8006956 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	2b02      	cmp	r3, #2
 8006840:	d107      	bne.n	8006852 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8006842:	4b75      	ldr	r3, [pc, #468]	; (8006a18 <HAL_RCC_ClockConfig+0x248>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d121      	bne.n	8006892 <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e0db      	b.n	8006a0a <HAL_RCC_ClockConfig+0x23a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	2b03      	cmp	r3, #3
 8006858:	d107      	bne.n	800686a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800685a:	4b6f      	ldr	r3, [pc, #444]	; (8006a18 <HAL_RCC_ClockConfig+0x248>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006862:	2b00      	cmp	r3, #0
 8006864:	d115      	bne.n	8006892 <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e0cf      	b.n	8006a0a <HAL_RCC_ClockConfig+0x23a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d107      	bne.n	8006882 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the MSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8006872:	4b69      	ldr	r3, [pc, #420]	; (8006a18 <HAL_RCC_ClockConfig+0x248>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0302 	and.w	r3, r3, #2
 800687a:	2b00      	cmp	r3, #0
 800687c:	d109      	bne.n	8006892 <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e0c3      	b.n	8006a0a <HAL_RCC_ClockConfig+0x23a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8006882:	4b65      	ldr	r3, [pc, #404]	; (8006a18 <HAL_RCC_ClockConfig+0x248>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800688a:	2b00      	cmp	r3, #0
 800688c:	d101      	bne.n	8006892 <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e0bb      	b.n	8006a0a <HAL_RCC_ClockConfig+0x23a>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006892:	4b61      	ldr	r3, [pc, #388]	; (8006a18 <HAL_RCC_ClockConfig+0x248>)
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	f023 0203 	bic.w	r2, r3, #3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	495e      	ldr	r1, [pc, #376]	; (8006a18 <HAL_RCC_ClockConfig+0x248>)
 80068a0:	4313      	orrs	r3, r2
 80068a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068a4:	f7ff f88c 	bl	80059c0 <HAL_GetTick>
 80068a8:	6178      	str	r0, [r7, #20]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d112      	bne.n	80068d8 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 80068b2:	e00a      	b.n	80068ca <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068b4:	f7ff f884 	bl	80059c0 <HAL_GetTick>
 80068b8:	4602      	mov	r2, r0
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	f241 3288 	movw	r2, #5000	; 0x1388
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d901      	bls.n	80068ca <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e09f      	b.n	8006a0a <HAL_RCC_ClockConfig+0x23a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 80068ca:	4b53      	ldr	r3, [pc, #332]	; (8006a18 <HAL_RCC_ClockConfig+0x248>)
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f003 030c 	and.w	r3, r3, #12
 80068d2:	2b08      	cmp	r3, #8
 80068d4:	d1ee      	bne.n	80068b4 <HAL_RCC_ClockConfig+0xe4>
 80068d6:	e03e      	b.n	8006956 <HAL_RCC_ClockConfig+0x186>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	2b03      	cmp	r3, #3
 80068de:	d112      	bne.n	8006906 <HAL_RCC_ClockConfig+0x136>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80068e0:	e00a      	b.n	80068f8 <HAL_RCC_ClockConfig+0x128>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068e2:	f7ff f86d 	bl	80059c0 <HAL_GetTick>
 80068e6:	4602      	mov	r2, r0
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d901      	bls.n	80068f8 <HAL_RCC_ClockConfig+0x128>
        {
          return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e088      	b.n	8006a0a <HAL_RCC_ClockConfig+0x23a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80068f8:	4b47      	ldr	r3, [pc, #284]	; (8006a18 <HAL_RCC_ClockConfig+0x248>)
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	f003 030c 	and.w	r3, r3, #12
 8006900:	2b0c      	cmp	r3, #12
 8006902:	d1ee      	bne.n	80068e2 <HAL_RCC_ClockConfig+0x112>
 8006904:	e027      	b.n	8006956 <HAL_RCC_ClockConfig+0x186>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d11d      	bne.n	800694a <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 800690e:	e00a      	b.n	8006926 <HAL_RCC_ClockConfig+0x156>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006910:	f7ff f856 	bl	80059c0 <HAL_GetTick>
 8006914:	4602      	mov	r2, r0
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	f241 3288 	movw	r2, #5000	; 0x1388
 800691e:	4293      	cmp	r3, r2
 8006920:	d901      	bls.n	8006926 <HAL_RCC_ClockConfig+0x156>
        {
          return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	e071      	b.n	8006a0a <HAL_RCC_ClockConfig+0x23a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8006926:	4b3c      	ldr	r3, [pc, #240]	; (8006a18 <HAL_RCC_ClockConfig+0x248>)
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f003 030c 	and.w	r3, r3, #12
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1ee      	bne.n	8006910 <HAL_RCC_ClockConfig+0x140>
 8006932:	e010      	b.n	8006956 <HAL_RCC_ClockConfig+0x186>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006934:	f7ff f844 	bl	80059c0 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006942:	4293      	cmp	r3, r2
 8006944:	d901      	bls.n	800694a <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e05f      	b.n	8006a0a <HAL_RCC_ClockConfig+0x23a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 800694a:	4b33      	ldr	r3, [pc, #204]	; (8006a18 <HAL_RCC_ClockConfig+0x248>)
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f003 030c 	and.w	r3, r3, #12
 8006952:	2b04      	cmp	r3, #4
 8006954:	d1ee      	bne.n	8006934 <HAL_RCC_ClockConfig+0x164>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8006956:	4b2f      	ldr	r3, [pc, #188]	; (8006a14 <HAL_RCC_ClockConfig+0x244>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0307 	and.w	r3, r3, #7
 800695e:	683a      	ldr	r2, [r7, #0]
 8006960:	429a      	cmp	r2, r3
 8006962:	d210      	bcs.n	8006986 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006964:	4b2b      	ldr	r3, [pc, #172]	; (8006a14 <HAL_RCC_ClockConfig+0x244>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f023 0207 	bic.w	r2, r3, #7
 800696c:	4929      	ldr	r1, [pc, #164]	; (8006a14 <HAL_RCC_ClockConfig+0x244>)
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	4313      	orrs	r3, r2
 8006972:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006974:	4b27      	ldr	r3, [pc, #156]	; (8006a14 <HAL_RCC_ClockConfig+0x244>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0307 	and.w	r3, r3, #7
 800697c:	683a      	ldr	r2, [r7, #0]
 800697e:	429a      	cmp	r2, r3
 8006980:	d001      	beq.n	8006986 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e041      	b.n	8006a0a <HAL_RCC_ClockConfig+0x23a>
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0304 	and.w	r3, r3, #4
 800698e:	2b00      	cmp	r3, #0
 8006990:	d008      	beq.n	80069a4 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006992:	4b21      	ldr	r3, [pc, #132]	; (8006a18 <HAL_RCC_ClockConfig+0x248>)
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	491e      	ldr	r1, [pc, #120]	; (8006a18 <HAL_RCC_ClockConfig+0x248>)
 80069a0:	4313      	orrs	r3, r2
 80069a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0308 	and.w	r3, r3, #8
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d009      	beq.n	80069c4 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069b0:	4b19      	ldr	r3, [pc, #100]	; (8006a18 <HAL_RCC_ClockConfig+0x248>)
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	00db      	lsls	r3, r3, #3
 80069be:	4916      	ldr	r1, [pc, #88]	; (8006a18 <HAL_RCC_ClockConfig+0x248>)
 80069c0:	4313      	orrs	r3, r2
 80069c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80069c4:	f000 f82e 	bl	8006a24 <HAL_RCC_GetSysClockFreq>
 80069c8:	4601      	mov	r1, r0
 80069ca:	4b13      	ldr	r3, [pc, #76]	; (8006a18 <HAL_RCC_ClockConfig+0x248>)
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069d2:	22f0      	movs	r2, #240	; 0xf0
 80069d4:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	fa92 f2a2 	rbit	r2, r2
 80069dc:	60ba      	str	r2, [r7, #8]
  return result;
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	613a      	str	r2, [r7, #16]
  if (value == 0U)
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	2a00      	cmp	r2, #0
 80069e6:	d101      	bne.n	80069ec <HAL_RCC_ClockConfig+0x21c>
    return 32U;
 80069e8:	2220      	movs	r2, #32
 80069ea:	e003      	b.n	80069f4 <HAL_RCC_ClockConfig+0x224>
  return __builtin_clz(value);
 80069ec:	693a      	ldr	r2, [r7, #16]
 80069ee:	fab2 f282 	clz	r2, r2
 80069f2:	b2d2      	uxtb	r2, r2
 80069f4:	40d3      	lsrs	r3, r2
 80069f6:	4a09      	ldr	r2, [pc, #36]	; (8006a1c <HAL_RCC_ClockConfig+0x24c>)
 80069f8:	5cd3      	ldrb	r3, [r2, r3]
 80069fa:	fa21 f303 	lsr.w	r3, r1, r3
 80069fe:	4a08      	ldr	r2, [pc, #32]	; (8006a20 <HAL_RCC_ClockConfig+0x250>)
 8006a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006a02:	2000      	movs	r0, #0
 8006a04:	f7fe ffb2 	bl	800596c <HAL_InitTick>

  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3718      	adds	r7, #24
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	40022000 	.word	0x40022000
 8006a18:	40021000 	.word	0x40021000
 8006a1c:	0800c2a4 	.word	0x0800c2a4
 8006a20:	20000068 	.word	0x20000068

08006a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b09d      	sub	sp, #116	; 0x74
 8006a28:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a2e:	2300      	movs	r3, #0
 8006a30:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a32:	2300      	movs	r3, #0
 8006a34:	663b      	str	r3, [r7, #96]	; 0x60
 8006a36:	2302      	movs	r3, #2
 8006a38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a3a:	2302      	movs	r3, #2
 8006a3c:	65bb      	str	r3, [r7, #88]	; 0x58
  uint32_t sysclockfreq = 0U;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	667b      	str	r3, [r7, #100]	; 0x64

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8006a42:	4b8a      	ldr	r3, [pc, #552]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x248>)
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	f003 030c 	and.w	r3, r3, #12
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00b      	beq.n	8006a66 <HAL_RCC_GetSysClockFreq+0x42>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8006a4e:	4b87      	ldr	r3, [pc, #540]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x248>)
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f003 030c 	and.w	r3, r3, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8006a56:	2b0c      	cmp	r3, #12
 8006a58:	d14a      	bne.n	8006af0 <HAL_RCC_GetSysClockFreq+0xcc>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8006a5a:	4b84      	ldr	r3, [pc, #528]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x248>)
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	f003 0303 	and.w	r3, r3, #3
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d144      	bne.n	8006af0 <HAL_RCC_GetSysClockFreq+0xcc>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8006a66:	4b81      	ldr	r3, [pc, #516]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x248>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0308 	and.w	r3, r3, #8
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d119      	bne.n	8006aa6 <HAL_RCC_GetSysClockFreq+0x82>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 8006a72:	4b7e      	ldr	r3, [pc, #504]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x248>)
 8006a74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a78:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006a7c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8006a80:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a84:	fa92 f2a2 	rbit	r2, r2
 8006a88:	64fa      	str	r2, [r7, #76]	; 0x4c
  return result;
 8006a8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a8c:	657a      	str	r2, [r7, #84]	; 0x54
  if (value == 0U)
 8006a8e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a90:	2a00      	cmp	r2, #0
 8006a92:	d101      	bne.n	8006a98 <HAL_RCC_GetSysClockFreq+0x74>
    return 32U;
 8006a94:	2220      	movs	r2, #32
 8006a96:	e003      	b.n	8006aa0 <HAL_RCC_GetSysClockFreq+0x7c>
  return __builtin_clz(value);
 8006a98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a9a:	fab2 f282 	clz	r2, r2
 8006a9e:	b2d2      	uxtb	r2, r2
 8006aa0:	40d3      	lsrs	r3, r2
 8006aa2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006aa4:	e016      	b.n	8006ad4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 8006aa6:	4b71      	ldr	r3, [pc, #452]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x248>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006aae:	22f0      	movs	r2, #240	; 0xf0
 8006ab0:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ab2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ab4:	fa92 f2a2 	rbit	r2, r2
 8006ab8:	643a      	str	r2, [r7, #64]	; 0x40
  return result;
 8006aba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006abc:	64ba      	str	r2, [r7, #72]	; 0x48
  if (value == 0U)
 8006abe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ac0:	2a00      	cmp	r2, #0
 8006ac2:	d101      	bne.n	8006ac8 <HAL_RCC_GetSysClockFreq+0xa4>
    return 32U;
 8006ac4:	2220      	movs	r2, #32
 8006ac6:	e003      	b.n	8006ad0 <HAL_RCC_GetSysClockFreq+0xac>
  return __builtin_clz(value);
 8006ac8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006aca:	fab2 f282 	clz	r2, r2
 8006ace:	b2d2      	uxtb	r2, r2
 8006ad0:	40d3      	lsrs	r3, r2
 8006ad2:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006ad4:	4a66      	ldr	r2, [pc, #408]	; (8006c70 <HAL_RCC_GetSysClockFreq+0x24c>)
 8006ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006adc:	66fb      	str	r3, [r7, #108]	; 0x6c

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8006ade:	4b63      	ldr	r3, [pc, #396]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x248>)
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f003 030c 	and.w	r3, r3, #12
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d113      	bne.n	8006b12 <HAL_RCC_GetSysClockFreq+0xee>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aec:	667b      	str	r3, [r7, #100]	; 0x64
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8006aee:	e010      	b.n	8006b12 <HAL_RCC_GetSysClockFreq+0xee>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006af0:	4b5e      	ldr	r3, [pc, #376]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x248>)
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f003 030c 	and.w	r3, r3, #12
 8006af8:	2b04      	cmp	r3, #4
 8006afa:	d102      	bne.n	8006b02 <HAL_RCC_GetSysClockFreq+0xde>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006afc:	4b5d      	ldr	r3, [pc, #372]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x250>)
 8006afe:	667b      	str	r3, [r7, #100]	; 0x64
 8006b00:	e007      	b.n	8006b12 <HAL_RCC_GetSysClockFreq+0xee>
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006b02:	4b5a      	ldr	r3, [pc, #360]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x248>)
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	f003 030c 	and.w	r3, r3, #12
 8006b0a:	2b08      	cmp	r3, #8
 8006b0c:	d101      	bne.n	8006b12 <HAL_RCC_GetSysClockFreq+0xee>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006b0e:	4b5a      	ldr	r3, [pc, #360]	; (8006c78 <HAL_RCC_GetSysClockFreq+0x254>)
 8006b10:	667b      	str	r3, [r7, #100]	; 0x64
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006b12:	4b56      	ldr	r3, [pc, #344]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x248>)
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f003 030c 	and.w	r3, r3, #12
 8006b1a:	2b0c      	cmp	r3, #12
 8006b1c:	f040 809f 	bne.w	8006c5e <HAL_RCC_GetSysClockFreq+0x23a>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006b20:	4b52      	ldr	r3, [pc, #328]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x248>)
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	f003 0303 	and.w	r3, r3, #3
 8006b28:	663b      	str	r3, [r7, #96]	; 0x60
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 8006b2a:	4b50      	ldr	r3, [pc, #320]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x248>)
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b32:	2270      	movs	r2, #112	; 0x70
 8006b34:	63ba      	str	r2, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b38:	fa92 f2a2 	rbit	r2, r2
 8006b3c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006b3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b40:	63fa      	str	r2, [r7, #60]	; 0x3c
  if (value == 0U)
 8006b42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b44:	2a00      	cmp	r2, #0
 8006b46:	d101      	bne.n	8006b4c <HAL_RCC_GetSysClockFreq+0x128>
    return 32U;
 8006b48:	2220      	movs	r2, #32
 8006b4a:	e003      	b.n	8006b54 <HAL_RCC_GetSysClockFreq+0x130>
  return __builtin_clz(value);
 8006b4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b4e:	fab2 f282 	clz	r2, r2
 8006b52:	b2d2      	uxtb	r2, r2
 8006b54:	40d3      	lsrs	r3, r2
 8006b56:	3301      	adds	r3, #1
 8006b58:	65bb      	str	r3, [r7, #88]	; 0x58

    switch (pllsource)
 8006b5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d002      	beq.n	8006b66 <HAL_RCC_GetSysClockFreq+0x142>
 8006b60:	2b03      	cmp	r3, #3
 8006b62:	d01f      	beq.n	8006ba4 <HAL_RCC_GetSysClockFreq+0x180>
 8006b64:	e03d      	b.n	8006be2 <HAL_RCC_GetSysClockFreq+0x1be>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8006b66:	4a43      	ldr	r2, [pc, #268]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x250>)
 8006b68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b6e:	4a3f      	ldr	r2, [pc, #252]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x248>)
 8006b70:	68d2      	ldr	r2, [r2, #12]
 8006b72:	f402 42fe 	and.w	r2, r2, #32512	; 0x7f00
 8006b76:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
 8006b7a:	62f9      	str	r1, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b7e:	fa91 f1a1 	rbit	r1, r1
 8006b82:	62b9      	str	r1, [r7, #40]	; 0x28
  return result;
 8006b84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b86:	6339      	str	r1, [r7, #48]	; 0x30
  if (value == 0U)
 8006b88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b8a:	2900      	cmp	r1, #0
 8006b8c:	d101      	bne.n	8006b92 <HAL_RCC_GetSysClockFreq+0x16e>
    return 32U;
 8006b8e:	2120      	movs	r1, #32
 8006b90:	e003      	b.n	8006b9a <HAL_RCC_GetSysClockFreq+0x176>
  return __builtin_clz(value);
 8006b92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b94:	fab1 f181 	clz	r1, r1
 8006b98:	b2c9      	uxtb	r1, r1
 8006b9a:	40ca      	lsrs	r2, r1
 8006b9c:	fb02 f303 	mul.w	r3, r2, r3
 8006ba0:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8006ba2:	e03d      	b.n	8006c20 <HAL_RCC_GetSysClockFreq+0x1fc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8006ba4:	4a34      	ldr	r2, [pc, #208]	; (8006c78 <HAL_RCC_GetSysClockFreq+0x254>)
 8006ba6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bac:	4a2f      	ldr	r2, [pc, #188]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x248>)
 8006bae:	68d2      	ldr	r2, [r2, #12]
 8006bb0:	f402 42fe 	and.w	r2, r2, #32512	; 0x7f00
 8006bb4:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
 8006bb8:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bba:	6a39      	ldr	r1, [r7, #32]
 8006bbc:	fa91 f1a1 	rbit	r1, r1
 8006bc0:	61f9      	str	r1, [r7, #28]
  return result;
 8006bc2:	69f9      	ldr	r1, [r7, #28]
 8006bc4:	6279      	str	r1, [r7, #36]	; 0x24
  if (value == 0U)
 8006bc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bc8:	2900      	cmp	r1, #0
 8006bca:	d101      	bne.n	8006bd0 <HAL_RCC_GetSysClockFreq+0x1ac>
    return 32U;
 8006bcc:	2120      	movs	r1, #32
 8006bce:	e003      	b.n	8006bd8 <HAL_RCC_GetSysClockFreq+0x1b4>
  return __builtin_clz(value);
 8006bd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bd2:	fab1 f181 	clz	r1, r1
 8006bd6:	b2c9      	uxtb	r1, r1
 8006bd8:	40ca      	lsrs	r2, r1
 8006bda:	fb02 f303 	mul.w	r3, r2, r3
 8006bde:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8006be0:	e01e      	b.n	8006c20 <HAL_RCC_GetSysClockFreq+0x1fc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8006be2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006be4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bea:	4a20      	ldr	r2, [pc, #128]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x248>)
 8006bec:	68d2      	ldr	r2, [r2, #12]
 8006bee:	f402 42fe 	and.w	r2, r2, #32512	; 0x7f00
 8006bf2:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
 8006bf6:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bf8:	6979      	ldr	r1, [r7, #20]
 8006bfa:	fa91 f1a1 	rbit	r1, r1
 8006bfe:	6139      	str	r1, [r7, #16]
  return result;
 8006c00:	6939      	ldr	r1, [r7, #16]
 8006c02:	61b9      	str	r1, [r7, #24]
  if (value == 0U)
 8006c04:	69b9      	ldr	r1, [r7, #24]
 8006c06:	2900      	cmp	r1, #0
 8006c08:	d101      	bne.n	8006c0e <HAL_RCC_GetSysClockFreq+0x1ea>
    return 32U;
 8006c0a:	2120      	movs	r1, #32
 8006c0c:	e003      	b.n	8006c16 <HAL_RCC_GetSysClockFreq+0x1f2>
  return __builtin_clz(value);
 8006c0e:	69b9      	ldr	r1, [r7, #24]
 8006c10:	fab1 f181 	clz	r1, r1
 8006c14:	b2c9      	uxtb	r1, r1
 8006c16:	40ca      	lsrs	r2, r1
 8006c18:	fb02 f303 	mul.w	r3, r2, r3
 8006c1c:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8006c1e:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 8006c20:	4b12      	ldr	r3, [pc, #72]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x248>)
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8006c28:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8006c2c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	fa92 f2a2 	rbit	r2, r2
 8006c34:	607a      	str	r2, [r7, #4]
  return result;
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	60fa      	str	r2, [r7, #12]
  if (value == 0U)
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	2a00      	cmp	r2, #0
 8006c3e:	d101      	bne.n	8006c44 <HAL_RCC_GetSysClockFreq+0x220>
    return 32U;
 8006c40:	2220      	movs	r2, #32
 8006c42:	e003      	b.n	8006c4c <HAL_RCC_GetSysClockFreq+0x228>
  return __builtin_clz(value);
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	fab2 f282 	clz	r2, r2
 8006c4a:	b2d2      	uxtb	r2, r2
 8006c4c:	40d3      	lsrs	r3, r2
 8006c4e:	3301      	adds	r3, #1
 8006c50:	005b      	lsls	r3, r3, #1
 8006c52:	65fb      	str	r3, [r7, #92]	; 0x5c
    sysclockfreq = pllvco/pllr;
 8006c54:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c5c:	667b      	str	r3, [r7, #100]	; 0x64
  }

  return sysclockfreq;
 8006c5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3774      	adds	r7, #116	; 0x74
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr
 8006c6c:	40021000 	.word	0x40021000
 8006c70:	0800c2b4 	.word	0x0800c2b4
 8006c74:	00f42400 	.word	0x00f42400
 8006c78:	007a1200 	.word	0x007a1200

08006c7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0;
 8006c84:	2300      	movs	r3, #0
 8006c86:	617b      	str	r3, [r7, #20]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006c88:	2300      	movs	r3, #0
 8006c8a:	613b      	str	r3, [r7, #16]
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006c8c:	4b2a      	ldr	r3, [pc, #168]	; (8006d38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d003      	beq.n	8006ca0 <RCC_SetFlashLatencyFromMSIRange+0x24>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006c98:	f7ff f95e 	bl	8005f58 <HAL_PWREx_GetVoltageRange>
 8006c9c:	6178      	str	r0, [r7, #20]
 8006c9e:	e014      	b.n	8006cca <RCC_SetFlashLatencyFromMSIRange+0x4e>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ca0:	4b25      	ldr	r3, [pc, #148]	; (8006d38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca4:	4a24      	ldr	r2, [pc, #144]	; (8006d38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006caa:	6593      	str	r3, [r2, #88]	; 0x58
 8006cac:	4b22      	ldr	r3, [pc, #136]	; (8006d38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cb4:	60fb      	str	r3, [r7, #12]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006cb8:	f7ff f94e 	bl	8005f58 <HAL_PWREx_GetVoltageRange>
 8006cbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006cbe:	4b1e      	ldr	r3, [pc, #120]	; (8006d38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cc2:	4a1d      	ldr	r2, [pc, #116]	; (8006d38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cc8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cd0:	d10b      	bne.n	8006cea <RCC_SetFlashLatencyFromMSIRange+0x6e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2b80      	cmp	r3, #128	; 0x80
 8006cd6:	d919      	bls.n	8006d0c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2ba0      	cmp	r3, #160	; 0xa0
 8006cdc:	d902      	bls.n	8006ce4 <RCC_SetFlashLatencyFromMSIRange+0x68>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006cde:	2302      	movs	r3, #2
 8006ce0:	613b      	str	r3, [r7, #16]
 8006ce2:	e013      	b.n	8006d0c <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	613b      	str	r3, [r7, #16]
 8006ce8:	e010      	b.n	8006d0c <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if(msirange > RCC_MSIRANGE_8)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2b80      	cmp	r3, #128	; 0x80
 8006cee:	d902      	bls.n	8006cf6 <RCC_SetFlashLatencyFromMSIRange+0x7a>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	613b      	str	r3, [r7, #16]
 8006cf4:	e00a      	b.n	8006d0c <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2b80      	cmp	r3, #128	; 0x80
 8006cfa:	d102      	bne.n	8006d02 <RCC_SetFlashLatencyFromMSIRange+0x86>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006cfc:	2302      	movs	r3, #2
 8006cfe:	613b      	str	r3, [r7, #16]
 8006d00:	e004      	b.n	8006d0c <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else if(msirange == RCC_MSIRANGE_7) 
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2b70      	cmp	r3, #112	; 0x70
 8006d06:	d101      	bne.n	8006d0c <RCC_SetFlashLatencyFromMSIRange+0x90>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006d08:	2301      	movs	r3, #1
 8006d0a:	613b      	str	r3, [r7, #16]
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 8006d0c:	4b0b      	ldr	r3, [pc, #44]	; (8006d3c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f023 0207 	bic.w	r2, r3, #7
 8006d14:	4909      	ldr	r1, [pc, #36]	; (8006d3c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8006d1c:	4b07      	ldr	r3, [pc, #28]	; (8006d3c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0307 	and.w	r3, r3, #7
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d001      	beq.n	8006d2e <RCC_SetFlashLatencyFromMSIRange+0xb2>
  {
    return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e000      	b.n	8006d30 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  }
  
  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3718      	adds	r7, #24
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	40021000 	.word	0x40021000
 8006d3c:	40022000 	.word	0x40022000

08006d40 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d101      	bne.n	8006d52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e089      	b.n	8006e66 <HAL_SPI_Init+0x126>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));

  if(hspi->State == HAL_SPI_STATE_RESET)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d106      	bne.n	8006d6a <HAL_SPI_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f882 	bl	8006e6e <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2202      	movs	r2, #2
 8006d6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d80:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d8a:	d902      	bls.n	8006d92 <HAL_SPI_Init+0x52>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	60fb      	str	r3, [r7, #12]
 8006d90:	e002      	b.n	8006d98 <HAL_SPI_Init+0x58>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006d92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d96:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006da0:	d007      	beq.n	8006db2 <HAL_SPI_Init+0x72>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006daa:	d002      	beq.n	8006db2 <HAL_SPI_Init+0x72>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d10b      	bne.n	8006dd2 <HAL_SPI_Init+0x92>
  {
    /* CRC Length aligned on the data size : value set by default */
    if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006dc2:	d903      	bls.n	8006dcc <HAL_SPI_Init+0x8c>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2202      	movs	r2, #2
 8006dc8:	631a      	str	r2, [r3, #48]	; 0x30
 8006dca:	e002      	b.n	8006dd2 <HAL_SPI_Init+0x92>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*---------------------------- SPIx CR1 & CR2 Configuration ------------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction |
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	685a      	ldr	r2, [r3, #4]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	431a      	orrs	r2, r3
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	691b      	ldr	r3, [r3, #16]
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction |
 8006de0:	431a      	orrs	r2, r3
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	431a      	orrs	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006df0:	431a      	orrs	r2, r3
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	69db      	ldr	r3, [r3, #28]
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 8006df6:	431a      	orrs	r2, r3
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a1b      	ldr	r3, [r3, #32]
 8006dfc:	ea42 0103 	orr.w	r1, r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction |
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 8006e08:	430a      	orrs	r2, r1
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction |
 8006e0a:	601a      	str	r2, [r3, #0]

  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d107      	bne.n	8006e24 <HAL_SPI_Init+0xe4>
  {
    hspi->Instance->CR1|= SPI_CR1_CRCL;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e22:	601a      	str	r2, [r3, #0]
  }

  /* Configure : NSS management */
  /* Configure : Rx Fifo Threshold */
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	699b      	ldr	r3, [r3, #24]
 8006e28:	0c1b      	lsrs	r3, r3, #16
 8006e2a:	f003 0204 	and.w	r2, r3, #4
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e32:	431a      	orrs	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e38:	431a      	orrs	r2, r3
                         hspi->Init.DataSize ) | frxth;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68db      	ldr	r3, [r3, #12]
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 8006e3e:	ea42 0103 	orr.w	r1, r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
                         hspi->Init.DataSize ) | frxth;
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	430a      	orrs	r2, r1
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 8006e4a:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Configure : CRC Polynomial */
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006e54:	611a      	str	r2, [r3, #16]

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State= HAL_SPI_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b083      	sub	sp, #12
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006e76:	bf00      	nop
 8006e78:	370c      	adds	r7, #12
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <_ZdlPvj>:
 8006e82:	f000 b816 	b.w	8006eb2 <_ZdlPv>

08006e86 <_Znwj>:
 8006e86:	b510      	push	{r4, lr}
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	bf14      	ite	ne
 8006e8c:	4604      	movne	r4, r0
 8006e8e:	2401      	moveq	r4, #1
 8006e90:	4620      	mov	r0, r4
 8006e92:	f000 fca7 	bl	80077e4 <malloc>
 8006e96:	b930      	cbnz	r0, 8006ea6 <_Znwj+0x20>
 8006e98:	f000 f820 	bl	8006edc <_ZSt15get_new_handlerv>
 8006e9c:	b908      	cbnz	r0, 8006ea2 <_Znwj+0x1c>
 8006e9e:	f000 f825 	bl	8006eec <abort>
 8006ea2:	4780      	blx	r0
 8006ea4:	e7f4      	b.n	8006e90 <_Znwj+0xa>
 8006ea6:	bd10      	pop	{r4, pc}

08006ea8 <_Znaj>:
 8006ea8:	f7ff bfed 	b.w	8006e86 <_Znwj>

08006eac <__cxa_pure_virtual>:
 8006eac:	b508      	push	{r3, lr}
 8006eae:	f000 f80f 	bl	8006ed0 <_ZSt9terminatev>

08006eb2 <_ZdlPv>:
 8006eb2:	f000 bc9f 	b.w	80077f4 <free>

08006eb6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8006eb6:	b508      	push	{r3, lr}
 8006eb8:	4780      	blx	r0
 8006eba:	f000 f817 	bl	8006eec <abort>
	...

08006ec0 <_ZSt13get_terminatev>:
 8006ec0:	4b02      	ldr	r3, [pc, #8]	; (8006ecc <_ZSt13get_terminatev+0xc>)
 8006ec2:	6818      	ldr	r0, [r3, #0]
 8006ec4:	f3bf 8f5b 	dmb	ish
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	20000090 	.word	0x20000090

08006ed0 <_ZSt9terminatev>:
 8006ed0:	b508      	push	{r3, lr}
 8006ed2:	f7ff fff5 	bl	8006ec0 <_ZSt13get_terminatev>
 8006ed6:	f7ff ffee 	bl	8006eb6 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08006edc <_ZSt15get_new_handlerv>:
 8006edc:	4b02      	ldr	r3, [pc, #8]	; (8006ee8 <_ZSt15get_new_handlerv+0xc>)
 8006ede:	6818      	ldr	r0, [r3, #0]
 8006ee0:	f3bf 8f5b 	dmb	ish
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	2000043c 	.word	0x2000043c

08006eec <abort>:
 8006eec:	b508      	push	{r3, lr}
 8006eee:	2006      	movs	r0, #6
 8006ef0:	f001 fd2c 	bl	800894c <raise>
 8006ef4:	2001      	movs	r0, #1
 8006ef6:	f7fb f849 	bl	8001f8c <_exit>

08006efa <difftime>:
 8006efa:	1a80      	subs	r0, r0, r2
 8006efc:	b508      	push	{r3, lr}
 8006efe:	eb61 0103 	sbc.w	r1, r1, r3
 8006f02:	f7f9 fb5b 	bl	80005bc <__aeabi_l2d>
 8006f06:	ec41 0b10 	vmov	d0, r0, r1
 8006f0a:	bd08      	pop	{r3, pc}

08006f0c <__errno>:
 8006f0c:	4b01      	ldr	r3, [pc, #4]	; (8006f14 <__errno+0x8>)
 8006f0e:	6818      	ldr	r0, [r3, #0]
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	20000094 	.word	0x20000094

08006f18 <_fclose_r>:
 8006f18:	b570      	push	{r4, r5, r6, lr}
 8006f1a:	4605      	mov	r5, r0
 8006f1c:	460c      	mov	r4, r1
 8006f1e:	b911      	cbnz	r1, 8006f26 <_fclose_r+0xe>
 8006f20:	2600      	movs	r6, #0
 8006f22:	4630      	mov	r0, r6
 8006f24:	bd70      	pop	{r4, r5, r6, pc}
 8006f26:	b118      	cbz	r0, 8006f30 <_fclose_r+0x18>
 8006f28:	6983      	ldr	r3, [r0, #24]
 8006f2a:	b90b      	cbnz	r3, 8006f30 <_fclose_r+0x18>
 8006f2c:	f000 f936 	bl	800719c <__sinit>
 8006f30:	4b1f      	ldr	r3, [pc, #124]	; (8006fb0 <_fclose_r+0x98>)
 8006f32:	429c      	cmp	r4, r3
 8006f34:	d132      	bne.n	8006f9c <_fclose_r+0x84>
 8006f36:	686c      	ldr	r4, [r5, #4]
 8006f38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d0ef      	beq.n	8006f20 <_fclose_r+0x8>
 8006f40:	4621      	mov	r1, r4
 8006f42:	4628      	mov	r0, r5
 8006f44:	f000 f83a 	bl	8006fbc <__sflush_r>
 8006f48:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006f4a:	4606      	mov	r6, r0
 8006f4c:	b133      	cbz	r3, 8006f5c <_fclose_r+0x44>
 8006f4e:	6a21      	ldr	r1, [r4, #32]
 8006f50:	4628      	mov	r0, r5
 8006f52:	4798      	blx	r3
 8006f54:	2800      	cmp	r0, #0
 8006f56:	bfb8      	it	lt
 8006f58:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 8006f5c:	89a3      	ldrh	r3, [r4, #12]
 8006f5e:	061b      	lsls	r3, r3, #24
 8006f60:	d503      	bpl.n	8006f6a <_fclose_r+0x52>
 8006f62:	6921      	ldr	r1, [r4, #16]
 8006f64:	4628      	mov	r0, r5
 8006f66:	f000 fef5 	bl	8007d54 <_free_r>
 8006f6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f6c:	b141      	cbz	r1, 8006f80 <_fclose_r+0x68>
 8006f6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f72:	4299      	cmp	r1, r3
 8006f74:	d002      	beq.n	8006f7c <_fclose_r+0x64>
 8006f76:	4628      	mov	r0, r5
 8006f78:	f000 feec 	bl	8007d54 <_free_r>
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	6363      	str	r3, [r4, #52]	; 0x34
 8006f80:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006f82:	b121      	cbz	r1, 8006f8e <_fclose_r+0x76>
 8006f84:	4628      	mov	r0, r5
 8006f86:	f000 fee5 	bl	8007d54 <_free_r>
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	64a3      	str	r3, [r4, #72]	; 0x48
 8006f8e:	f000 f971 	bl	8007274 <__sfp_lock_acquire>
 8006f92:	2300      	movs	r3, #0
 8006f94:	81a3      	strh	r3, [r4, #12]
 8006f96:	f000 f96e 	bl	8007276 <__sfp_lock_release>
 8006f9a:	e7c2      	b.n	8006f22 <_fclose_r+0xa>
 8006f9c:	4b05      	ldr	r3, [pc, #20]	; (8006fb4 <_fclose_r+0x9c>)
 8006f9e:	429c      	cmp	r4, r3
 8006fa0:	d101      	bne.n	8006fa6 <_fclose_r+0x8e>
 8006fa2:	68ac      	ldr	r4, [r5, #8]
 8006fa4:	e7c8      	b.n	8006f38 <_fclose_r+0x20>
 8006fa6:	4b04      	ldr	r3, [pc, #16]	; (8006fb8 <_fclose_r+0xa0>)
 8006fa8:	429c      	cmp	r4, r3
 8006faa:	bf08      	it	eq
 8006fac:	68ec      	ldreq	r4, [r5, #12]
 8006fae:	e7c3      	b.n	8006f38 <_fclose_r+0x20>
 8006fb0:	08018018 	.word	0x08018018
 8006fb4:	08018038 	.word	0x08018038
 8006fb8:	08017ff8 	.word	0x08017ff8

08006fbc <__sflush_r>:
 8006fbc:	898a      	ldrh	r2, [r1, #12]
 8006fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fc2:	4605      	mov	r5, r0
 8006fc4:	0710      	lsls	r0, r2, #28
 8006fc6:	460c      	mov	r4, r1
 8006fc8:	d458      	bmi.n	800707c <__sflush_r+0xc0>
 8006fca:	684b      	ldr	r3, [r1, #4]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	dc05      	bgt.n	8006fdc <__sflush_r+0x20>
 8006fd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	dc02      	bgt.n	8006fdc <__sflush_r+0x20>
 8006fd6:	2000      	movs	r0, #0
 8006fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006fde:	2e00      	cmp	r6, #0
 8006fe0:	d0f9      	beq.n	8006fd6 <__sflush_r+0x1a>
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006fe8:	682f      	ldr	r7, [r5, #0]
 8006fea:	6a21      	ldr	r1, [r4, #32]
 8006fec:	602b      	str	r3, [r5, #0]
 8006fee:	d032      	beq.n	8007056 <__sflush_r+0x9a>
 8006ff0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ff2:	89a3      	ldrh	r3, [r4, #12]
 8006ff4:	075a      	lsls	r2, r3, #29
 8006ff6:	d505      	bpl.n	8007004 <__sflush_r+0x48>
 8006ff8:	6863      	ldr	r3, [r4, #4]
 8006ffa:	1ac0      	subs	r0, r0, r3
 8006ffc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ffe:	b10b      	cbz	r3, 8007004 <__sflush_r+0x48>
 8007000:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007002:	1ac0      	subs	r0, r0, r3
 8007004:	2300      	movs	r3, #0
 8007006:	4602      	mov	r2, r0
 8007008:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800700a:	6a21      	ldr	r1, [r4, #32]
 800700c:	4628      	mov	r0, r5
 800700e:	47b0      	blx	r6
 8007010:	1c43      	adds	r3, r0, #1
 8007012:	89a3      	ldrh	r3, [r4, #12]
 8007014:	d106      	bne.n	8007024 <__sflush_r+0x68>
 8007016:	6829      	ldr	r1, [r5, #0]
 8007018:	291d      	cmp	r1, #29
 800701a:	d848      	bhi.n	80070ae <__sflush_r+0xf2>
 800701c:	4a29      	ldr	r2, [pc, #164]	; (80070c4 <__sflush_r+0x108>)
 800701e:	40ca      	lsrs	r2, r1
 8007020:	07d6      	lsls	r6, r2, #31
 8007022:	d544      	bpl.n	80070ae <__sflush_r+0xf2>
 8007024:	2200      	movs	r2, #0
 8007026:	6062      	str	r2, [r4, #4]
 8007028:	04d9      	lsls	r1, r3, #19
 800702a:	6922      	ldr	r2, [r4, #16]
 800702c:	6022      	str	r2, [r4, #0]
 800702e:	d504      	bpl.n	800703a <__sflush_r+0x7e>
 8007030:	1c42      	adds	r2, r0, #1
 8007032:	d101      	bne.n	8007038 <__sflush_r+0x7c>
 8007034:	682b      	ldr	r3, [r5, #0]
 8007036:	b903      	cbnz	r3, 800703a <__sflush_r+0x7e>
 8007038:	6560      	str	r0, [r4, #84]	; 0x54
 800703a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800703c:	602f      	str	r7, [r5, #0]
 800703e:	2900      	cmp	r1, #0
 8007040:	d0c9      	beq.n	8006fd6 <__sflush_r+0x1a>
 8007042:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007046:	4299      	cmp	r1, r3
 8007048:	d002      	beq.n	8007050 <__sflush_r+0x94>
 800704a:	4628      	mov	r0, r5
 800704c:	f000 fe82 	bl	8007d54 <_free_r>
 8007050:	2000      	movs	r0, #0
 8007052:	6360      	str	r0, [r4, #52]	; 0x34
 8007054:	e7c0      	b.n	8006fd8 <__sflush_r+0x1c>
 8007056:	2301      	movs	r3, #1
 8007058:	4628      	mov	r0, r5
 800705a:	47b0      	blx	r6
 800705c:	1c41      	adds	r1, r0, #1
 800705e:	d1c8      	bne.n	8006ff2 <__sflush_r+0x36>
 8007060:	682b      	ldr	r3, [r5, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d0c5      	beq.n	8006ff2 <__sflush_r+0x36>
 8007066:	2b1d      	cmp	r3, #29
 8007068:	d001      	beq.n	800706e <__sflush_r+0xb2>
 800706a:	2b16      	cmp	r3, #22
 800706c:	d101      	bne.n	8007072 <__sflush_r+0xb6>
 800706e:	602f      	str	r7, [r5, #0]
 8007070:	e7b1      	b.n	8006fd6 <__sflush_r+0x1a>
 8007072:	89a3      	ldrh	r3, [r4, #12]
 8007074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007078:	81a3      	strh	r3, [r4, #12]
 800707a:	e7ad      	b.n	8006fd8 <__sflush_r+0x1c>
 800707c:	690f      	ldr	r7, [r1, #16]
 800707e:	2f00      	cmp	r7, #0
 8007080:	d0a9      	beq.n	8006fd6 <__sflush_r+0x1a>
 8007082:	0793      	lsls	r3, r2, #30
 8007084:	680e      	ldr	r6, [r1, #0]
 8007086:	bf08      	it	eq
 8007088:	694b      	ldreq	r3, [r1, #20]
 800708a:	600f      	str	r7, [r1, #0]
 800708c:	bf18      	it	ne
 800708e:	2300      	movne	r3, #0
 8007090:	eba6 0807 	sub.w	r8, r6, r7
 8007094:	608b      	str	r3, [r1, #8]
 8007096:	f1b8 0f00 	cmp.w	r8, #0
 800709a:	dd9c      	ble.n	8006fd6 <__sflush_r+0x1a>
 800709c:	4643      	mov	r3, r8
 800709e:	463a      	mov	r2, r7
 80070a0:	6a21      	ldr	r1, [r4, #32]
 80070a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80070a4:	4628      	mov	r0, r5
 80070a6:	47b0      	blx	r6
 80070a8:	2800      	cmp	r0, #0
 80070aa:	dc06      	bgt.n	80070ba <__sflush_r+0xfe>
 80070ac:	89a3      	ldrh	r3, [r4, #12]
 80070ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070b2:	81a3      	strh	r3, [r4, #12]
 80070b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070b8:	e78e      	b.n	8006fd8 <__sflush_r+0x1c>
 80070ba:	4407      	add	r7, r0
 80070bc:	eba8 0800 	sub.w	r8, r8, r0
 80070c0:	e7e9      	b.n	8007096 <__sflush_r+0xda>
 80070c2:	bf00      	nop
 80070c4:	20400001 	.word	0x20400001

080070c8 <_fflush_r>:
 80070c8:	b538      	push	{r3, r4, r5, lr}
 80070ca:	690b      	ldr	r3, [r1, #16]
 80070cc:	4605      	mov	r5, r0
 80070ce:	460c      	mov	r4, r1
 80070d0:	b1db      	cbz	r3, 800710a <_fflush_r+0x42>
 80070d2:	b118      	cbz	r0, 80070dc <_fflush_r+0x14>
 80070d4:	6983      	ldr	r3, [r0, #24]
 80070d6:	b90b      	cbnz	r3, 80070dc <_fflush_r+0x14>
 80070d8:	f000 f860 	bl	800719c <__sinit>
 80070dc:	4b0c      	ldr	r3, [pc, #48]	; (8007110 <_fflush_r+0x48>)
 80070de:	429c      	cmp	r4, r3
 80070e0:	d109      	bne.n	80070f6 <_fflush_r+0x2e>
 80070e2:	686c      	ldr	r4, [r5, #4]
 80070e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070e8:	b17b      	cbz	r3, 800710a <_fflush_r+0x42>
 80070ea:	4621      	mov	r1, r4
 80070ec:	4628      	mov	r0, r5
 80070ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070f2:	f7ff bf63 	b.w	8006fbc <__sflush_r>
 80070f6:	4b07      	ldr	r3, [pc, #28]	; (8007114 <_fflush_r+0x4c>)
 80070f8:	429c      	cmp	r4, r3
 80070fa:	d101      	bne.n	8007100 <_fflush_r+0x38>
 80070fc:	68ac      	ldr	r4, [r5, #8]
 80070fe:	e7f1      	b.n	80070e4 <_fflush_r+0x1c>
 8007100:	4b05      	ldr	r3, [pc, #20]	; (8007118 <_fflush_r+0x50>)
 8007102:	429c      	cmp	r4, r3
 8007104:	bf08      	it	eq
 8007106:	68ec      	ldreq	r4, [r5, #12]
 8007108:	e7ec      	b.n	80070e4 <_fflush_r+0x1c>
 800710a:	2000      	movs	r0, #0
 800710c:	bd38      	pop	{r3, r4, r5, pc}
 800710e:	bf00      	nop
 8007110:	08018018 	.word	0x08018018
 8007114:	08018038 	.word	0x08018038
 8007118:	08017ff8 	.word	0x08017ff8

0800711c <std>:
 800711c:	2300      	movs	r3, #0
 800711e:	b510      	push	{r4, lr}
 8007120:	4604      	mov	r4, r0
 8007122:	e9c0 3300 	strd	r3, r3, [r0]
 8007126:	6083      	str	r3, [r0, #8]
 8007128:	8181      	strh	r1, [r0, #12]
 800712a:	6643      	str	r3, [r0, #100]	; 0x64
 800712c:	81c2      	strh	r2, [r0, #14]
 800712e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007132:	6183      	str	r3, [r0, #24]
 8007134:	4619      	mov	r1, r3
 8007136:	2208      	movs	r2, #8
 8007138:	305c      	adds	r0, #92	; 0x5c
 800713a:	f000 fb6e 	bl	800781a <memset>
 800713e:	4b05      	ldr	r3, [pc, #20]	; (8007154 <std+0x38>)
 8007140:	6263      	str	r3, [r4, #36]	; 0x24
 8007142:	4b05      	ldr	r3, [pc, #20]	; (8007158 <std+0x3c>)
 8007144:	62a3      	str	r3, [r4, #40]	; 0x28
 8007146:	4b05      	ldr	r3, [pc, #20]	; (800715c <std+0x40>)
 8007148:	62e3      	str	r3, [r4, #44]	; 0x2c
 800714a:	4b05      	ldr	r3, [pc, #20]	; (8007160 <std+0x44>)
 800714c:	6224      	str	r4, [r4, #32]
 800714e:	6323      	str	r3, [r4, #48]	; 0x30
 8007150:	bd10      	pop	{r4, pc}
 8007152:	bf00      	nop
 8007154:	080089c5 	.word	0x080089c5
 8007158:	080089eb 	.word	0x080089eb
 800715c:	08008a23 	.word	0x08008a23
 8007160:	08008a47 	.word	0x08008a47

08007164 <_cleanup_r>:
 8007164:	4901      	ldr	r1, [pc, #4]	; (800716c <_cleanup_r+0x8>)
 8007166:	f000 b93d 	b.w	80073e4 <_fwalk_reent>
 800716a:	bf00      	nop
 800716c:	080070c9 	.word	0x080070c9

08007170 <__sfmoreglue>:
 8007170:	b570      	push	{r4, r5, r6, lr}
 8007172:	1e4a      	subs	r2, r1, #1
 8007174:	2568      	movs	r5, #104	; 0x68
 8007176:	4355      	muls	r5, r2
 8007178:	460e      	mov	r6, r1
 800717a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800717e:	f000 fe37 	bl	8007df0 <_malloc_r>
 8007182:	4604      	mov	r4, r0
 8007184:	b140      	cbz	r0, 8007198 <__sfmoreglue+0x28>
 8007186:	2100      	movs	r1, #0
 8007188:	e9c0 1600 	strd	r1, r6, [r0]
 800718c:	300c      	adds	r0, #12
 800718e:	60a0      	str	r0, [r4, #8]
 8007190:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007194:	f000 fb41 	bl	800781a <memset>
 8007198:	4620      	mov	r0, r4
 800719a:	bd70      	pop	{r4, r5, r6, pc}

0800719c <__sinit>:
 800719c:	6983      	ldr	r3, [r0, #24]
 800719e:	b510      	push	{r4, lr}
 80071a0:	4604      	mov	r4, r0
 80071a2:	bb33      	cbnz	r3, 80071f2 <__sinit+0x56>
 80071a4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80071a8:	6503      	str	r3, [r0, #80]	; 0x50
 80071aa:	4b12      	ldr	r3, [pc, #72]	; (80071f4 <__sinit+0x58>)
 80071ac:	4a12      	ldr	r2, [pc, #72]	; (80071f8 <__sinit+0x5c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6282      	str	r2, [r0, #40]	; 0x28
 80071b2:	4298      	cmp	r0, r3
 80071b4:	bf04      	itt	eq
 80071b6:	2301      	moveq	r3, #1
 80071b8:	6183      	streq	r3, [r0, #24]
 80071ba:	f000 f81f 	bl	80071fc <__sfp>
 80071be:	6060      	str	r0, [r4, #4]
 80071c0:	4620      	mov	r0, r4
 80071c2:	f000 f81b 	bl	80071fc <__sfp>
 80071c6:	60a0      	str	r0, [r4, #8]
 80071c8:	4620      	mov	r0, r4
 80071ca:	f000 f817 	bl	80071fc <__sfp>
 80071ce:	2200      	movs	r2, #0
 80071d0:	60e0      	str	r0, [r4, #12]
 80071d2:	2104      	movs	r1, #4
 80071d4:	6860      	ldr	r0, [r4, #4]
 80071d6:	f7ff ffa1 	bl	800711c <std>
 80071da:	2201      	movs	r2, #1
 80071dc:	2109      	movs	r1, #9
 80071de:	68a0      	ldr	r0, [r4, #8]
 80071e0:	f7ff ff9c 	bl	800711c <std>
 80071e4:	2202      	movs	r2, #2
 80071e6:	2112      	movs	r1, #18
 80071e8:	68e0      	ldr	r0, [r4, #12]
 80071ea:	f7ff ff97 	bl	800711c <std>
 80071ee:	2301      	movs	r3, #1
 80071f0:	61a3      	str	r3, [r4, #24]
 80071f2:	bd10      	pop	{r4, pc}
 80071f4:	08018058 	.word	0x08018058
 80071f8:	08007165 	.word	0x08007165

080071fc <__sfp>:
 80071fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fe:	4b1b      	ldr	r3, [pc, #108]	; (800726c <__sfp+0x70>)
 8007200:	681e      	ldr	r6, [r3, #0]
 8007202:	69b3      	ldr	r3, [r6, #24]
 8007204:	4607      	mov	r7, r0
 8007206:	b913      	cbnz	r3, 800720e <__sfp+0x12>
 8007208:	4630      	mov	r0, r6
 800720a:	f7ff ffc7 	bl	800719c <__sinit>
 800720e:	3648      	adds	r6, #72	; 0x48
 8007210:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007214:	3b01      	subs	r3, #1
 8007216:	d503      	bpl.n	8007220 <__sfp+0x24>
 8007218:	6833      	ldr	r3, [r6, #0]
 800721a:	b133      	cbz	r3, 800722a <__sfp+0x2e>
 800721c:	6836      	ldr	r6, [r6, #0]
 800721e:	e7f7      	b.n	8007210 <__sfp+0x14>
 8007220:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007224:	b16d      	cbz	r5, 8007242 <__sfp+0x46>
 8007226:	3468      	adds	r4, #104	; 0x68
 8007228:	e7f4      	b.n	8007214 <__sfp+0x18>
 800722a:	2104      	movs	r1, #4
 800722c:	4638      	mov	r0, r7
 800722e:	f7ff ff9f 	bl	8007170 <__sfmoreglue>
 8007232:	6030      	str	r0, [r6, #0]
 8007234:	2800      	cmp	r0, #0
 8007236:	d1f1      	bne.n	800721c <__sfp+0x20>
 8007238:	230c      	movs	r3, #12
 800723a:	603b      	str	r3, [r7, #0]
 800723c:	4604      	mov	r4, r0
 800723e:	4620      	mov	r0, r4
 8007240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007242:	4b0b      	ldr	r3, [pc, #44]	; (8007270 <__sfp+0x74>)
 8007244:	6665      	str	r5, [r4, #100]	; 0x64
 8007246:	e9c4 5500 	strd	r5, r5, [r4]
 800724a:	60a5      	str	r5, [r4, #8]
 800724c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007250:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007254:	2208      	movs	r2, #8
 8007256:	4629      	mov	r1, r5
 8007258:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800725c:	f000 fadd 	bl	800781a <memset>
 8007260:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007264:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007268:	e7e9      	b.n	800723e <__sfp+0x42>
 800726a:	bf00      	nop
 800726c:	08018058 	.word	0x08018058
 8007270:	ffff0001 	.word	0xffff0001

08007274 <__sfp_lock_acquire>:
 8007274:	4770      	bx	lr

08007276 <__sfp_lock_release>:
 8007276:	4770      	bx	lr

08007278 <_freopen_r>:
 8007278:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800727c:	460e      	mov	r6, r1
 800727e:	4617      	mov	r7, r2
 8007280:	461c      	mov	r4, r3
 8007282:	4605      	mov	r5, r0
 8007284:	b118      	cbz	r0, 800728e <_freopen_r+0x16>
 8007286:	6983      	ldr	r3, [r0, #24]
 8007288:	b90b      	cbnz	r3, 800728e <_freopen_r+0x16>
 800728a:	f7ff ff87 	bl	800719c <__sinit>
 800728e:	4b49      	ldr	r3, [pc, #292]	; (80073b4 <_freopen_r+0x13c>)
 8007290:	429c      	cmp	r4, r3
 8007292:	d110      	bne.n	80072b6 <_freopen_r+0x3e>
 8007294:	686c      	ldr	r4, [r5, #4]
 8007296:	aa01      	add	r2, sp, #4
 8007298:	4639      	mov	r1, r7
 800729a:	4628      	mov	r0, r5
 800729c:	f003 fb74 	bl	800a988 <__sflags>
 80072a0:	4680      	mov	r8, r0
 80072a2:	b990      	cbnz	r0, 80072ca <_freopen_r+0x52>
 80072a4:	4621      	mov	r1, r4
 80072a6:	4628      	mov	r0, r5
 80072a8:	f7ff fe36 	bl	8006f18 <_fclose_r>
 80072ac:	4644      	mov	r4, r8
 80072ae:	4620      	mov	r0, r4
 80072b0:	b003      	add	sp, #12
 80072b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072b6:	4b40      	ldr	r3, [pc, #256]	; (80073b8 <_freopen_r+0x140>)
 80072b8:	429c      	cmp	r4, r3
 80072ba:	d101      	bne.n	80072c0 <_freopen_r+0x48>
 80072bc:	68ac      	ldr	r4, [r5, #8]
 80072be:	e7ea      	b.n	8007296 <_freopen_r+0x1e>
 80072c0:	4b3e      	ldr	r3, [pc, #248]	; (80073bc <_freopen_r+0x144>)
 80072c2:	429c      	cmp	r4, r3
 80072c4:	bf08      	it	eq
 80072c6:	68ec      	ldreq	r4, [r5, #12]
 80072c8:	e7e5      	b.n	8007296 <_freopen_r+0x1e>
 80072ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d148      	bne.n	8007364 <_freopen_r+0xec>
 80072d2:	2320      	movs	r3, #32
 80072d4:	81a3      	strh	r3, [r4, #12]
 80072d6:	2e00      	cmp	r6, #0
 80072d8:	d051      	beq.n	800737e <_freopen_r+0x106>
 80072da:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 80072de:	9a01      	ldr	r2, [sp, #4]
 80072e0:	4631      	mov	r1, r6
 80072e2:	4628      	mov	r0, r5
 80072e4:	f001 fa3a 	bl	800875c <_open_r>
 80072e8:	f8d5 9000 	ldr.w	r9, [r5]
 80072ec:	4607      	mov	r7, r0
 80072ee:	89a3      	ldrh	r3, [r4, #12]
 80072f0:	061b      	lsls	r3, r3, #24
 80072f2:	d503      	bpl.n	80072fc <_freopen_r+0x84>
 80072f4:	6921      	ldr	r1, [r4, #16]
 80072f6:	4628      	mov	r0, r5
 80072f8:	f000 fd2c 	bl	8007d54 <_free_r>
 80072fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072fe:	2600      	movs	r6, #0
 8007300:	e9c4 6601 	strd	r6, r6, [r4, #4]
 8007304:	6026      	str	r6, [r4, #0]
 8007306:	e9c4 6604 	strd	r6, r6, [r4, #16]
 800730a:	61a6      	str	r6, [r4, #24]
 800730c:	b139      	cbz	r1, 800731e <_freopen_r+0xa6>
 800730e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007312:	4299      	cmp	r1, r3
 8007314:	d002      	beq.n	800731c <_freopen_r+0xa4>
 8007316:	4628      	mov	r0, r5
 8007318:	f000 fd1c 	bl	8007d54 <_free_r>
 800731c:	6366      	str	r6, [r4, #52]	; 0x34
 800731e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007320:	2600      	movs	r6, #0
 8007322:	63a6      	str	r6, [r4, #56]	; 0x38
 8007324:	b119      	cbz	r1, 800732e <_freopen_r+0xb6>
 8007326:	4628      	mov	r0, r5
 8007328:	f000 fd14 	bl	8007d54 <_free_r>
 800732c:	64a6      	str	r6, [r4, #72]	; 0x48
 800732e:	89a3      	ldrh	r3, [r4, #12]
 8007330:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007334:	81a3      	strh	r3, [r4, #12]
 8007336:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007338:	2600      	movs	r6, #0
 800733a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800733e:	64e6      	str	r6, [r4, #76]	; 0x4c
 8007340:	6663      	str	r3, [r4, #100]	; 0x64
 8007342:	2208      	movs	r2, #8
 8007344:	4631      	mov	r1, r6
 8007346:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800734a:	f000 fa66 	bl	800781a <memset>
 800734e:	42b7      	cmp	r7, r6
 8007350:	da20      	bge.n	8007394 <_freopen_r+0x11c>
 8007352:	f7ff ff8f 	bl	8007274 <__sfp_lock_acquire>
 8007356:	81a6      	strh	r6, [r4, #12]
 8007358:	f8c5 9000 	str.w	r9, [r5]
 800735c:	f7ff ff8b 	bl	8007276 <__sfp_lock_release>
 8007360:	4634      	mov	r4, r6
 8007362:	e7a4      	b.n	80072ae <_freopen_r+0x36>
 8007364:	071a      	lsls	r2, r3, #28
 8007366:	d503      	bpl.n	8007370 <_freopen_r+0xf8>
 8007368:	4621      	mov	r1, r4
 800736a:	4628      	mov	r0, r5
 800736c:	f7ff feac 	bl	80070c8 <_fflush_r>
 8007370:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007372:	b1e3      	cbz	r3, 80073ae <_freopen_r+0x136>
 8007374:	b11e      	cbz	r6, 800737e <_freopen_r+0x106>
 8007376:	6a21      	ldr	r1, [r4, #32]
 8007378:	4628      	mov	r0, r5
 800737a:	4798      	blx	r3
 800737c:	e7ad      	b.n	80072da <_freopen_r+0x62>
 800737e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007380:	b923      	cbnz	r3, 800738c <_freopen_r+0x114>
 8007382:	f04f 0909 	mov.w	r9, #9
 8007386:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800738a:	e7b0      	b.n	80072ee <_freopen_r+0x76>
 800738c:	6a21      	ldr	r1, [r4, #32]
 800738e:	4628      	mov	r0, r5
 8007390:	4798      	blx	r3
 8007392:	e7f6      	b.n	8007382 <_freopen_r+0x10a>
 8007394:	4b0a      	ldr	r3, [pc, #40]	; (80073c0 <_freopen_r+0x148>)
 8007396:	6263      	str	r3, [r4, #36]	; 0x24
 8007398:	4b0a      	ldr	r3, [pc, #40]	; (80073c4 <_freopen_r+0x14c>)
 800739a:	62a3      	str	r3, [r4, #40]	; 0x28
 800739c:	4b0a      	ldr	r3, [pc, #40]	; (80073c8 <_freopen_r+0x150>)
 800739e:	62e3      	str	r3, [r4, #44]	; 0x2c
 80073a0:	4b0a      	ldr	r3, [pc, #40]	; (80073cc <_freopen_r+0x154>)
 80073a2:	f8a4 800c 	strh.w	r8, [r4, #12]
 80073a6:	81e7      	strh	r7, [r4, #14]
 80073a8:	6224      	str	r4, [r4, #32]
 80073aa:	6323      	str	r3, [r4, #48]	; 0x30
 80073ac:	e77f      	b.n	80072ae <_freopen_r+0x36>
 80073ae:	2e00      	cmp	r6, #0
 80073b0:	d193      	bne.n	80072da <_freopen_r+0x62>
 80073b2:	e7e6      	b.n	8007382 <_freopen_r+0x10a>
 80073b4:	08018018 	.word	0x08018018
 80073b8:	08018038 	.word	0x08018038
 80073bc:	08017ff8 	.word	0x08017ff8
 80073c0:	080089c5 	.word	0x080089c5
 80073c4:	080089eb 	.word	0x080089eb
 80073c8:	08008a23 	.word	0x08008a23
 80073cc:	08008a47 	.word	0x08008a47

080073d0 <freopen>:
 80073d0:	4613      	mov	r3, r2
 80073d2:	460a      	mov	r2, r1
 80073d4:	4601      	mov	r1, r0
 80073d6:	4802      	ldr	r0, [pc, #8]	; (80073e0 <freopen+0x10>)
 80073d8:	6800      	ldr	r0, [r0, #0]
 80073da:	f7ff bf4d 	b.w	8007278 <_freopen_r>
 80073de:	bf00      	nop
 80073e0:	20000094 	.word	0x20000094

080073e4 <_fwalk_reent>:
 80073e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073e8:	4680      	mov	r8, r0
 80073ea:	4689      	mov	r9, r1
 80073ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80073f0:	2600      	movs	r6, #0
 80073f2:	b914      	cbnz	r4, 80073fa <_fwalk_reent+0x16>
 80073f4:	4630      	mov	r0, r6
 80073f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073fa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80073fe:	3f01      	subs	r7, #1
 8007400:	d501      	bpl.n	8007406 <_fwalk_reent+0x22>
 8007402:	6824      	ldr	r4, [r4, #0]
 8007404:	e7f5      	b.n	80073f2 <_fwalk_reent+0xe>
 8007406:	89ab      	ldrh	r3, [r5, #12]
 8007408:	2b01      	cmp	r3, #1
 800740a:	d907      	bls.n	800741c <_fwalk_reent+0x38>
 800740c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007410:	3301      	adds	r3, #1
 8007412:	d003      	beq.n	800741c <_fwalk_reent+0x38>
 8007414:	4629      	mov	r1, r5
 8007416:	4640      	mov	r0, r8
 8007418:	47c8      	blx	r9
 800741a:	4306      	orrs	r6, r0
 800741c:	3568      	adds	r5, #104	; 0x68
 800741e:	e7ee      	b.n	80073fe <_fwalk_reent+0x1a>

08007420 <_fwrite_r>:
 8007420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007424:	9c08      	ldr	r4, [sp, #32]
 8007426:	4689      	mov	r9, r1
 8007428:	4617      	mov	r7, r2
 800742a:	fb02 f803 	mul.w	r8, r2, r3
 800742e:	4606      	mov	r6, r0
 8007430:	b118      	cbz	r0, 800743a <_fwrite_r+0x1a>
 8007432:	6983      	ldr	r3, [r0, #24]
 8007434:	b90b      	cbnz	r3, 800743a <_fwrite_r+0x1a>
 8007436:	f7ff feb1 	bl	800719c <__sinit>
 800743a:	4b1d      	ldr	r3, [pc, #116]	; (80074b0 <_fwrite_r+0x90>)
 800743c:	429c      	cmp	r4, r3
 800743e:	d11a      	bne.n	8007476 <_fwrite_r+0x56>
 8007440:	6874      	ldr	r4, [r6, #4]
 8007442:	89a3      	ldrh	r3, [r4, #12]
 8007444:	071b      	lsls	r3, r3, #28
 8007446:	d520      	bpl.n	800748a <_fwrite_r+0x6a>
 8007448:	6923      	ldr	r3, [r4, #16]
 800744a:	b1f3      	cbz	r3, 800748a <_fwrite_r+0x6a>
 800744c:	2500      	movs	r5, #0
 800744e:	4545      	cmp	r5, r8
 8007450:	d029      	beq.n	80074a6 <_fwrite_r+0x86>
 8007452:	68a3      	ldr	r3, [r4, #8]
 8007454:	f819 1005 	ldrb.w	r1, [r9, r5]
 8007458:	3b01      	subs	r3, #1
 800745a:	2b00      	cmp	r3, #0
 800745c:	60a3      	str	r3, [r4, #8]
 800745e:	da04      	bge.n	800746a <_fwrite_r+0x4a>
 8007460:	69a2      	ldr	r2, [r4, #24]
 8007462:	4293      	cmp	r3, r2
 8007464:	db19      	blt.n	800749a <_fwrite_r+0x7a>
 8007466:	290a      	cmp	r1, #10
 8007468:	d017      	beq.n	800749a <_fwrite_r+0x7a>
 800746a:	6823      	ldr	r3, [r4, #0]
 800746c:	1c5a      	adds	r2, r3, #1
 800746e:	6022      	str	r2, [r4, #0]
 8007470:	7019      	strb	r1, [r3, #0]
 8007472:	3501      	adds	r5, #1
 8007474:	e7eb      	b.n	800744e <_fwrite_r+0x2e>
 8007476:	4b0f      	ldr	r3, [pc, #60]	; (80074b4 <_fwrite_r+0x94>)
 8007478:	429c      	cmp	r4, r3
 800747a:	d101      	bne.n	8007480 <_fwrite_r+0x60>
 800747c:	68b4      	ldr	r4, [r6, #8]
 800747e:	e7e0      	b.n	8007442 <_fwrite_r+0x22>
 8007480:	4b0d      	ldr	r3, [pc, #52]	; (80074b8 <_fwrite_r+0x98>)
 8007482:	429c      	cmp	r4, r3
 8007484:	bf08      	it	eq
 8007486:	68f4      	ldreq	r4, [r6, #12]
 8007488:	e7db      	b.n	8007442 <_fwrite_r+0x22>
 800748a:	4621      	mov	r1, r4
 800748c:	4630      	mov	r0, r6
 800748e:	f002 fb9f 	bl	8009bd0 <__swsetup_r>
 8007492:	2800      	cmp	r0, #0
 8007494:	d0da      	beq.n	800744c <_fwrite_r+0x2c>
 8007496:	2500      	movs	r5, #0
 8007498:	e005      	b.n	80074a6 <_fwrite_r+0x86>
 800749a:	4622      	mov	r2, r4
 800749c:	4630      	mov	r0, r6
 800749e:	f002 fb33 	bl	8009b08 <__swbuf_r>
 80074a2:	3001      	adds	r0, #1
 80074a4:	d1e5      	bne.n	8007472 <_fwrite_r+0x52>
 80074a6:	fbb5 f0f7 	udiv	r0, r5, r7
 80074aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074ae:	bf00      	nop
 80074b0:	08018018 	.word	0x08018018
 80074b4:	08018038 	.word	0x08018038
 80074b8:	08017ff8 	.word	0x08017ff8

080074bc <fwrite>:
 80074bc:	b507      	push	{r0, r1, r2, lr}
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	4613      	mov	r3, r2
 80074c2:	460a      	mov	r2, r1
 80074c4:	4601      	mov	r1, r0
 80074c6:	4803      	ldr	r0, [pc, #12]	; (80074d4 <fwrite+0x18>)
 80074c8:	6800      	ldr	r0, [r0, #0]
 80074ca:	f7ff ffa9 	bl	8007420 <_fwrite_r>
 80074ce:	b003      	add	sp, #12
 80074d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80074d4:	20000094 	.word	0x20000094

080074d8 <__libc_init_array>:
 80074d8:	b570      	push	{r4, r5, r6, lr}
 80074da:	4e0d      	ldr	r6, [pc, #52]	; (8007510 <__libc_init_array+0x38>)
 80074dc:	4c0d      	ldr	r4, [pc, #52]	; (8007514 <__libc_init_array+0x3c>)
 80074de:	1ba4      	subs	r4, r4, r6
 80074e0:	10a4      	asrs	r4, r4, #2
 80074e2:	2500      	movs	r5, #0
 80074e4:	42a5      	cmp	r5, r4
 80074e6:	d109      	bne.n	80074fc <__libc_init_array+0x24>
 80074e8:	4e0b      	ldr	r6, [pc, #44]	; (8007518 <__libc_init_array+0x40>)
 80074ea:	4c0c      	ldr	r4, [pc, #48]	; (800751c <__libc_init_array+0x44>)
 80074ec:	f004 fcf4 	bl	800bed8 <_init>
 80074f0:	1ba4      	subs	r4, r4, r6
 80074f2:	10a4      	asrs	r4, r4, #2
 80074f4:	2500      	movs	r5, #0
 80074f6:	42a5      	cmp	r5, r4
 80074f8:	d105      	bne.n	8007506 <__libc_init_array+0x2e>
 80074fa:	bd70      	pop	{r4, r5, r6, pc}
 80074fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007500:	4798      	blx	r3
 8007502:	3501      	adds	r5, #1
 8007504:	e7ee      	b.n	80074e4 <__libc_init_array+0xc>
 8007506:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800750a:	4798      	blx	r3
 800750c:	3501      	adds	r5, #1
 800750e:	e7f2      	b.n	80074f6 <__libc_init_array+0x1e>
 8007510:	0801865c 	.word	0x0801865c
 8007514:	0801865c 	.word	0x0801865c
 8007518:	0801865c 	.word	0x0801865c
 800751c:	08018668 	.word	0x08018668

08007520 <localtime>:
 8007520:	b538      	push	{r3, r4, r5, lr}
 8007522:	4b07      	ldr	r3, [pc, #28]	; (8007540 <localtime+0x20>)
 8007524:	681c      	ldr	r4, [r3, #0]
 8007526:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007528:	4605      	mov	r5, r0
 800752a:	b91b      	cbnz	r3, 8007534 <localtime+0x14>
 800752c:	2024      	movs	r0, #36	; 0x24
 800752e:	f000 f959 	bl	80077e4 <malloc>
 8007532:	63e0      	str	r0, [r4, #60]	; 0x3c
 8007534:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007536:	4628      	mov	r0, r5
 8007538:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800753c:	f000 b802 	b.w	8007544 <localtime_r>
 8007540:	20000094 	.word	0x20000094

08007544 <localtime_r>:
 8007544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007548:	460c      	mov	r4, r1
 800754a:	4680      	mov	r8, r0
 800754c:	f003 faa8 	bl	800aaa0 <__gettzinfo>
 8007550:	4621      	mov	r1, r4
 8007552:	4607      	mov	r7, r0
 8007554:	4640      	mov	r0, r8
 8007556:	f003 faa7 	bl	800aaa8 <gmtime_r>
 800755a:	6946      	ldr	r6, [r0, #20]
 800755c:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8007560:	07b2      	lsls	r2, r6, #30
 8007562:	4604      	mov	r4, r0
 8007564:	d105      	bne.n	8007572 <localtime_r+0x2e>
 8007566:	2264      	movs	r2, #100	; 0x64
 8007568:	fb96 f3f2 	sdiv	r3, r6, r2
 800756c:	fb02 6313 	mls	r3, r2, r3, r6
 8007570:	bb13      	cbnz	r3, 80075b8 <localtime_r+0x74>
 8007572:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007576:	fb96 f5f3 	sdiv	r5, r6, r3
 800757a:	fb03 6515 	mls	r5, r3, r5, r6
 800757e:	fab5 f585 	clz	r5, r5
 8007582:	096d      	lsrs	r5, r5, #5
 8007584:	4b63      	ldr	r3, [pc, #396]	; (8007714 <localtime_r+0x1d0>)
 8007586:	2230      	movs	r2, #48	; 0x30
 8007588:	fb02 3505 	mla	r5, r2, r5, r3
 800758c:	f002 f936 	bl	80097fc <__tz_lock>
 8007590:	f002 f936 	bl	8009800 <_tzset_unlocked>
 8007594:	4b60      	ldr	r3, [pc, #384]	; (8007718 <localtime_r+0x1d4>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	b323      	cbz	r3, 80075e4 <localtime_r+0xa0>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	42b3      	cmp	r3, r6
 800759e:	d10d      	bne.n	80075bc <localtime_r+0x78>
 80075a0:	683e      	ldr	r6, [r7, #0]
 80075a2:	e9d8 0100 	ldrd	r0, r1, [r8]
 80075a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80075aa:	b97e      	cbnz	r6, 80075cc <localtime_r+0x88>
 80075ac:	4290      	cmp	r0, r2
 80075ae:	eb71 0303 	sbcs.w	r3, r1, r3
 80075b2:	db0f      	blt.n	80075d4 <localtime_r+0x90>
 80075b4:	2301      	movs	r3, #1
 80075b6:	e015      	b.n	80075e4 <localtime_r+0xa0>
 80075b8:	2501      	movs	r5, #1
 80075ba:	e7e3      	b.n	8007584 <localtime_r+0x40>
 80075bc:	4630      	mov	r0, r6
 80075be:	f002 f875 	bl	80096ac <__tzcalc_limits>
 80075c2:	2800      	cmp	r0, #0
 80075c4:	d1ec      	bne.n	80075a0 <localtime_r+0x5c>
 80075c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075ca:	e00b      	b.n	80075e4 <localtime_r+0xa0>
 80075cc:	4290      	cmp	r0, r2
 80075ce:	eb71 0303 	sbcs.w	r3, r1, r3
 80075d2:	db58      	blt.n	8007686 <localtime_r+0x142>
 80075d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80075d8:	4290      	cmp	r0, r2
 80075da:	eb71 0303 	sbcs.w	r3, r1, r3
 80075de:	bfb4      	ite	lt
 80075e0:	2301      	movlt	r3, #1
 80075e2:	2300      	movge	r3, #0
 80075e4:	6223      	str	r3, [r4, #32]
 80075e6:	6a23      	ldr	r3, [r4, #32]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	bf0c      	ite	eq
 80075ec:	6d39      	ldreq	r1, [r7, #80]	; 0x50
 80075ee:	6ab9      	ldrne	r1, [r7, #40]	; 0x28
 80075f0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80075f4:	203c      	movs	r0, #60	; 0x3c
 80075f6:	fb91 f6f3 	sdiv	r6, r1, r3
 80075fa:	fb03 1316 	mls	r3, r3, r6, r1
 80075fe:	6861      	ldr	r1, [r4, #4]
 8007600:	fb93 f2f0 	sdiv	r2, r3, r0
 8007604:	fb00 3012 	mls	r0, r0, r2, r3
 8007608:	6823      	ldr	r3, [r4, #0]
 800760a:	1a89      	subs	r1, r1, r2
 800760c:	68a2      	ldr	r2, [r4, #8]
 800760e:	6061      	str	r1, [r4, #4]
 8007610:	1a1b      	subs	r3, r3, r0
 8007612:	1b92      	subs	r2, r2, r6
 8007614:	2b3b      	cmp	r3, #59	; 0x3b
 8007616:	6023      	str	r3, [r4, #0]
 8007618:	60a2      	str	r2, [r4, #8]
 800761a:	dd36      	ble.n	800768a <localtime_r+0x146>
 800761c:	3101      	adds	r1, #1
 800761e:	6061      	str	r1, [r4, #4]
 8007620:	3b3c      	subs	r3, #60	; 0x3c
 8007622:	6023      	str	r3, [r4, #0]
 8007624:	6863      	ldr	r3, [r4, #4]
 8007626:	2b3b      	cmp	r3, #59	; 0x3b
 8007628:	dd35      	ble.n	8007696 <localtime_r+0x152>
 800762a:	3201      	adds	r2, #1
 800762c:	60a2      	str	r2, [r4, #8]
 800762e:	3b3c      	subs	r3, #60	; 0x3c
 8007630:	6063      	str	r3, [r4, #4]
 8007632:	68a3      	ldr	r3, [r4, #8]
 8007634:	2b17      	cmp	r3, #23
 8007636:	dd34      	ble.n	80076a2 <localtime_r+0x15e>
 8007638:	69e2      	ldr	r2, [r4, #28]
 800763a:	3201      	adds	r2, #1
 800763c:	61e2      	str	r2, [r4, #28]
 800763e:	69a2      	ldr	r2, [r4, #24]
 8007640:	3201      	adds	r2, #1
 8007642:	2a06      	cmp	r2, #6
 8007644:	bfc8      	it	gt
 8007646:	2200      	movgt	r2, #0
 8007648:	61a2      	str	r2, [r4, #24]
 800764a:	68e2      	ldr	r2, [r4, #12]
 800764c:	3b18      	subs	r3, #24
 800764e:	3201      	adds	r2, #1
 8007650:	60a3      	str	r3, [r4, #8]
 8007652:	6923      	ldr	r3, [r4, #16]
 8007654:	60e2      	str	r2, [r4, #12]
 8007656:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800765a:	428a      	cmp	r2, r1
 800765c:	dd0e      	ble.n	800767c <localtime_r+0x138>
 800765e:	3301      	adds	r3, #1
 8007660:	2b0c      	cmp	r3, #12
 8007662:	bf0c      	ite	eq
 8007664:	6963      	ldreq	r3, [r4, #20]
 8007666:	6123      	strne	r3, [r4, #16]
 8007668:	eba2 0201 	sub.w	r2, r2, r1
 800766c:	60e2      	str	r2, [r4, #12]
 800766e:	bf01      	itttt	eq
 8007670:	3301      	addeq	r3, #1
 8007672:	2200      	moveq	r2, #0
 8007674:	6122      	streq	r2, [r4, #16]
 8007676:	6163      	streq	r3, [r4, #20]
 8007678:	bf08      	it	eq
 800767a:	61e2      	streq	r2, [r4, #28]
 800767c:	f002 f8bf 	bl	80097fe <__tz_unlock>
 8007680:	4620      	mov	r0, r4
 8007682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007686:	2300      	movs	r3, #0
 8007688:	e7ac      	b.n	80075e4 <localtime_r+0xa0>
 800768a:	2b00      	cmp	r3, #0
 800768c:	daca      	bge.n	8007624 <localtime_r+0xe0>
 800768e:	3901      	subs	r1, #1
 8007690:	6061      	str	r1, [r4, #4]
 8007692:	333c      	adds	r3, #60	; 0x3c
 8007694:	e7c5      	b.n	8007622 <localtime_r+0xde>
 8007696:	2b00      	cmp	r3, #0
 8007698:	dacb      	bge.n	8007632 <localtime_r+0xee>
 800769a:	3a01      	subs	r2, #1
 800769c:	60a2      	str	r2, [r4, #8]
 800769e:	333c      	adds	r3, #60	; 0x3c
 80076a0:	e7c6      	b.n	8007630 <localtime_r+0xec>
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	daea      	bge.n	800767c <localtime_r+0x138>
 80076a6:	69e2      	ldr	r2, [r4, #28]
 80076a8:	3a01      	subs	r2, #1
 80076aa:	61e2      	str	r2, [r4, #28]
 80076ac:	69a2      	ldr	r2, [r4, #24]
 80076ae:	3a01      	subs	r2, #1
 80076b0:	bf48      	it	mi
 80076b2:	2206      	movmi	r2, #6
 80076b4:	61a2      	str	r2, [r4, #24]
 80076b6:	68e2      	ldr	r2, [r4, #12]
 80076b8:	3318      	adds	r3, #24
 80076ba:	3a01      	subs	r2, #1
 80076bc:	60e2      	str	r2, [r4, #12]
 80076be:	60a3      	str	r3, [r4, #8]
 80076c0:	2a00      	cmp	r2, #0
 80076c2:	d1db      	bne.n	800767c <localtime_r+0x138>
 80076c4:	6923      	ldr	r3, [r4, #16]
 80076c6:	3b01      	subs	r3, #1
 80076c8:	d405      	bmi.n	80076d6 <localtime_r+0x192>
 80076ca:	6123      	str	r3, [r4, #16]
 80076cc:	6923      	ldr	r3, [r4, #16]
 80076ce:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80076d2:	60e3      	str	r3, [r4, #12]
 80076d4:	e7d2      	b.n	800767c <localtime_r+0x138>
 80076d6:	6962      	ldr	r2, [r4, #20]
 80076d8:	230b      	movs	r3, #11
 80076da:	1e51      	subs	r1, r2, #1
 80076dc:	6123      	str	r3, [r4, #16]
 80076de:	078b      	lsls	r3, r1, #30
 80076e0:	6161      	str	r1, [r4, #20]
 80076e2:	f202 726b 	addw	r2, r2, #1899	; 0x76b
 80076e6:	d105      	bne.n	80076f4 <localtime_r+0x1b0>
 80076e8:	2164      	movs	r1, #100	; 0x64
 80076ea:	fb92 f3f1 	sdiv	r3, r2, r1
 80076ee:	fb01 2313 	mls	r3, r1, r3, r2
 80076f2:	b963      	cbnz	r3, 800770e <localtime_r+0x1ca>
 80076f4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80076f8:	fb92 f3f1 	sdiv	r3, r2, r1
 80076fc:	fb01 2313 	mls	r3, r1, r3, r2
 8007700:	fab3 f383 	clz	r3, r3
 8007704:	095b      	lsrs	r3, r3, #5
 8007706:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800770a:	61e3      	str	r3, [r4, #28]
 800770c:	e7de      	b.n	80076cc <localtime_r+0x188>
 800770e:	2301      	movs	r3, #1
 8007710:	e7f9      	b.n	8007706 <localtime_r+0x1c2>
 8007712:	bf00      	nop
 8007714:	080180bc 	.word	0x080180bc
 8007718:	20000464 	.word	0x20000464

0800771c <__swhatbuf_r>:
 800771c:	b570      	push	{r4, r5, r6, lr}
 800771e:	460e      	mov	r6, r1
 8007720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007724:	2900      	cmp	r1, #0
 8007726:	b096      	sub	sp, #88	; 0x58
 8007728:	4614      	mov	r4, r2
 800772a:	461d      	mov	r5, r3
 800772c:	da07      	bge.n	800773e <__swhatbuf_r+0x22>
 800772e:	2300      	movs	r3, #0
 8007730:	602b      	str	r3, [r5, #0]
 8007732:	89b3      	ldrh	r3, [r6, #12]
 8007734:	061a      	lsls	r2, r3, #24
 8007736:	d410      	bmi.n	800775a <__swhatbuf_r+0x3e>
 8007738:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800773c:	e00e      	b.n	800775c <__swhatbuf_r+0x40>
 800773e:	466a      	mov	r2, sp
 8007740:	f003 f958 	bl	800a9f4 <_fstat_r>
 8007744:	2800      	cmp	r0, #0
 8007746:	dbf2      	blt.n	800772e <__swhatbuf_r+0x12>
 8007748:	9a01      	ldr	r2, [sp, #4]
 800774a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800774e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007752:	425a      	negs	r2, r3
 8007754:	415a      	adcs	r2, r3
 8007756:	602a      	str	r2, [r5, #0]
 8007758:	e7ee      	b.n	8007738 <__swhatbuf_r+0x1c>
 800775a:	2340      	movs	r3, #64	; 0x40
 800775c:	2000      	movs	r0, #0
 800775e:	6023      	str	r3, [r4, #0]
 8007760:	b016      	add	sp, #88	; 0x58
 8007762:	bd70      	pop	{r4, r5, r6, pc}

08007764 <__smakebuf_r>:
 8007764:	898b      	ldrh	r3, [r1, #12]
 8007766:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007768:	079d      	lsls	r5, r3, #30
 800776a:	4606      	mov	r6, r0
 800776c:	460c      	mov	r4, r1
 800776e:	d507      	bpl.n	8007780 <__smakebuf_r+0x1c>
 8007770:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007774:	6023      	str	r3, [r4, #0]
 8007776:	6123      	str	r3, [r4, #16]
 8007778:	2301      	movs	r3, #1
 800777a:	6163      	str	r3, [r4, #20]
 800777c:	b002      	add	sp, #8
 800777e:	bd70      	pop	{r4, r5, r6, pc}
 8007780:	ab01      	add	r3, sp, #4
 8007782:	466a      	mov	r2, sp
 8007784:	f7ff ffca 	bl	800771c <__swhatbuf_r>
 8007788:	9900      	ldr	r1, [sp, #0]
 800778a:	4605      	mov	r5, r0
 800778c:	4630      	mov	r0, r6
 800778e:	f000 fb2f 	bl	8007df0 <_malloc_r>
 8007792:	b948      	cbnz	r0, 80077a8 <__smakebuf_r+0x44>
 8007794:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007798:	059a      	lsls	r2, r3, #22
 800779a:	d4ef      	bmi.n	800777c <__smakebuf_r+0x18>
 800779c:	f023 0303 	bic.w	r3, r3, #3
 80077a0:	f043 0302 	orr.w	r3, r3, #2
 80077a4:	81a3      	strh	r3, [r4, #12]
 80077a6:	e7e3      	b.n	8007770 <__smakebuf_r+0xc>
 80077a8:	4b0d      	ldr	r3, [pc, #52]	; (80077e0 <__smakebuf_r+0x7c>)
 80077aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80077ac:	89a3      	ldrh	r3, [r4, #12]
 80077ae:	6020      	str	r0, [r4, #0]
 80077b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077b4:	81a3      	strh	r3, [r4, #12]
 80077b6:	9b00      	ldr	r3, [sp, #0]
 80077b8:	6163      	str	r3, [r4, #20]
 80077ba:	9b01      	ldr	r3, [sp, #4]
 80077bc:	6120      	str	r0, [r4, #16]
 80077be:	b15b      	cbz	r3, 80077d8 <__smakebuf_r+0x74>
 80077c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077c4:	4630      	mov	r0, r6
 80077c6:	f003 fa1d 	bl	800ac04 <_isatty_r>
 80077ca:	b128      	cbz	r0, 80077d8 <__smakebuf_r+0x74>
 80077cc:	89a3      	ldrh	r3, [r4, #12]
 80077ce:	f023 0303 	bic.w	r3, r3, #3
 80077d2:	f043 0301 	orr.w	r3, r3, #1
 80077d6:	81a3      	strh	r3, [r4, #12]
 80077d8:	89a3      	ldrh	r3, [r4, #12]
 80077da:	431d      	orrs	r5, r3
 80077dc:	81a5      	strh	r5, [r4, #12]
 80077de:	e7cd      	b.n	800777c <__smakebuf_r+0x18>
 80077e0:	08007165 	.word	0x08007165

080077e4 <malloc>:
 80077e4:	4b02      	ldr	r3, [pc, #8]	; (80077f0 <malloc+0xc>)
 80077e6:	4601      	mov	r1, r0
 80077e8:	6818      	ldr	r0, [r3, #0]
 80077ea:	f000 bb01 	b.w	8007df0 <_malloc_r>
 80077ee:	bf00      	nop
 80077f0:	20000094 	.word	0x20000094

080077f4 <free>:
 80077f4:	4b02      	ldr	r3, [pc, #8]	; (8007800 <free+0xc>)
 80077f6:	4601      	mov	r1, r0
 80077f8:	6818      	ldr	r0, [r3, #0]
 80077fa:	f000 baab 	b.w	8007d54 <_free_r>
 80077fe:	bf00      	nop
 8007800:	20000094 	.word	0x20000094

08007804 <memcpy>:
 8007804:	b510      	push	{r4, lr}
 8007806:	1e43      	subs	r3, r0, #1
 8007808:	440a      	add	r2, r1
 800780a:	4291      	cmp	r1, r2
 800780c:	d100      	bne.n	8007810 <memcpy+0xc>
 800780e:	bd10      	pop	{r4, pc}
 8007810:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007814:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007818:	e7f7      	b.n	800780a <memcpy+0x6>

0800781a <memset>:
 800781a:	4402      	add	r2, r0
 800781c:	4603      	mov	r3, r0
 800781e:	4293      	cmp	r3, r2
 8007820:	d100      	bne.n	8007824 <memset+0xa>
 8007822:	4770      	bx	lr
 8007824:	f803 1b01 	strb.w	r1, [r3], #1
 8007828:	e7f9      	b.n	800781e <memset+0x4>
	...

0800782c <validate_structure>:
 800782c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800782e:	6801      	ldr	r1, [r0, #0]
 8007830:	293b      	cmp	r1, #59	; 0x3b
 8007832:	4604      	mov	r4, r0
 8007834:	d911      	bls.n	800785a <validate_structure+0x2e>
 8007836:	223c      	movs	r2, #60	; 0x3c
 8007838:	4668      	mov	r0, sp
 800783a:	f002 fa4b 	bl	8009cd4 <div>
 800783e:	9a01      	ldr	r2, [sp, #4]
 8007840:	6863      	ldr	r3, [r4, #4]
 8007842:	9900      	ldr	r1, [sp, #0]
 8007844:	2a00      	cmp	r2, #0
 8007846:	440b      	add	r3, r1
 8007848:	6063      	str	r3, [r4, #4]
 800784a:	bfbb      	ittet	lt
 800784c:	323c      	addlt	r2, #60	; 0x3c
 800784e:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 8007852:	6022      	strge	r2, [r4, #0]
 8007854:	6022      	strlt	r2, [r4, #0]
 8007856:	bfb8      	it	lt
 8007858:	6063      	strlt	r3, [r4, #4]
 800785a:	6861      	ldr	r1, [r4, #4]
 800785c:	293b      	cmp	r1, #59	; 0x3b
 800785e:	d911      	bls.n	8007884 <validate_structure+0x58>
 8007860:	223c      	movs	r2, #60	; 0x3c
 8007862:	4668      	mov	r0, sp
 8007864:	f002 fa36 	bl	8009cd4 <div>
 8007868:	9a01      	ldr	r2, [sp, #4]
 800786a:	68a3      	ldr	r3, [r4, #8]
 800786c:	9900      	ldr	r1, [sp, #0]
 800786e:	2a00      	cmp	r2, #0
 8007870:	440b      	add	r3, r1
 8007872:	60a3      	str	r3, [r4, #8]
 8007874:	bfbb      	ittet	lt
 8007876:	323c      	addlt	r2, #60	; 0x3c
 8007878:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 800787c:	6062      	strge	r2, [r4, #4]
 800787e:	6062      	strlt	r2, [r4, #4]
 8007880:	bfb8      	it	lt
 8007882:	60a3      	strlt	r3, [r4, #8]
 8007884:	68a1      	ldr	r1, [r4, #8]
 8007886:	2917      	cmp	r1, #23
 8007888:	d911      	bls.n	80078ae <validate_structure+0x82>
 800788a:	2218      	movs	r2, #24
 800788c:	4668      	mov	r0, sp
 800788e:	f002 fa21 	bl	8009cd4 <div>
 8007892:	9a01      	ldr	r2, [sp, #4]
 8007894:	68e3      	ldr	r3, [r4, #12]
 8007896:	9900      	ldr	r1, [sp, #0]
 8007898:	2a00      	cmp	r2, #0
 800789a:	440b      	add	r3, r1
 800789c:	60e3      	str	r3, [r4, #12]
 800789e:	bfbb      	ittet	lt
 80078a0:	3218      	addlt	r2, #24
 80078a2:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 80078a6:	60a2      	strge	r2, [r4, #8]
 80078a8:	60a2      	strlt	r2, [r4, #8]
 80078aa:	bfb8      	it	lt
 80078ac:	60e3      	strlt	r3, [r4, #12]
 80078ae:	6921      	ldr	r1, [r4, #16]
 80078b0:	290b      	cmp	r1, #11
 80078b2:	d911      	bls.n	80078d8 <validate_structure+0xac>
 80078b4:	220c      	movs	r2, #12
 80078b6:	4668      	mov	r0, sp
 80078b8:	f002 fa0c 	bl	8009cd4 <div>
 80078bc:	9a01      	ldr	r2, [sp, #4]
 80078be:	6963      	ldr	r3, [r4, #20]
 80078c0:	9900      	ldr	r1, [sp, #0]
 80078c2:	2a00      	cmp	r2, #0
 80078c4:	440b      	add	r3, r1
 80078c6:	6163      	str	r3, [r4, #20]
 80078c8:	bfbb      	ittet	lt
 80078ca:	320c      	addlt	r2, #12
 80078cc:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 80078d0:	6122      	strge	r2, [r4, #16]
 80078d2:	6122      	strlt	r2, [r4, #16]
 80078d4:	bfb8      	it	lt
 80078d6:	6163      	strlt	r3, [r4, #20]
 80078d8:	6963      	ldr	r3, [r4, #20]
 80078da:	0799      	lsls	r1, r3, #30
 80078dc:	d120      	bne.n	8007920 <validate_structure+0xf4>
 80078de:	2164      	movs	r1, #100	; 0x64
 80078e0:	fb93 f2f1 	sdiv	r2, r3, r1
 80078e4:	fb01 3212 	mls	r2, r1, r2, r3
 80078e8:	b9e2      	cbnz	r2, 8007924 <validate_structure+0xf8>
 80078ea:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80078ee:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80078f2:	fb93 f2f1 	sdiv	r2, r3, r1
 80078f6:	fb01 3312 	mls	r3, r1, r2, r3
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	bf14      	ite	ne
 80078fe:	231c      	movne	r3, #28
 8007900:	231d      	moveq	r3, #29
 8007902:	68e2      	ldr	r2, [r4, #12]
 8007904:	2a00      	cmp	r2, #0
 8007906:	dc0f      	bgt.n	8007928 <validate_structure+0xfc>
 8007908:	4f34      	ldr	r7, [pc, #208]	; (80079dc <validate_structure+0x1b0>)
 800790a:	260b      	movs	r6, #11
 800790c:	2064      	movs	r0, #100	; 0x64
 800790e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8007912:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8007916:	f1bc 0f00 	cmp.w	ip, #0
 800791a:	dd14      	ble.n	8007946 <validate_structure+0x11a>
 800791c:	b003      	add	sp, #12
 800791e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007920:	231c      	movs	r3, #28
 8007922:	e7ee      	b.n	8007902 <validate_structure+0xd6>
 8007924:	231d      	movs	r3, #29
 8007926:	e7ec      	b.n	8007902 <validate_structure+0xd6>
 8007928:	4f2c      	ldr	r7, [pc, #176]	; (80079dc <validate_structure+0x1b0>)
 800792a:	f04f 0c00 	mov.w	ip, #0
 800792e:	2564      	movs	r5, #100	; 0x64
 8007930:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8007934:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8007938:	2a01      	cmp	r2, #1
 800793a:	d02f      	beq.n	800799c <validate_structure+0x170>
 800793c:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
 8007940:	4281      	cmp	r1, r0
 8007942:	dc2e      	bgt.n	80079a2 <validate_structure+0x176>
 8007944:	e7ea      	b.n	800791c <validate_structure+0xf0>
 8007946:	6921      	ldr	r1, [r4, #16]
 8007948:	3901      	subs	r1, #1
 800794a:	6121      	str	r1, [r4, #16]
 800794c:	3101      	adds	r1, #1
 800794e:	d114      	bne.n	800797a <validate_structure+0x14e>
 8007950:	6963      	ldr	r3, [r4, #20]
 8007952:	1e59      	subs	r1, r3, #1
 8007954:	078a      	lsls	r2, r1, #30
 8007956:	e9c4 6104 	strd	r6, r1, [r4, #16]
 800795a:	d117      	bne.n	800798c <validate_structure+0x160>
 800795c:	fb91 f2f0 	sdiv	r2, r1, r0
 8007960:	fb00 1112 	mls	r1, r0, r2, r1
 8007964:	b9a1      	cbnz	r1, 8007990 <validate_structure+0x164>
 8007966:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800796a:	fb93 f2f5 	sdiv	r2, r3, r5
 800796e:	fb05 3312 	mls	r3, r5, r2, r3
 8007972:	2b00      	cmp	r3, #0
 8007974:	bf14      	ite	ne
 8007976:	231c      	movne	r3, #28
 8007978:	231d      	moveq	r3, #29
 800797a:	6922      	ldr	r2, [r4, #16]
 800797c:	2a01      	cmp	r2, #1
 800797e:	bf14      	ite	ne
 8007980:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8007984:	461a      	moveq	r2, r3
 8007986:	4462      	add	r2, ip
 8007988:	60e2      	str	r2, [r4, #12]
 800798a:	e7c2      	b.n	8007912 <validate_structure+0xe6>
 800798c:	231c      	movs	r3, #28
 800798e:	e7f4      	b.n	800797a <validate_structure+0x14e>
 8007990:	231d      	movs	r3, #29
 8007992:	e7f2      	b.n	800797a <validate_structure+0x14e>
 8007994:	231c      	movs	r3, #28
 8007996:	e7cd      	b.n	8007934 <validate_structure+0x108>
 8007998:	231d      	movs	r3, #29
 800799a:	e7cb      	b.n	8007934 <validate_structure+0x108>
 800799c:	428b      	cmp	r3, r1
 800799e:	dabd      	bge.n	800791c <validate_structure+0xf0>
 80079a0:	4618      	mov	r0, r3
 80079a2:	3201      	adds	r2, #1
 80079a4:	1a09      	subs	r1, r1, r0
 80079a6:	2a0c      	cmp	r2, #12
 80079a8:	60e1      	str	r1, [r4, #12]
 80079aa:	6122      	str	r2, [r4, #16]
 80079ac:	d1c2      	bne.n	8007934 <validate_structure+0x108>
 80079ae:	6963      	ldr	r3, [r4, #20]
 80079b0:	1c5a      	adds	r2, r3, #1
 80079b2:	0791      	lsls	r1, r2, #30
 80079b4:	e9c4 c204 	strd	ip, r2, [r4, #16]
 80079b8:	d1ec      	bne.n	8007994 <validate_structure+0x168>
 80079ba:	fb92 f1f5 	sdiv	r1, r2, r5
 80079be:	fb05 2211 	mls	r2, r5, r1, r2
 80079c2:	2a00      	cmp	r2, #0
 80079c4:	d1e8      	bne.n	8007998 <validate_structure+0x16c>
 80079c6:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 80079ca:	fb93 f2f6 	sdiv	r2, r3, r6
 80079ce:	fb06 3312 	mls	r3, r6, r2, r3
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	bf14      	ite	ne
 80079d6:	231c      	movne	r3, #28
 80079d8:	231d      	moveq	r3, #29
 80079da:	e7ab      	b.n	8007934 <validate_structure+0x108>
 80079dc:	0801805c 	.word	0x0801805c

080079e0 <mktime>:
 80079e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e4:	b089      	sub	sp, #36	; 0x24
 80079e6:	4606      	mov	r6, r0
 80079e8:	f003 f85a 	bl	800aaa0 <__gettzinfo>
 80079ec:	4680      	mov	r8, r0
 80079ee:	4630      	mov	r0, r6
 80079f0:	f7ff ff1c 	bl	800782c <validate_structure>
 80079f4:	e9d6 3000 	ldrd	r3, r0, [r6]
 80079f8:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 80079fc:	fb0a 3a00 	mla	sl, sl, r0, r3
 8007a00:	68b0      	ldr	r0, [r6, #8]
 8007a02:	4abe      	ldr	r2, [pc, #760]	; (8007cfc <mktime+0x31c>)
 8007a04:	6975      	ldr	r5, [r6, #20]
 8007a06:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8007a0a:	fb03 aa00 	mla	sl, r3, r0, sl
 8007a0e:	e9d6 4303 	ldrd	r4, r3, [r6, #12]
 8007a12:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007a16:	3c01      	subs	r4, #1
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8007a1e:	4414      	add	r4, r2
 8007a20:	dd11      	ble.n	8007a46 <mktime+0x66>
 8007a22:	07a9      	lsls	r1, r5, #30
 8007a24:	d10f      	bne.n	8007a46 <mktime+0x66>
 8007a26:	2264      	movs	r2, #100	; 0x64
 8007a28:	fb95 f3f2 	sdiv	r3, r5, r2
 8007a2c:	fb02 5313 	mls	r3, r2, r3, r5
 8007a30:	b943      	cbnz	r3, 8007a44 <mktime+0x64>
 8007a32:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 8007a36:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007a3a:	fb91 f3f2 	sdiv	r3, r1, r2
 8007a3e:	fb02 1313 	mls	r3, r2, r3, r1
 8007a42:	b903      	cbnz	r3, 8007a46 <mktime+0x66>
 8007a44:	3401      	adds	r4, #1
 8007a46:	f505 531c 	add.w	r3, r5, #9984	; 0x2700
 8007a4a:	3310      	adds	r3, #16
 8007a4c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8007a50:	4293      	cmp	r3, r2
 8007a52:	61f4      	str	r4, [r6, #28]
 8007a54:	f200 8179 	bhi.w	8007d4a <mktime+0x36a>
 8007a58:	2d46      	cmp	r5, #70	; 0x46
 8007a5a:	f340 8084 	ble.w	8007b66 <mktime+0x186>
 8007a5e:	2346      	movs	r3, #70	; 0x46
 8007a60:	f240 176d 	movw	r7, #365	; 0x16d
 8007a64:	2164      	movs	r1, #100	; 0x64
 8007a66:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8007a6a:	079a      	lsls	r2, r3, #30
 8007a6c:	d175      	bne.n	8007b5a <mktime+0x17a>
 8007a6e:	fb93 f2f1 	sdiv	r2, r3, r1
 8007a72:	fb01 3212 	mls	r2, r1, r2, r3
 8007a76:	2a00      	cmp	r2, #0
 8007a78:	d172      	bne.n	8007b60 <mktime+0x180>
 8007a7a:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8007a7e:	fb9c f2f0 	sdiv	r2, ip, r0
 8007a82:	fb00 c212 	mls	r2, r0, r2, ip
 8007a86:	2a00      	cmp	r2, #0
 8007a88:	bf14      	ite	ne
 8007a8a:	463a      	movne	r2, r7
 8007a8c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8007a90:	3301      	adds	r3, #1
 8007a92:	429d      	cmp	r5, r3
 8007a94:	4414      	add	r4, r2
 8007a96:	d1e8      	bne.n	8007a6a <mktime+0x8a>
 8007a98:	4b99      	ldr	r3, [pc, #612]	; (8007d00 <mktime+0x320>)
 8007a9a:	4363      	muls	r3, r4
 8007a9c:	eb1a 0103 	adds.w	r1, sl, r3
 8007aa0:	eb4b 72e3 	adc.w	r2, fp, r3, asr #31
 8007aa4:	e9cd 1200 	strd	r1, r2, [sp]
 8007aa8:	f001 fea8 	bl	80097fc <__tz_lock>
 8007aac:	f001 fea8 	bl	8009800 <_tzset_unlocked>
 8007ab0:	4b94      	ldr	r3, [pc, #592]	; (8007d04 <mktime+0x324>)
 8007ab2:	f8d3 9000 	ldr.w	r9, [r3]
 8007ab6:	f1b9 0f00 	cmp.w	r9, #0
 8007aba:	d045      	beq.n	8007b48 <mktime+0x168>
 8007abc:	f8d6 9020 	ldr.w	r9, [r6, #32]
 8007ac0:	6970      	ldr	r0, [r6, #20]
 8007ac2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007ac6:	464f      	mov	r7, r9
 8007ac8:	2f01      	cmp	r7, #1
 8007aca:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8007ace:	bfa8      	it	ge
 8007ad0:	2701      	movge	r7, #1
 8007ad2:	4283      	cmp	r3, r0
 8007ad4:	f040 8089 	bne.w	8007bea <mktime+0x20a>
 8007ad8:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8007adc:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 8007ae0:	460a      	mov	r2, r1
 8007ae2:	17cb      	asrs	r3, r1, #31
 8007ae4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007ae8:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8007aec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007af0:	1a12      	subs	r2, r2, r0
 8007af2:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
 8007af6:	4692      	mov	sl, r2
 8007af8:	469b      	mov	fp, r3
 8007afa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007afe:	4552      	cmp	r2, sl
 8007b00:	eb73 0c0b 	sbcs.w	ip, r3, fp
 8007b04:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8007b08:	da76      	bge.n	8007bf8 <mktime+0x218>
 8007b0a:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 8007b0e:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007b12:	ebb2 0a0a 	subs.w	sl, r2, sl
 8007b16:	eb63 0b0b 	sbc.w	fp, r3, fp
 8007b1a:	f8d8 3000 	ldr.w	r3, [r8]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d079      	beq.n	8007c16 <mktime+0x236>
 8007b22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b26:	4552      	cmp	r2, sl
 8007b28:	eb73 030b 	sbcs.w	r3, r3, fp
 8007b2c:	db07      	blt.n	8007b3e <mktime+0x15e>
 8007b2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b32:	e9dd ab00 	ldrd	sl, fp, [sp]
 8007b36:	4592      	cmp	sl, r2
 8007b38:	eb7b 0303 	sbcs.w	r3, fp, r3
 8007b3c:	db71      	blt.n	8007c22 <mktime+0x242>
 8007b3e:	f1b9 0f00 	cmp.w	r9, #0
 8007b42:	f04f 0900 	mov.w	r9, #0
 8007b46:	da71      	bge.n	8007c2c <mktime+0x24c>
 8007b48:	e9dd ab00 	ldrd	sl, fp, [sp]
 8007b4c:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8007b50:	eb1a 0a03 	adds.w	sl, sl, r3
 8007b54:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8007b58:	e0b4      	b.n	8007cc4 <mktime+0x2e4>
 8007b5a:	f240 126d 	movw	r2, #365	; 0x16d
 8007b5e:	e797      	b.n	8007a90 <mktime+0xb0>
 8007b60:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8007b64:	e794      	b.n	8007a90 <mktime+0xb0>
 8007b66:	d097      	beq.n	8007a98 <mktime+0xb8>
 8007b68:	2345      	movs	r3, #69	; 0x45
 8007b6a:	f240 176d 	movw	r7, #365	; 0x16d
 8007b6e:	2164      	movs	r1, #100	; 0x64
 8007b70:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8007b74:	e012      	b.n	8007b9c <mktime+0x1bc>
 8007b76:	bb62      	cbnz	r2, 8007bd2 <mktime+0x1f2>
 8007b78:	fb93 f2f1 	sdiv	r2, r3, r1
 8007b7c:	fb01 3212 	mls	r2, r1, r2, r3
 8007b80:	bb52      	cbnz	r2, 8007bd8 <mktime+0x1f8>
 8007b82:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8007b86:	fb9c f2f0 	sdiv	r2, ip, r0
 8007b8a:	fb00 c212 	mls	r2, r0, r2, ip
 8007b8e:	2a00      	cmp	r2, #0
 8007b90:	bf14      	ite	ne
 8007b92:	463a      	movne	r2, r7
 8007b94:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8007b98:	1aa4      	subs	r4, r4, r2
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	429d      	cmp	r5, r3
 8007b9e:	f003 0203 	and.w	r2, r3, #3
 8007ba2:	dbe8      	blt.n	8007b76 <mktime+0x196>
 8007ba4:	b9da      	cbnz	r2, 8007bde <mktime+0x1fe>
 8007ba6:	2264      	movs	r2, #100	; 0x64
 8007ba8:	fb95 f3f2 	sdiv	r3, r5, r2
 8007bac:	fb02 5313 	mls	r3, r2, r3, r5
 8007bb0:	b9c3      	cbnz	r3, 8007be4 <mktime+0x204>
 8007bb2:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 8007bb6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007bba:	fb91 f3f2 	sdiv	r3, r1, r2
 8007bbe:	fb02 1313 	mls	r3, r2, r3, r1
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f240 136d 	movw	r3, #365	; 0x16d
 8007bc8:	bf08      	it	eq
 8007bca:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8007bce:	1ae4      	subs	r4, r4, r3
 8007bd0:	e762      	b.n	8007a98 <mktime+0xb8>
 8007bd2:	f240 126d 	movw	r2, #365	; 0x16d
 8007bd6:	e7df      	b.n	8007b98 <mktime+0x1b8>
 8007bd8:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8007bdc:	e7dc      	b.n	8007b98 <mktime+0x1b8>
 8007bde:	f240 136d 	movw	r3, #365	; 0x16d
 8007be2:	e7f4      	b.n	8007bce <mktime+0x1ee>
 8007be4:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8007be8:	e7f1      	b.n	8007bce <mktime+0x1ee>
 8007bea:	f001 fd5f 	bl	80096ac <__tzcalc_limits>
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	f47f af72 	bne.w	8007ad8 <mktime+0xf8>
 8007bf4:	46b9      	mov	r9, r7
 8007bf6:	e057      	b.n	8007ca8 <mktime+0x2c8>
 8007bf8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007bfc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c00:	ebb2 020a 	subs.w	r2, r2, sl
 8007c04:	eb63 030b 	sbc.w	r3, r3, fp
 8007c08:	e9dd ab00 	ldrd	sl, fp, [sp]
 8007c0c:	4592      	cmp	sl, r2
 8007c0e:	eb7b 0303 	sbcs.w	r3, fp, r3
 8007c12:	dbef      	blt.n	8007bf4 <mktime+0x214>
 8007c14:	e779      	b.n	8007b0a <mktime+0x12a>
 8007c16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c1a:	4552      	cmp	r2, sl
 8007c1c:	eb73 030b 	sbcs.w	r3, r3, fp
 8007c20:	db85      	blt.n	8007b2e <mktime+0x14e>
 8007c22:	f1b9 0f00 	cmp.w	r9, #0
 8007c26:	db43      	blt.n	8007cb0 <mktime+0x2d0>
 8007c28:	f04f 0901 	mov.w	r9, #1
 8007c2c:	ea87 0709 	eor.w	r7, r7, r9
 8007c30:	2f01      	cmp	r7, #1
 8007c32:	d139      	bne.n	8007ca8 <mktime+0x2c8>
 8007c34:	1a40      	subs	r0, r0, r1
 8007c36:	f1b9 0f00 	cmp.w	r9, #0
 8007c3a:	d100      	bne.n	8007c3e <mktime+0x25e>
 8007c3c:	4240      	negs	r0, r0
 8007c3e:	6833      	ldr	r3, [r6, #0]
 8007c40:	4403      	add	r3, r0
 8007c42:	6033      	str	r3, [r6, #0]
 8007c44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c48:	1812      	adds	r2, r2, r0
 8007c4a:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 8007c4e:	e9cd 2300 	strd	r2, r3, [sp]
 8007c52:	4630      	mov	r0, r6
 8007c54:	68f2      	ldr	r2, [r6, #12]
 8007c56:	9202      	str	r2, [sp, #8]
 8007c58:	f7ff fde8 	bl	800782c <validate_structure>
 8007c5c:	68f3      	ldr	r3, [r6, #12]
 8007c5e:	9a02      	ldr	r2, [sp, #8]
 8007c60:	1a9b      	subs	r3, r3, r2
 8007c62:	d021      	beq.n	8007ca8 <mktime+0x2c8>
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	dc40      	bgt.n	8007cea <mktime+0x30a>
 8007c68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c6c:	bfa8      	it	ge
 8007c6e:	461f      	movge	r7, r3
 8007c70:	69f3      	ldr	r3, [r6, #28]
 8007c72:	443c      	add	r4, r7
 8007c74:	18ff      	adds	r7, r7, r3
 8007c76:	d547      	bpl.n	8007d08 <mktime+0x328>
 8007c78:	1e6a      	subs	r2, r5, #1
 8007c7a:	0791      	lsls	r1, r2, #30
 8007c7c:	d138      	bne.n	8007cf0 <mktime+0x310>
 8007c7e:	2164      	movs	r1, #100	; 0x64
 8007c80:	fb92 f3f1 	sdiv	r3, r2, r1
 8007c84:	fb01 2313 	mls	r3, r1, r3, r2
 8007c88:	bbab      	cbnz	r3, 8007cf6 <mktime+0x316>
 8007c8a:	f205 756b 	addw	r5, r5, #1899	; 0x76b
 8007c8e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007c92:	fb95 f3f2 	sdiv	r3, r5, r2
 8007c96:	fb02 5513 	mls	r5, r2, r3, r5
 8007c9a:	2d00      	cmp	r5, #0
 8007c9c:	f240 136d 	movw	r3, #365	; 0x16d
 8007ca0:	bf18      	it	ne
 8007ca2:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8007ca6:	61f3      	str	r3, [r6, #28]
 8007ca8:	f1b9 0f01 	cmp.w	r9, #1
 8007cac:	f47f af4c 	bne.w	8007b48 <mktime+0x168>
 8007cb0:	e9dd ab00 	ldrd	sl, fp, [sp]
 8007cb4:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
 8007cb8:	eb1a 0a03 	adds.w	sl, sl, r3
 8007cbc:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8007cc0:	f04f 0901 	mov.w	r9, #1
 8007cc4:	f001 fd9b 	bl	80097fe <__tz_unlock>
 8007cc8:	3404      	adds	r4, #4
 8007cca:	2307      	movs	r3, #7
 8007ccc:	fb94 f3f3 	sdiv	r3, r4, r3
 8007cd0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007cd4:	1ae4      	subs	r4, r4, r3
 8007cd6:	bf48      	it	mi
 8007cd8:	3407      	addmi	r4, #7
 8007cda:	f8c6 9020 	str.w	r9, [r6, #32]
 8007cde:	61b4      	str	r4, [r6, #24]
 8007ce0:	4650      	mov	r0, sl
 8007ce2:	4659      	mov	r1, fp
 8007ce4:	b009      	add	sp, #36	; 0x24
 8007ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007cee:	e7bf      	b.n	8007c70 <mktime+0x290>
 8007cf0:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8007cf4:	e7d7      	b.n	8007ca6 <mktime+0x2c6>
 8007cf6:	f240 136d 	movw	r3, #365	; 0x16d
 8007cfa:	e7d4      	b.n	8007ca6 <mktime+0x2c6>
 8007cfc:	0801808c 	.word	0x0801808c
 8007d00:	00015180 	.word	0x00015180
 8007d04:	20000464 	.word	0x20000464
 8007d08:	07ab      	lsls	r3, r5, #30
 8007d0a:	d118      	bne.n	8007d3e <mktime+0x35e>
 8007d0c:	2264      	movs	r2, #100	; 0x64
 8007d0e:	fb95 f3f2 	sdiv	r3, r5, r2
 8007d12:	fb02 5313 	mls	r3, r2, r3, r5
 8007d16:	b9ab      	cbnz	r3, 8007d44 <mktime+0x364>
 8007d18:	f205 756c 	addw	r5, r5, #1900	; 0x76c
 8007d1c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007d20:	fb95 f3f2 	sdiv	r3, r5, r2
 8007d24:	fb02 5513 	mls	r5, r2, r3, r5
 8007d28:	2d00      	cmp	r5, #0
 8007d2a:	f240 136d 	movw	r3, #365	; 0x16d
 8007d2e:	bf08      	it	eq
 8007d30:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8007d34:	429f      	cmp	r7, r3
 8007d36:	bfa8      	it	ge
 8007d38:	1aff      	subge	r7, r7, r3
 8007d3a:	61f7      	str	r7, [r6, #28]
 8007d3c:	e7b4      	b.n	8007ca8 <mktime+0x2c8>
 8007d3e:	f240 136d 	movw	r3, #365	; 0x16d
 8007d42:	e7f7      	b.n	8007d34 <mktime+0x354>
 8007d44:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8007d48:	e7f4      	b.n	8007d34 <mktime+0x354>
 8007d4a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007d4e:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8007d52:	e7c5      	b.n	8007ce0 <mktime+0x300>

08007d54 <_free_r>:
 8007d54:	b538      	push	{r3, r4, r5, lr}
 8007d56:	4605      	mov	r5, r0
 8007d58:	2900      	cmp	r1, #0
 8007d5a:	d045      	beq.n	8007de8 <_free_r+0x94>
 8007d5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d60:	1f0c      	subs	r4, r1, #4
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	bfb8      	it	lt
 8007d66:	18e4      	addlt	r4, r4, r3
 8007d68:	f002 ffa4 	bl	800acb4 <__malloc_lock>
 8007d6c:	4a1f      	ldr	r2, [pc, #124]	; (8007dec <_free_r+0x98>)
 8007d6e:	6813      	ldr	r3, [r2, #0]
 8007d70:	4610      	mov	r0, r2
 8007d72:	b933      	cbnz	r3, 8007d82 <_free_r+0x2e>
 8007d74:	6063      	str	r3, [r4, #4]
 8007d76:	6014      	str	r4, [r2, #0]
 8007d78:	4628      	mov	r0, r5
 8007d7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d7e:	f002 bf9a 	b.w	800acb6 <__malloc_unlock>
 8007d82:	42a3      	cmp	r3, r4
 8007d84:	d90c      	bls.n	8007da0 <_free_r+0x4c>
 8007d86:	6821      	ldr	r1, [r4, #0]
 8007d88:	1862      	adds	r2, r4, r1
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	bf04      	itt	eq
 8007d8e:	681a      	ldreq	r2, [r3, #0]
 8007d90:	685b      	ldreq	r3, [r3, #4]
 8007d92:	6063      	str	r3, [r4, #4]
 8007d94:	bf04      	itt	eq
 8007d96:	1852      	addeq	r2, r2, r1
 8007d98:	6022      	streq	r2, [r4, #0]
 8007d9a:	6004      	str	r4, [r0, #0]
 8007d9c:	e7ec      	b.n	8007d78 <_free_r+0x24>
 8007d9e:	4613      	mov	r3, r2
 8007da0:	685a      	ldr	r2, [r3, #4]
 8007da2:	b10a      	cbz	r2, 8007da8 <_free_r+0x54>
 8007da4:	42a2      	cmp	r2, r4
 8007da6:	d9fa      	bls.n	8007d9e <_free_r+0x4a>
 8007da8:	6819      	ldr	r1, [r3, #0]
 8007daa:	1858      	adds	r0, r3, r1
 8007dac:	42a0      	cmp	r0, r4
 8007dae:	d10b      	bne.n	8007dc8 <_free_r+0x74>
 8007db0:	6820      	ldr	r0, [r4, #0]
 8007db2:	4401      	add	r1, r0
 8007db4:	1858      	adds	r0, r3, r1
 8007db6:	4282      	cmp	r2, r0
 8007db8:	6019      	str	r1, [r3, #0]
 8007dba:	d1dd      	bne.n	8007d78 <_free_r+0x24>
 8007dbc:	6810      	ldr	r0, [r2, #0]
 8007dbe:	6852      	ldr	r2, [r2, #4]
 8007dc0:	605a      	str	r2, [r3, #4]
 8007dc2:	4401      	add	r1, r0
 8007dc4:	6019      	str	r1, [r3, #0]
 8007dc6:	e7d7      	b.n	8007d78 <_free_r+0x24>
 8007dc8:	d902      	bls.n	8007dd0 <_free_r+0x7c>
 8007dca:	230c      	movs	r3, #12
 8007dcc:	602b      	str	r3, [r5, #0]
 8007dce:	e7d3      	b.n	8007d78 <_free_r+0x24>
 8007dd0:	6820      	ldr	r0, [r4, #0]
 8007dd2:	1821      	adds	r1, r4, r0
 8007dd4:	428a      	cmp	r2, r1
 8007dd6:	bf04      	itt	eq
 8007dd8:	6811      	ldreq	r1, [r2, #0]
 8007dda:	6852      	ldreq	r2, [r2, #4]
 8007ddc:	6062      	str	r2, [r4, #4]
 8007dde:	bf04      	itt	eq
 8007de0:	1809      	addeq	r1, r1, r0
 8007de2:	6021      	streq	r1, [r4, #0]
 8007de4:	605c      	str	r4, [r3, #4]
 8007de6:	e7c7      	b.n	8007d78 <_free_r+0x24>
 8007de8:	bd38      	pop	{r3, r4, r5, pc}
 8007dea:	bf00      	nop
 8007dec:	20000440 	.word	0x20000440

08007df0 <_malloc_r>:
 8007df0:	b570      	push	{r4, r5, r6, lr}
 8007df2:	1ccd      	adds	r5, r1, #3
 8007df4:	f025 0503 	bic.w	r5, r5, #3
 8007df8:	3508      	adds	r5, #8
 8007dfa:	2d0c      	cmp	r5, #12
 8007dfc:	bf38      	it	cc
 8007dfe:	250c      	movcc	r5, #12
 8007e00:	2d00      	cmp	r5, #0
 8007e02:	4606      	mov	r6, r0
 8007e04:	db01      	blt.n	8007e0a <_malloc_r+0x1a>
 8007e06:	42a9      	cmp	r1, r5
 8007e08:	d903      	bls.n	8007e12 <_malloc_r+0x22>
 8007e0a:	230c      	movs	r3, #12
 8007e0c:	6033      	str	r3, [r6, #0]
 8007e0e:	2000      	movs	r0, #0
 8007e10:	bd70      	pop	{r4, r5, r6, pc}
 8007e12:	f002 ff4f 	bl	800acb4 <__malloc_lock>
 8007e16:	4a21      	ldr	r2, [pc, #132]	; (8007e9c <_malloc_r+0xac>)
 8007e18:	6814      	ldr	r4, [r2, #0]
 8007e1a:	4621      	mov	r1, r4
 8007e1c:	b991      	cbnz	r1, 8007e44 <_malloc_r+0x54>
 8007e1e:	4c20      	ldr	r4, [pc, #128]	; (8007ea0 <_malloc_r+0xb0>)
 8007e20:	6823      	ldr	r3, [r4, #0]
 8007e22:	b91b      	cbnz	r3, 8007e2c <_malloc_r+0x3c>
 8007e24:	4630      	mov	r0, r6
 8007e26:	f000 fcab 	bl	8008780 <_sbrk_r>
 8007e2a:	6020      	str	r0, [r4, #0]
 8007e2c:	4629      	mov	r1, r5
 8007e2e:	4630      	mov	r0, r6
 8007e30:	f000 fca6 	bl	8008780 <_sbrk_r>
 8007e34:	1c43      	adds	r3, r0, #1
 8007e36:	d124      	bne.n	8007e82 <_malloc_r+0x92>
 8007e38:	230c      	movs	r3, #12
 8007e3a:	6033      	str	r3, [r6, #0]
 8007e3c:	4630      	mov	r0, r6
 8007e3e:	f002 ff3a 	bl	800acb6 <__malloc_unlock>
 8007e42:	e7e4      	b.n	8007e0e <_malloc_r+0x1e>
 8007e44:	680b      	ldr	r3, [r1, #0]
 8007e46:	1b5b      	subs	r3, r3, r5
 8007e48:	d418      	bmi.n	8007e7c <_malloc_r+0x8c>
 8007e4a:	2b0b      	cmp	r3, #11
 8007e4c:	d90f      	bls.n	8007e6e <_malloc_r+0x7e>
 8007e4e:	600b      	str	r3, [r1, #0]
 8007e50:	50cd      	str	r5, [r1, r3]
 8007e52:	18cc      	adds	r4, r1, r3
 8007e54:	4630      	mov	r0, r6
 8007e56:	f002 ff2e 	bl	800acb6 <__malloc_unlock>
 8007e5a:	f104 000b 	add.w	r0, r4, #11
 8007e5e:	1d23      	adds	r3, r4, #4
 8007e60:	f020 0007 	bic.w	r0, r0, #7
 8007e64:	1ac3      	subs	r3, r0, r3
 8007e66:	d0d3      	beq.n	8007e10 <_malloc_r+0x20>
 8007e68:	425a      	negs	r2, r3
 8007e6a:	50e2      	str	r2, [r4, r3]
 8007e6c:	e7d0      	b.n	8007e10 <_malloc_r+0x20>
 8007e6e:	428c      	cmp	r4, r1
 8007e70:	684b      	ldr	r3, [r1, #4]
 8007e72:	bf16      	itet	ne
 8007e74:	6063      	strne	r3, [r4, #4]
 8007e76:	6013      	streq	r3, [r2, #0]
 8007e78:	460c      	movne	r4, r1
 8007e7a:	e7eb      	b.n	8007e54 <_malloc_r+0x64>
 8007e7c:	460c      	mov	r4, r1
 8007e7e:	6849      	ldr	r1, [r1, #4]
 8007e80:	e7cc      	b.n	8007e1c <_malloc_r+0x2c>
 8007e82:	1cc4      	adds	r4, r0, #3
 8007e84:	f024 0403 	bic.w	r4, r4, #3
 8007e88:	42a0      	cmp	r0, r4
 8007e8a:	d005      	beq.n	8007e98 <_malloc_r+0xa8>
 8007e8c:	1a21      	subs	r1, r4, r0
 8007e8e:	4630      	mov	r0, r6
 8007e90:	f000 fc76 	bl	8008780 <_sbrk_r>
 8007e94:	3001      	adds	r0, #1
 8007e96:	d0cf      	beq.n	8007e38 <_malloc_r+0x48>
 8007e98:	6025      	str	r5, [r4, #0]
 8007e9a:	e7db      	b.n	8007e54 <_malloc_r+0x64>
 8007e9c:	20000440 	.word	0x20000440
 8007ea0:	20000444 	.word	0x20000444

08007ea4 <__cvt>:
 8007ea4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ea8:	ec55 4b10 	vmov	r4, r5, d0
 8007eac:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007eae:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007eb2:	2d00      	cmp	r5, #0
 8007eb4:	460e      	mov	r6, r1
 8007eb6:	4691      	mov	r9, r2
 8007eb8:	4619      	mov	r1, r3
 8007eba:	bfb8      	it	lt
 8007ebc:	4622      	movlt	r2, r4
 8007ebe:	462b      	mov	r3, r5
 8007ec0:	f027 0720 	bic.w	r7, r7, #32
 8007ec4:	bfbb      	ittet	lt
 8007ec6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007eca:	461d      	movlt	r5, r3
 8007ecc:	2300      	movge	r3, #0
 8007ece:	232d      	movlt	r3, #45	; 0x2d
 8007ed0:	bfb8      	it	lt
 8007ed2:	4614      	movlt	r4, r2
 8007ed4:	2f46      	cmp	r7, #70	; 0x46
 8007ed6:	700b      	strb	r3, [r1, #0]
 8007ed8:	d004      	beq.n	8007ee4 <__cvt+0x40>
 8007eda:	2f45      	cmp	r7, #69	; 0x45
 8007edc:	d100      	bne.n	8007ee0 <__cvt+0x3c>
 8007ede:	3601      	adds	r6, #1
 8007ee0:	2102      	movs	r1, #2
 8007ee2:	e000      	b.n	8007ee6 <__cvt+0x42>
 8007ee4:	2103      	movs	r1, #3
 8007ee6:	ab03      	add	r3, sp, #12
 8007ee8:	9301      	str	r3, [sp, #4]
 8007eea:	ab02      	add	r3, sp, #8
 8007eec:	9300      	str	r3, [sp, #0]
 8007eee:	4632      	mov	r2, r6
 8007ef0:	4653      	mov	r3, sl
 8007ef2:	ec45 4b10 	vmov	d0, r4, r5
 8007ef6:	f001 ff8f 	bl	8009e18 <_dtoa_r>
 8007efa:	2f47      	cmp	r7, #71	; 0x47
 8007efc:	4680      	mov	r8, r0
 8007efe:	d102      	bne.n	8007f06 <__cvt+0x62>
 8007f00:	f019 0f01 	tst.w	r9, #1
 8007f04:	d026      	beq.n	8007f54 <__cvt+0xb0>
 8007f06:	2f46      	cmp	r7, #70	; 0x46
 8007f08:	eb08 0906 	add.w	r9, r8, r6
 8007f0c:	d111      	bne.n	8007f32 <__cvt+0x8e>
 8007f0e:	f898 3000 	ldrb.w	r3, [r8]
 8007f12:	2b30      	cmp	r3, #48	; 0x30
 8007f14:	d10a      	bne.n	8007f2c <__cvt+0x88>
 8007f16:	2200      	movs	r2, #0
 8007f18:	2300      	movs	r3, #0
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	4629      	mov	r1, r5
 8007f1e:	f7f8 fde3 	bl	8000ae8 <__aeabi_dcmpeq>
 8007f22:	b918      	cbnz	r0, 8007f2c <__cvt+0x88>
 8007f24:	f1c6 0601 	rsb	r6, r6, #1
 8007f28:	f8ca 6000 	str.w	r6, [sl]
 8007f2c:	f8da 3000 	ldr.w	r3, [sl]
 8007f30:	4499      	add	r9, r3
 8007f32:	2200      	movs	r2, #0
 8007f34:	2300      	movs	r3, #0
 8007f36:	4620      	mov	r0, r4
 8007f38:	4629      	mov	r1, r5
 8007f3a:	f7f8 fdd5 	bl	8000ae8 <__aeabi_dcmpeq>
 8007f3e:	b938      	cbnz	r0, 8007f50 <__cvt+0xac>
 8007f40:	2230      	movs	r2, #48	; 0x30
 8007f42:	9b03      	ldr	r3, [sp, #12]
 8007f44:	454b      	cmp	r3, r9
 8007f46:	d205      	bcs.n	8007f54 <__cvt+0xb0>
 8007f48:	1c59      	adds	r1, r3, #1
 8007f4a:	9103      	str	r1, [sp, #12]
 8007f4c:	701a      	strb	r2, [r3, #0]
 8007f4e:	e7f8      	b.n	8007f42 <__cvt+0x9e>
 8007f50:	f8cd 900c 	str.w	r9, [sp, #12]
 8007f54:	9b03      	ldr	r3, [sp, #12]
 8007f56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f58:	eba3 0308 	sub.w	r3, r3, r8
 8007f5c:	4640      	mov	r0, r8
 8007f5e:	6013      	str	r3, [r2, #0]
 8007f60:	b004      	add	sp, #16
 8007f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007f66 <__exponent>:
 8007f66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f68:	2900      	cmp	r1, #0
 8007f6a:	4604      	mov	r4, r0
 8007f6c:	bfba      	itte	lt
 8007f6e:	4249      	neglt	r1, r1
 8007f70:	232d      	movlt	r3, #45	; 0x2d
 8007f72:	232b      	movge	r3, #43	; 0x2b
 8007f74:	2909      	cmp	r1, #9
 8007f76:	f804 2b02 	strb.w	r2, [r4], #2
 8007f7a:	7043      	strb	r3, [r0, #1]
 8007f7c:	dd20      	ble.n	8007fc0 <__exponent+0x5a>
 8007f7e:	f10d 0307 	add.w	r3, sp, #7
 8007f82:	461f      	mov	r7, r3
 8007f84:	260a      	movs	r6, #10
 8007f86:	fb91 f5f6 	sdiv	r5, r1, r6
 8007f8a:	fb06 1115 	mls	r1, r6, r5, r1
 8007f8e:	3130      	adds	r1, #48	; 0x30
 8007f90:	2d09      	cmp	r5, #9
 8007f92:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007f96:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8007f9a:	4629      	mov	r1, r5
 8007f9c:	dc09      	bgt.n	8007fb2 <__exponent+0x4c>
 8007f9e:	3130      	adds	r1, #48	; 0x30
 8007fa0:	3b02      	subs	r3, #2
 8007fa2:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007fa6:	42bb      	cmp	r3, r7
 8007fa8:	4622      	mov	r2, r4
 8007faa:	d304      	bcc.n	8007fb6 <__exponent+0x50>
 8007fac:	1a10      	subs	r0, r2, r0
 8007fae:	b003      	add	sp, #12
 8007fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	e7e7      	b.n	8007f86 <__exponent+0x20>
 8007fb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fba:	f804 2b01 	strb.w	r2, [r4], #1
 8007fbe:	e7f2      	b.n	8007fa6 <__exponent+0x40>
 8007fc0:	2330      	movs	r3, #48	; 0x30
 8007fc2:	4419      	add	r1, r3
 8007fc4:	7083      	strb	r3, [r0, #2]
 8007fc6:	1d02      	adds	r2, r0, #4
 8007fc8:	70c1      	strb	r1, [r0, #3]
 8007fca:	e7ef      	b.n	8007fac <__exponent+0x46>

08007fcc <_printf_float>:
 8007fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd0:	b08d      	sub	sp, #52	; 0x34
 8007fd2:	460c      	mov	r4, r1
 8007fd4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007fd8:	4616      	mov	r6, r2
 8007fda:	461f      	mov	r7, r3
 8007fdc:	4605      	mov	r5, r0
 8007fde:	f002 fe37 	bl	800ac50 <_localeconv_r>
 8007fe2:	6803      	ldr	r3, [r0, #0]
 8007fe4:	9304      	str	r3, [sp, #16]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7f8 f8fc 	bl	80001e4 <strlen>
 8007fec:	2300      	movs	r3, #0
 8007fee:	930a      	str	r3, [sp, #40]	; 0x28
 8007ff0:	f8d8 3000 	ldr.w	r3, [r8]
 8007ff4:	9005      	str	r0, [sp, #20]
 8007ff6:	3307      	adds	r3, #7
 8007ff8:	f023 0307 	bic.w	r3, r3, #7
 8007ffc:	f103 0208 	add.w	r2, r3, #8
 8008000:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008004:	f8d4 b000 	ldr.w	fp, [r4]
 8008008:	f8c8 2000 	str.w	r2, [r8]
 800800c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008010:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008014:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008018:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800801c:	9307      	str	r3, [sp, #28]
 800801e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008022:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008026:	4ba7      	ldr	r3, [pc, #668]	; (80082c4 <_printf_float+0x2f8>)
 8008028:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800802c:	f7f8 fd8e 	bl	8000b4c <__aeabi_dcmpun>
 8008030:	bb70      	cbnz	r0, 8008090 <_printf_float+0xc4>
 8008032:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008036:	4ba3      	ldr	r3, [pc, #652]	; (80082c4 <_printf_float+0x2f8>)
 8008038:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800803c:	f7f8 fd68 	bl	8000b10 <__aeabi_dcmple>
 8008040:	bb30      	cbnz	r0, 8008090 <_printf_float+0xc4>
 8008042:	2200      	movs	r2, #0
 8008044:	2300      	movs	r3, #0
 8008046:	4640      	mov	r0, r8
 8008048:	4649      	mov	r1, r9
 800804a:	f7f8 fd57 	bl	8000afc <__aeabi_dcmplt>
 800804e:	b110      	cbz	r0, 8008056 <_printf_float+0x8a>
 8008050:	232d      	movs	r3, #45	; 0x2d
 8008052:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008056:	4a9c      	ldr	r2, [pc, #624]	; (80082c8 <_printf_float+0x2fc>)
 8008058:	4b9c      	ldr	r3, [pc, #624]	; (80082cc <_printf_float+0x300>)
 800805a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800805e:	bf8c      	ite	hi
 8008060:	4690      	movhi	r8, r2
 8008062:	4698      	movls	r8, r3
 8008064:	2303      	movs	r3, #3
 8008066:	f02b 0204 	bic.w	r2, fp, #4
 800806a:	6123      	str	r3, [r4, #16]
 800806c:	6022      	str	r2, [r4, #0]
 800806e:	f04f 0900 	mov.w	r9, #0
 8008072:	9700      	str	r7, [sp, #0]
 8008074:	4633      	mov	r3, r6
 8008076:	aa0b      	add	r2, sp, #44	; 0x2c
 8008078:	4621      	mov	r1, r4
 800807a:	4628      	mov	r0, r5
 800807c:	f000 f9e6 	bl	800844c <_printf_common>
 8008080:	3001      	adds	r0, #1
 8008082:	f040 808d 	bne.w	80081a0 <_printf_float+0x1d4>
 8008086:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800808a:	b00d      	add	sp, #52	; 0x34
 800808c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008090:	4642      	mov	r2, r8
 8008092:	464b      	mov	r3, r9
 8008094:	4640      	mov	r0, r8
 8008096:	4649      	mov	r1, r9
 8008098:	f7f8 fd58 	bl	8000b4c <__aeabi_dcmpun>
 800809c:	b110      	cbz	r0, 80080a4 <_printf_float+0xd8>
 800809e:	4a8c      	ldr	r2, [pc, #560]	; (80082d0 <_printf_float+0x304>)
 80080a0:	4b8c      	ldr	r3, [pc, #560]	; (80082d4 <_printf_float+0x308>)
 80080a2:	e7da      	b.n	800805a <_printf_float+0x8e>
 80080a4:	6861      	ldr	r1, [r4, #4]
 80080a6:	1c4b      	adds	r3, r1, #1
 80080a8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80080ac:	a80a      	add	r0, sp, #40	; 0x28
 80080ae:	d13e      	bne.n	800812e <_printf_float+0x162>
 80080b0:	2306      	movs	r3, #6
 80080b2:	6063      	str	r3, [r4, #4]
 80080b4:	2300      	movs	r3, #0
 80080b6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80080ba:	ab09      	add	r3, sp, #36	; 0x24
 80080bc:	9300      	str	r3, [sp, #0]
 80080be:	ec49 8b10 	vmov	d0, r8, r9
 80080c2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80080c6:	6022      	str	r2, [r4, #0]
 80080c8:	f8cd a004 	str.w	sl, [sp, #4]
 80080cc:	6861      	ldr	r1, [r4, #4]
 80080ce:	4628      	mov	r0, r5
 80080d0:	f7ff fee8 	bl	8007ea4 <__cvt>
 80080d4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80080d8:	2b47      	cmp	r3, #71	; 0x47
 80080da:	4680      	mov	r8, r0
 80080dc:	d109      	bne.n	80080f2 <_printf_float+0x126>
 80080de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080e0:	1cd8      	adds	r0, r3, #3
 80080e2:	db02      	blt.n	80080ea <_printf_float+0x11e>
 80080e4:	6862      	ldr	r2, [r4, #4]
 80080e6:	4293      	cmp	r3, r2
 80080e8:	dd47      	ble.n	800817a <_printf_float+0x1ae>
 80080ea:	f1aa 0a02 	sub.w	sl, sl, #2
 80080ee:	fa5f fa8a 	uxtb.w	sl, sl
 80080f2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80080f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080f8:	d824      	bhi.n	8008144 <_printf_float+0x178>
 80080fa:	3901      	subs	r1, #1
 80080fc:	4652      	mov	r2, sl
 80080fe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008102:	9109      	str	r1, [sp, #36]	; 0x24
 8008104:	f7ff ff2f 	bl	8007f66 <__exponent>
 8008108:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800810a:	1813      	adds	r3, r2, r0
 800810c:	2a01      	cmp	r2, #1
 800810e:	4681      	mov	r9, r0
 8008110:	6123      	str	r3, [r4, #16]
 8008112:	dc02      	bgt.n	800811a <_printf_float+0x14e>
 8008114:	6822      	ldr	r2, [r4, #0]
 8008116:	07d1      	lsls	r1, r2, #31
 8008118:	d501      	bpl.n	800811e <_printf_float+0x152>
 800811a:	3301      	adds	r3, #1
 800811c:	6123      	str	r3, [r4, #16]
 800811e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008122:	2b00      	cmp	r3, #0
 8008124:	d0a5      	beq.n	8008072 <_printf_float+0xa6>
 8008126:	232d      	movs	r3, #45	; 0x2d
 8008128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800812c:	e7a1      	b.n	8008072 <_printf_float+0xa6>
 800812e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8008132:	f000 8177 	beq.w	8008424 <_printf_float+0x458>
 8008136:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800813a:	d1bb      	bne.n	80080b4 <_printf_float+0xe8>
 800813c:	2900      	cmp	r1, #0
 800813e:	d1b9      	bne.n	80080b4 <_printf_float+0xe8>
 8008140:	2301      	movs	r3, #1
 8008142:	e7b6      	b.n	80080b2 <_printf_float+0xe6>
 8008144:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008148:	d119      	bne.n	800817e <_printf_float+0x1b2>
 800814a:	2900      	cmp	r1, #0
 800814c:	6863      	ldr	r3, [r4, #4]
 800814e:	dd0c      	ble.n	800816a <_printf_float+0x19e>
 8008150:	6121      	str	r1, [r4, #16]
 8008152:	b913      	cbnz	r3, 800815a <_printf_float+0x18e>
 8008154:	6822      	ldr	r2, [r4, #0]
 8008156:	07d2      	lsls	r2, r2, #31
 8008158:	d502      	bpl.n	8008160 <_printf_float+0x194>
 800815a:	3301      	adds	r3, #1
 800815c:	440b      	add	r3, r1
 800815e:	6123      	str	r3, [r4, #16]
 8008160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008162:	65a3      	str	r3, [r4, #88]	; 0x58
 8008164:	f04f 0900 	mov.w	r9, #0
 8008168:	e7d9      	b.n	800811e <_printf_float+0x152>
 800816a:	b913      	cbnz	r3, 8008172 <_printf_float+0x1a6>
 800816c:	6822      	ldr	r2, [r4, #0]
 800816e:	07d0      	lsls	r0, r2, #31
 8008170:	d501      	bpl.n	8008176 <_printf_float+0x1aa>
 8008172:	3302      	adds	r3, #2
 8008174:	e7f3      	b.n	800815e <_printf_float+0x192>
 8008176:	2301      	movs	r3, #1
 8008178:	e7f1      	b.n	800815e <_printf_float+0x192>
 800817a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800817e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008182:	4293      	cmp	r3, r2
 8008184:	db05      	blt.n	8008192 <_printf_float+0x1c6>
 8008186:	6822      	ldr	r2, [r4, #0]
 8008188:	6123      	str	r3, [r4, #16]
 800818a:	07d1      	lsls	r1, r2, #31
 800818c:	d5e8      	bpl.n	8008160 <_printf_float+0x194>
 800818e:	3301      	adds	r3, #1
 8008190:	e7e5      	b.n	800815e <_printf_float+0x192>
 8008192:	2b00      	cmp	r3, #0
 8008194:	bfd4      	ite	le
 8008196:	f1c3 0302 	rsble	r3, r3, #2
 800819a:	2301      	movgt	r3, #1
 800819c:	4413      	add	r3, r2
 800819e:	e7de      	b.n	800815e <_printf_float+0x192>
 80081a0:	6823      	ldr	r3, [r4, #0]
 80081a2:	055a      	lsls	r2, r3, #21
 80081a4:	d407      	bmi.n	80081b6 <_printf_float+0x1ea>
 80081a6:	6923      	ldr	r3, [r4, #16]
 80081a8:	4642      	mov	r2, r8
 80081aa:	4631      	mov	r1, r6
 80081ac:	4628      	mov	r0, r5
 80081ae:	47b8      	blx	r7
 80081b0:	3001      	adds	r0, #1
 80081b2:	d12b      	bne.n	800820c <_printf_float+0x240>
 80081b4:	e767      	b.n	8008086 <_printf_float+0xba>
 80081b6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80081ba:	f240 80dc 	bls.w	8008376 <_printf_float+0x3aa>
 80081be:	2200      	movs	r2, #0
 80081c0:	2300      	movs	r3, #0
 80081c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80081c6:	f7f8 fc8f 	bl	8000ae8 <__aeabi_dcmpeq>
 80081ca:	2800      	cmp	r0, #0
 80081cc:	d033      	beq.n	8008236 <_printf_float+0x26a>
 80081ce:	2301      	movs	r3, #1
 80081d0:	4a41      	ldr	r2, [pc, #260]	; (80082d8 <_printf_float+0x30c>)
 80081d2:	4631      	mov	r1, r6
 80081d4:	4628      	mov	r0, r5
 80081d6:	47b8      	blx	r7
 80081d8:	3001      	adds	r0, #1
 80081da:	f43f af54 	beq.w	8008086 <_printf_float+0xba>
 80081de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081e2:	429a      	cmp	r2, r3
 80081e4:	db02      	blt.n	80081ec <_printf_float+0x220>
 80081e6:	6823      	ldr	r3, [r4, #0]
 80081e8:	07d8      	lsls	r0, r3, #31
 80081ea:	d50f      	bpl.n	800820c <_printf_float+0x240>
 80081ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081f0:	4631      	mov	r1, r6
 80081f2:	4628      	mov	r0, r5
 80081f4:	47b8      	blx	r7
 80081f6:	3001      	adds	r0, #1
 80081f8:	f43f af45 	beq.w	8008086 <_printf_float+0xba>
 80081fc:	f04f 0800 	mov.w	r8, #0
 8008200:	f104 091a 	add.w	r9, r4, #26
 8008204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008206:	3b01      	subs	r3, #1
 8008208:	4543      	cmp	r3, r8
 800820a:	dc09      	bgt.n	8008220 <_printf_float+0x254>
 800820c:	6823      	ldr	r3, [r4, #0]
 800820e:	079b      	lsls	r3, r3, #30
 8008210:	f100 8103 	bmi.w	800841a <_printf_float+0x44e>
 8008214:	68e0      	ldr	r0, [r4, #12]
 8008216:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008218:	4298      	cmp	r0, r3
 800821a:	bfb8      	it	lt
 800821c:	4618      	movlt	r0, r3
 800821e:	e734      	b.n	800808a <_printf_float+0xbe>
 8008220:	2301      	movs	r3, #1
 8008222:	464a      	mov	r2, r9
 8008224:	4631      	mov	r1, r6
 8008226:	4628      	mov	r0, r5
 8008228:	47b8      	blx	r7
 800822a:	3001      	adds	r0, #1
 800822c:	f43f af2b 	beq.w	8008086 <_printf_float+0xba>
 8008230:	f108 0801 	add.w	r8, r8, #1
 8008234:	e7e6      	b.n	8008204 <_printf_float+0x238>
 8008236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008238:	2b00      	cmp	r3, #0
 800823a:	dc2b      	bgt.n	8008294 <_printf_float+0x2c8>
 800823c:	2301      	movs	r3, #1
 800823e:	4a26      	ldr	r2, [pc, #152]	; (80082d8 <_printf_float+0x30c>)
 8008240:	4631      	mov	r1, r6
 8008242:	4628      	mov	r0, r5
 8008244:	47b8      	blx	r7
 8008246:	3001      	adds	r0, #1
 8008248:	f43f af1d 	beq.w	8008086 <_printf_float+0xba>
 800824c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800824e:	b923      	cbnz	r3, 800825a <_printf_float+0x28e>
 8008250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008252:	b913      	cbnz	r3, 800825a <_printf_float+0x28e>
 8008254:	6823      	ldr	r3, [r4, #0]
 8008256:	07d9      	lsls	r1, r3, #31
 8008258:	d5d8      	bpl.n	800820c <_printf_float+0x240>
 800825a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800825e:	4631      	mov	r1, r6
 8008260:	4628      	mov	r0, r5
 8008262:	47b8      	blx	r7
 8008264:	3001      	adds	r0, #1
 8008266:	f43f af0e 	beq.w	8008086 <_printf_float+0xba>
 800826a:	f04f 0900 	mov.w	r9, #0
 800826e:	f104 0a1a 	add.w	sl, r4, #26
 8008272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008274:	425b      	negs	r3, r3
 8008276:	454b      	cmp	r3, r9
 8008278:	dc01      	bgt.n	800827e <_printf_float+0x2b2>
 800827a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800827c:	e794      	b.n	80081a8 <_printf_float+0x1dc>
 800827e:	2301      	movs	r3, #1
 8008280:	4652      	mov	r2, sl
 8008282:	4631      	mov	r1, r6
 8008284:	4628      	mov	r0, r5
 8008286:	47b8      	blx	r7
 8008288:	3001      	adds	r0, #1
 800828a:	f43f aefc 	beq.w	8008086 <_printf_float+0xba>
 800828e:	f109 0901 	add.w	r9, r9, #1
 8008292:	e7ee      	b.n	8008272 <_printf_float+0x2a6>
 8008294:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008296:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008298:	429a      	cmp	r2, r3
 800829a:	bfa8      	it	ge
 800829c:	461a      	movge	r2, r3
 800829e:	2a00      	cmp	r2, #0
 80082a0:	4691      	mov	r9, r2
 80082a2:	dd07      	ble.n	80082b4 <_printf_float+0x2e8>
 80082a4:	4613      	mov	r3, r2
 80082a6:	4631      	mov	r1, r6
 80082a8:	4642      	mov	r2, r8
 80082aa:	4628      	mov	r0, r5
 80082ac:	47b8      	blx	r7
 80082ae:	3001      	adds	r0, #1
 80082b0:	f43f aee9 	beq.w	8008086 <_printf_float+0xba>
 80082b4:	f104 031a 	add.w	r3, r4, #26
 80082b8:	f04f 0b00 	mov.w	fp, #0
 80082bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80082c0:	9306      	str	r3, [sp, #24]
 80082c2:	e015      	b.n	80082f0 <_printf_float+0x324>
 80082c4:	7fefffff 	.word	0x7fefffff
 80082c8:	08018120 	.word	0x08018120
 80082cc:	0801811c 	.word	0x0801811c
 80082d0:	08018128 	.word	0x08018128
 80082d4:	08018124 	.word	0x08018124
 80082d8:	0801864c 	.word	0x0801864c
 80082dc:	2301      	movs	r3, #1
 80082de:	9a06      	ldr	r2, [sp, #24]
 80082e0:	4631      	mov	r1, r6
 80082e2:	4628      	mov	r0, r5
 80082e4:	47b8      	blx	r7
 80082e6:	3001      	adds	r0, #1
 80082e8:	f43f aecd 	beq.w	8008086 <_printf_float+0xba>
 80082ec:	f10b 0b01 	add.w	fp, fp, #1
 80082f0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80082f4:	ebaa 0309 	sub.w	r3, sl, r9
 80082f8:	455b      	cmp	r3, fp
 80082fa:	dcef      	bgt.n	80082dc <_printf_float+0x310>
 80082fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008300:	429a      	cmp	r2, r3
 8008302:	44d0      	add	r8, sl
 8008304:	db15      	blt.n	8008332 <_printf_float+0x366>
 8008306:	6823      	ldr	r3, [r4, #0]
 8008308:	07da      	lsls	r2, r3, #31
 800830a:	d412      	bmi.n	8008332 <_printf_float+0x366>
 800830c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800830e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008310:	eba3 020a 	sub.w	r2, r3, sl
 8008314:	eba3 0a01 	sub.w	sl, r3, r1
 8008318:	4592      	cmp	sl, r2
 800831a:	bfa8      	it	ge
 800831c:	4692      	movge	sl, r2
 800831e:	f1ba 0f00 	cmp.w	sl, #0
 8008322:	dc0e      	bgt.n	8008342 <_printf_float+0x376>
 8008324:	f04f 0800 	mov.w	r8, #0
 8008328:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800832c:	f104 091a 	add.w	r9, r4, #26
 8008330:	e019      	b.n	8008366 <_printf_float+0x39a>
 8008332:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008336:	4631      	mov	r1, r6
 8008338:	4628      	mov	r0, r5
 800833a:	47b8      	blx	r7
 800833c:	3001      	adds	r0, #1
 800833e:	d1e5      	bne.n	800830c <_printf_float+0x340>
 8008340:	e6a1      	b.n	8008086 <_printf_float+0xba>
 8008342:	4653      	mov	r3, sl
 8008344:	4642      	mov	r2, r8
 8008346:	4631      	mov	r1, r6
 8008348:	4628      	mov	r0, r5
 800834a:	47b8      	blx	r7
 800834c:	3001      	adds	r0, #1
 800834e:	d1e9      	bne.n	8008324 <_printf_float+0x358>
 8008350:	e699      	b.n	8008086 <_printf_float+0xba>
 8008352:	2301      	movs	r3, #1
 8008354:	464a      	mov	r2, r9
 8008356:	4631      	mov	r1, r6
 8008358:	4628      	mov	r0, r5
 800835a:	47b8      	blx	r7
 800835c:	3001      	adds	r0, #1
 800835e:	f43f ae92 	beq.w	8008086 <_printf_float+0xba>
 8008362:	f108 0801 	add.w	r8, r8, #1
 8008366:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800836a:	1a9b      	subs	r3, r3, r2
 800836c:	eba3 030a 	sub.w	r3, r3, sl
 8008370:	4543      	cmp	r3, r8
 8008372:	dcee      	bgt.n	8008352 <_printf_float+0x386>
 8008374:	e74a      	b.n	800820c <_printf_float+0x240>
 8008376:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008378:	2a01      	cmp	r2, #1
 800837a:	dc01      	bgt.n	8008380 <_printf_float+0x3b4>
 800837c:	07db      	lsls	r3, r3, #31
 800837e:	d53a      	bpl.n	80083f6 <_printf_float+0x42a>
 8008380:	2301      	movs	r3, #1
 8008382:	4642      	mov	r2, r8
 8008384:	4631      	mov	r1, r6
 8008386:	4628      	mov	r0, r5
 8008388:	47b8      	blx	r7
 800838a:	3001      	adds	r0, #1
 800838c:	f43f ae7b 	beq.w	8008086 <_printf_float+0xba>
 8008390:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008394:	4631      	mov	r1, r6
 8008396:	4628      	mov	r0, r5
 8008398:	47b8      	blx	r7
 800839a:	3001      	adds	r0, #1
 800839c:	f108 0801 	add.w	r8, r8, #1
 80083a0:	f43f ae71 	beq.w	8008086 <_printf_float+0xba>
 80083a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083a6:	2200      	movs	r2, #0
 80083a8:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80083ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083b0:	2300      	movs	r3, #0
 80083b2:	f7f8 fb99 	bl	8000ae8 <__aeabi_dcmpeq>
 80083b6:	b9c8      	cbnz	r0, 80083ec <_printf_float+0x420>
 80083b8:	4653      	mov	r3, sl
 80083ba:	4642      	mov	r2, r8
 80083bc:	4631      	mov	r1, r6
 80083be:	4628      	mov	r0, r5
 80083c0:	47b8      	blx	r7
 80083c2:	3001      	adds	r0, #1
 80083c4:	d10e      	bne.n	80083e4 <_printf_float+0x418>
 80083c6:	e65e      	b.n	8008086 <_printf_float+0xba>
 80083c8:	2301      	movs	r3, #1
 80083ca:	4652      	mov	r2, sl
 80083cc:	4631      	mov	r1, r6
 80083ce:	4628      	mov	r0, r5
 80083d0:	47b8      	blx	r7
 80083d2:	3001      	adds	r0, #1
 80083d4:	f43f ae57 	beq.w	8008086 <_printf_float+0xba>
 80083d8:	f108 0801 	add.w	r8, r8, #1
 80083dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083de:	3b01      	subs	r3, #1
 80083e0:	4543      	cmp	r3, r8
 80083e2:	dcf1      	bgt.n	80083c8 <_printf_float+0x3fc>
 80083e4:	464b      	mov	r3, r9
 80083e6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80083ea:	e6de      	b.n	80081aa <_printf_float+0x1de>
 80083ec:	f04f 0800 	mov.w	r8, #0
 80083f0:	f104 0a1a 	add.w	sl, r4, #26
 80083f4:	e7f2      	b.n	80083dc <_printf_float+0x410>
 80083f6:	2301      	movs	r3, #1
 80083f8:	e7df      	b.n	80083ba <_printf_float+0x3ee>
 80083fa:	2301      	movs	r3, #1
 80083fc:	464a      	mov	r2, r9
 80083fe:	4631      	mov	r1, r6
 8008400:	4628      	mov	r0, r5
 8008402:	47b8      	blx	r7
 8008404:	3001      	adds	r0, #1
 8008406:	f43f ae3e 	beq.w	8008086 <_printf_float+0xba>
 800840a:	f108 0801 	add.w	r8, r8, #1
 800840e:	68e3      	ldr	r3, [r4, #12]
 8008410:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008412:	1a9b      	subs	r3, r3, r2
 8008414:	4543      	cmp	r3, r8
 8008416:	dcf0      	bgt.n	80083fa <_printf_float+0x42e>
 8008418:	e6fc      	b.n	8008214 <_printf_float+0x248>
 800841a:	f04f 0800 	mov.w	r8, #0
 800841e:	f104 0919 	add.w	r9, r4, #25
 8008422:	e7f4      	b.n	800840e <_printf_float+0x442>
 8008424:	2900      	cmp	r1, #0
 8008426:	f43f ae8b 	beq.w	8008140 <_printf_float+0x174>
 800842a:	2300      	movs	r3, #0
 800842c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008430:	ab09      	add	r3, sp, #36	; 0x24
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	ec49 8b10 	vmov	d0, r8, r9
 8008438:	6022      	str	r2, [r4, #0]
 800843a:	f8cd a004 	str.w	sl, [sp, #4]
 800843e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008442:	4628      	mov	r0, r5
 8008444:	f7ff fd2e 	bl	8007ea4 <__cvt>
 8008448:	4680      	mov	r8, r0
 800844a:	e648      	b.n	80080de <_printf_float+0x112>

0800844c <_printf_common>:
 800844c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008450:	4691      	mov	r9, r2
 8008452:	461f      	mov	r7, r3
 8008454:	688a      	ldr	r2, [r1, #8]
 8008456:	690b      	ldr	r3, [r1, #16]
 8008458:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800845c:	4293      	cmp	r3, r2
 800845e:	bfb8      	it	lt
 8008460:	4613      	movlt	r3, r2
 8008462:	f8c9 3000 	str.w	r3, [r9]
 8008466:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800846a:	4606      	mov	r6, r0
 800846c:	460c      	mov	r4, r1
 800846e:	b112      	cbz	r2, 8008476 <_printf_common+0x2a>
 8008470:	3301      	adds	r3, #1
 8008472:	f8c9 3000 	str.w	r3, [r9]
 8008476:	6823      	ldr	r3, [r4, #0]
 8008478:	0699      	lsls	r1, r3, #26
 800847a:	bf42      	ittt	mi
 800847c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008480:	3302      	addmi	r3, #2
 8008482:	f8c9 3000 	strmi.w	r3, [r9]
 8008486:	6825      	ldr	r5, [r4, #0]
 8008488:	f015 0506 	ands.w	r5, r5, #6
 800848c:	d107      	bne.n	800849e <_printf_common+0x52>
 800848e:	f104 0a19 	add.w	sl, r4, #25
 8008492:	68e3      	ldr	r3, [r4, #12]
 8008494:	f8d9 2000 	ldr.w	r2, [r9]
 8008498:	1a9b      	subs	r3, r3, r2
 800849a:	42ab      	cmp	r3, r5
 800849c:	dc28      	bgt.n	80084f0 <_printf_common+0xa4>
 800849e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80084a2:	6822      	ldr	r2, [r4, #0]
 80084a4:	3300      	adds	r3, #0
 80084a6:	bf18      	it	ne
 80084a8:	2301      	movne	r3, #1
 80084aa:	0692      	lsls	r2, r2, #26
 80084ac:	d42d      	bmi.n	800850a <_printf_common+0xbe>
 80084ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084b2:	4639      	mov	r1, r7
 80084b4:	4630      	mov	r0, r6
 80084b6:	47c0      	blx	r8
 80084b8:	3001      	adds	r0, #1
 80084ba:	d020      	beq.n	80084fe <_printf_common+0xb2>
 80084bc:	6823      	ldr	r3, [r4, #0]
 80084be:	68e5      	ldr	r5, [r4, #12]
 80084c0:	f8d9 2000 	ldr.w	r2, [r9]
 80084c4:	f003 0306 	and.w	r3, r3, #6
 80084c8:	2b04      	cmp	r3, #4
 80084ca:	bf08      	it	eq
 80084cc:	1aad      	subeq	r5, r5, r2
 80084ce:	68a3      	ldr	r3, [r4, #8]
 80084d0:	6922      	ldr	r2, [r4, #16]
 80084d2:	bf0c      	ite	eq
 80084d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084d8:	2500      	movne	r5, #0
 80084da:	4293      	cmp	r3, r2
 80084dc:	bfc4      	itt	gt
 80084de:	1a9b      	subgt	r3, r3, r2
 80084e0:	18ed      	addgt	r5, r5, r3
 80084e2:	f04f 0900 	mov.w	r9, #0
 80084e6:	341a      	adds	r4, #26
 80084e8:	454d      	cmp	r5, r9
 80084ea:	d11a      	bne.n	8008522 <_printf_common+0xd6>
 80084ec:	2000      	movs	r0, #0
 80084ee:	e008      	b.n	8008502 <_printf_common+0xb6>
 80084f0:	2301      	movs	r3, #1
 80084f2:	4652      	mov	r2, sl
 80084f4:	4639      	mov	r1, r7
 80084f6:	4630      	mov	r0, r6
 80084f8:	47c0      	blx	r8
 80084fa:	3001      	adds	r0, #1
 80084fc:	d103      	bne.n	8008506 <_printf_common+0xba>
 80084fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008506:	3501      	adds	r5, #1
 8008508:	e7c3      	b.n	8008492 <_printf_common+0x46>
 800850a:	18e1      	adds	r1, r4, r3
 800850c:	1c5a      	adds	r2, r3, #1
 800850e:	2030      	movs	r0, #48	; 0x30
 8008510:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008514:	4422      	add	r2, r4
 8008516:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800851a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800851e:	3302      	adds	r3, #2
 8008520:	e7c5      	b.n	80084ae <_printf_common+0x62>
 8008522:	2301      	movs	r3, #1
 8008524:	4622      	mov	r2, r4
 8008526:	4639      	mov	r1, r7
 8008528:	4630      	mov	r0, r6
 800852a:	47c0      	blx	r8
 800852c:	3001      	adds	r0, #1
 800852e:	d0e6      	beq.n	80084fe <_printf_common+0xb2>
 8008530:	f109 0901 	add.w	r9, r9, #1
 8008534:	e7d8      	b.n	80084e8 <_printf_common+0x9c>
	...

08008538 <_printf_i>:
 8008538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800853c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008540:	460c      	mov	r4, r1
 8008542:	7e09      	ldrb	r1, [r1, #24]
 8008544:	b085      	sub	sp, #20
 8008546:	296e      	cmp	r1, #110	; 0x6e
 8008548:	4617      	mov	r7, r2
 800854a:	4606      	mov	r6, r0
 800854c:	4698      	mov	r8, r3
 800854e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008550:	f000 80b3 	beq.w	80086ba <_printf_i+0x182>
 8008554:	d822      	bhi.n	800859c <_printf_i+0x64>
 8008556:	2963      	cmp	r1, #99	; 0x63
 8008558:	d036      	beq.n	80085c8 <_printf_i+0x90>
 800855a:	d80a      	bhi.n	8008572 <_printf_i+0x3a>
 800855c:	2900      	cmp	r1, #0
 800855e:	f000 80b9 	beq.w	80086d4 <_printf_i+0x19c>
 8008562:	2958      	cmp	r1, #88	; 0x58
 8008564:	f000 8083 	beq.w	800866e <_printf_i+0x136>
 8008568:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800856c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008570:	e032      	b.n	80085d8 <_printf_i+0xa0>
 8008572:	2964      	cmp	r1, #100	; 0x64
 8008574:	d001      	beq.n	800857a <_printf_i+0x42>
 8008576:	2969      	cmp	r1, #105	; 0x69
 8008578:	d1f6      	bne.n	8008568 <_printf_i+0x30>
 800857a:	6820      	ldr	r0, [r4, #0]
 800857c:	6813      	ldr	r3, [r2, #0]
 800857e:	0605      	lsls	r5, r0, #24
 8008580:	f103 0104 	add.w	r1, r3, #4
 8008584:	d52a      	bpl.n	80085dc <_printf_i+0xa4>
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	6011      	str	r1, [r2, #0]
 800858a:	2b00      	cmp	r3, #0
 800858c:	da03      	bge.n	8008596 <_printf_i+0x5e>
 800858e:	222d      	movs	r2, #45	; 0x2d
 8008590:	425b      	negs	r3, r3
 8008592:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008596:	486f      	ldr	r0, [pc, #444]	; (8008754 <_printf_i+0x21c>)
 8008598:	220a      	movs	r2, #10
 800859a:	e039      	b.n	8008610 <_printf_i+0xd8>
 800859c:	2973      	cmp	r1, #115	; 0x73
 800859e:	f000 809d 	beq.w	80086dc <_printf_i+0x1a4>
 80085a2:	d808      	bhi.n	80085b6 <_printf_i+0x7e>
 80085a4:	296f      	cmp	r1, #111	; 0x6f
 80085a6:	d020      	beq.n	80085ea <_printf_i+0xb2>
 80085a8:	2970      	cmp	r1, #112	; 0x70
 80085aa:	d1dd      	bne.n	8008568 <_printf_i+0x30>
 80085ac:	6823      	ldr	r3, [r4, #0]
 80085ae:	f043 0320 	orr.w	r3, r3, #32
 80085b2:	6023      	str	r3, [r4, #0]
 80085b4:	e003      	b.n	80085be <_printf_i+0x86>
 80085b6:	2975      	cmp	r1, #117	; 0x75
 80085b8:	d017      	beq.n	80085ea <_printf_i+0xb2>
 80085ba:	2978      	cmp	r1, #120	; 0x78
 80085bc:	d1d4      	bne.n	8008568 <_printf_i+0x30>
 80085be:	2378      	movs	r3, #120	; 0x78
 80085c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085c4:	4864      	ldr	r0, [pc, #400]	; (8008758 <_printf_i+0x220>)
 80085c6:	e055      	b.n	8008674 <_printf_i+0x13c>
 80085c8:	6813      	ldr	r3, [r2, #0]
 80085ca:	1d19      	adds	r1, r3, #4
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	6011      	str	r1, [r2, #0]
 80085d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80085d8:	2301      	movs	r3, #1
 80085da:	e08c      	b.n	80086f6 <_printf_i+0x1be>
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	6011      	str	r1, [r2, #0]
 80085e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80085e4:	bf18      	it	ne
 80085e6:	b21b      	sxthne	r3, r3
 80085e8:	e7cf      	b.n	800858a <_printf_i+0x52>
 80085ea:	6813      	ldr	r3, [r2, #0]
 80085ec:	6825      	ldr	r5, [r4, #0]
 80085ee:	1d18      	adds	r0, r3, #4
 80085f0:	6010      	str	r0, [r2, #0]
 80085f2:	0628      	lsls	r0, r5, #24
 80085f4:	d501      	bpl.n	80085fa <_printf_i+0xc2>
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	e002      	b.n	8008600 <_printf_i+0xc8>
 80085fa:	0668      	lsls	r0, r5, #25
 80085fc:	d5fb      	bpl.n	80085f6 <_printf_i+0xbe>
 80085fe:	881b      	ldrh	r3, [r3, #0]
 8008600:	4854      	ldr	r0, [pc, #336]	; (8008754 <_printf_i+0x21c>)
 8008602:	296f      	cmp	r1, #111	; 0x6f
 8008604:	bf14      	ite	ne
 8008606:	220a      	movne	r2, #10
 8008608:	2208      	moveq	r2, #8
 800860a:	2100      	movs	r1, #0
 800860c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008610:	6865      	ldr	r5, [r4, #4]
 8008612:	60a5      	str	r5, [r4, #8]
 8008614:	2d00      	cmp	r5, #0
 8008616:	f2c0 8095 	blt.w	8008744 <_printf_i+0x20c>
 800861a:	6821      	ldr	r1, [r4, #0]
 800861c:	f021 0104 	bic.w	r1, r1, #4
 8008620:	6021      	str	r1, [r4, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d13d      	bne.n	80086a2 <_printf_i+0x16a>
 8008626:	2d00      	cmp	r5, #0
 8008628:	f040 808e 	bne.w	8008748 <_printf_i+0x210>
 800862c:	4665      	mov	r5, ip
 800862e:	2a08      	cmp	r2, #8
 8008630:	d10b      	bne.n	800864a <_printf_i+0x112>
 8008632:	6823      	ldr	r3, [r4, #0]
 8008634:	07db      	lsls	r3, r3, #31
 8008636:	d508      	bpl.n	800864a <_printf_i+0x112>
 8008638:	6923      	ldr	r3, [r4, #16]
 800863a:	6862      	ldr	r2, [r4, #4]
 800863c:	429a      	cmp	r2, r3
 800863e:	bfde      	ittt	le
 8008640:	2330      	movle	r3, #48	; 0x30
 8008642:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008646:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800864a:	ebac 0305 	sub.w	r3, ip, r5
 800864e:	6123      	str	r3, [r4, #16]
 8008650:	f8cd 8000 	str.w	r8, [sp]
 8008654:	463b      	mov	r3, r7
 8008656:	aa03      	add	r2, sp, #12
 8008658:	4621      	mov	r1, r4
 800865a:	4630      	mov	r0, r6
 800865c:	f7ff fef6 	bl	800844c <_printf_common>
 8008660:	3001      	adds	r0, #1
 8008662:	d14d      	bne.n	8008700 <_printf_i+0x1c8>
 8008664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008668:	b005      	add	sp, #20
 800866a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800866e:	4839      	ldr	r0, [pc, #228]	; (8008754 <_printf_i+0x21c>)
 8008670:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008674:	6813      	ldr	r3, [r2, #0]
 8008676:	6821      	ldr	r1, [r4, #0]
 8008678:	1d1d      	adds	r5, r3, #4
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	6015      	str	r5, [r2, #0]
 800867e:	060a      	lsls	r2, r1, #24
 8008680:	d50b      	bpl.n	800869a <_printf_i+0x162>
 8008682:	07ca      	lsls	r2, r1, #31
 8008684:	bf44      	itt	mi
 8008686:	f041 0120 	orrmi.w	r1, r1, #32
 800868a:	6021      	strmi	r1, [r4, #0]
 800868c:	b91b      	cbnz	r3, 8008696 <_printf_i+0x15e>
 800868e:	6822      	ldr	r2, [r4, #0]
 8008690:	f022 0220 	bic.w	r2, r2, #32
 8008694:	6022      	str	r2, [r4, #0]
 8008696:	2210      	movs	r2, #16
 8008698:	e7b7      	b.n	800860a <_printf_i+0xd2>
 800869a:	064d      	lsls	r5, r1, #25
 800869c:	bf48      	it	mi
 800869e:	b29b      	uxthmi	r3, r3
 80086a0:	e7ef      	b.n	8008682 <_printf_i+0x14a>
 80086a2:	4665      	mov	r5, ip
 80086a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80086a8:	fb02 3311 	mls	r3, r2, r1, r3
 80086ac:	5cc3      	ldrb	r3, [r0, r3]
 80086ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80086b2:	460b      	mov	r3, r1
 80086b4:	2900      	cmp	r1, #0
 80086b6:	d1f5      	bne.n	80086a4 <_printf_i+0x16c>
 80086b8:	e7b9      	b.n	800862e <_printf_i+0xf6>
 80086ba:	6813      	ldr	r3, [r2, #0]
 80086bc:	6825      	ldr	r5, [r4, #0]
 80086be:	6961      	ldr	r1, [r4, #20]
 80086c0:	1d18      	adds	r0, r3, #4
 80086c2:	6010      	str	r0, [r2, #0]
 80086c4:	0628      	lsls	r0, r5, #24
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	d501      	bpl.n	80086ce <_printf_i+0x196>
 80086ca:	6019      	str	r1, [r3, #0]
 80086cc:	e002      	b.n	80086d4 <_printf_i+0x19c>
 80086ce:	066a      	lsls	r2, r5, #25
 80086d0:	d5fb      	bpl.n	80086ca <_printf_i+0x192>
 80086d2:	8019      	strh	r1, [r3, #0]
 80086d4:	2300      	movs	r3, #0
 80086d6:	6123      	str	r3, [r4, #16]
 80086d8:	4665      	mov	r5, ip
 80086da:	e7b9      	b.n	8008650 <_printf_i+0x118>
 80086dc:	6813      	ldr	r3, [r2, #0]
 80086de:	1d19      	adds	r1, r3, #4
 80086e0:	6011      	str	r1, [r2, #0]
 80086e2:	681d      	ldr	r5, [r3, #0]
 80086e4:	6862      	ldr	r2, [r4, #4]
 80086e6:	2100      	movs	r1, #0
 80086e8:	4628      	mov	r0, r5
 80086ea:	f7f7 fd89 	bl	8000200 <memchr>
 80086ee:	b108      	cbz	r0, 80086f4 <_printf_i+0x1bc>
 80086f0:	1b40      	subs	r0, r0, r5
 80086f2:	6060      	str	r0, [r4, #4]
 80086f4:	6863      	ldr	r3, [r4, #4]
 80086f6:	6123      	str	r3, [r4, #16]
 80086f8:	2300      	movs	r3, #0
 80086fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086fe:	e7a7      	b.n	8008650 <_printf_i+0x118>
 8008700:	6923      	ldr	r3, [r4, #16]
 8008702:	462a      	mov	r2, r5
 8008704:	4639      	mov	r1, r7
 8008706:	4630      	mov	r0, r6
 8008708:	47c0      	blx	r8
 800870a:	3001      	adds	r0, #1
 800870c:	d0aa      	beq.n	8008664 <_printf_i+0x12c>
 800870e:	6823      	ldr	r3, [r4, #0]
 8008710:	079b      	lsls	r3, r3, #30
 8008712:	d413      	bmi.n	800873c <_printf_i+0x204>
 8008714:	68e0      	ldr	r0, [r4, #12]
 8008716:	9b03      	ldr	r3, [sp, #12]
 8008718:	4298      	cmp	r0, r3
 800871a:	bfb8      	it	lt
 800871c:	4618      	movlt	r0, r3
 800871e:	e7a3      	b.n	8008668 <_printf_i+0x130>
 8008720:	2301      	movs	r3, #1
 8008722:	464a      	mov	r2, r9
 8008724:	4639      	mov	r1, r7
 8008726:	4630      	mov	r0, r6
 8008728:	47c0      	blx	r8
 800872a:	3001      	adds	r0, #1
 800872c:	d09a      	beq.n	8008664 <_printf_i+0x12c>
 800872e:	3501      	adds	r5, #1
 8008730:	68e3      	ldr	r3, [r4, #12]
 8008732:	9a03      	ldr	r2, [sp, #12]
 8008734:	1a9b      	subs	r3, r3, r2
 8008736:	42ab      	cmp	r3, r5
 8008738:	dcf2      	bgt.n	8008720 <_printf_i+0x1e8>
 800873a:	e7eb      	b.n	8008714 <_printf_i+0x1dc>
 800873c:	2500      	movs	r5, #0
 800873e:	f104 0919 	add.w	r9, r4, #25
 8008742:	e7f5      	b.n	8008730 <_printf_i+0x1f8>
 8008744:	2b00      	cmp	r3, #0
 8008746:	d1ac      	bne.n	80086a2 <_printf_i+0x16a>
 8008748:	7803      	ldrb	r3, [r0, #0]
 800874a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800874e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008752:	e76c      	b.n	800862e <_printf_i+0xf6>
 8008754:	0801812c 	.word	0x0801812c
 8008758:	0801813d 	.word	0x0801813d

0800875c <_open_r>:
 800875c:	b538      	push	{r3, r4, r5, lr}
 800875e:	4c07      	ldr	r4, [pc, #28]	; (800877c <_open_r+0x20>)
 8008760:	4605      	mov	r5, r0
 8008762:	4608      	mov	r0, r1
 8008764:	4611      	mov	r1, r2
 8008766:	2200      	movs	r2, #0
 8008768:	6022      	str	r2, [r4, #0]
 800876a:	461a      	mov	r2, r3
 800876c:	f7f9 fc85 	bl	800207a <_open>
 8008770:	1c43      	adds	r3, r0, #1
 8008772:	d102      	bne.n	800877a <_open_r+0x1e>
 8008774:	6823      	ldr	r3, [r4, #0]
 8008776:	b103      	cbz	r3, 800877a <_open_r+0x1e>
 8008778:	602b      	str	r3, [r5, #0]
 800877a:	bd38      	pop	{r3, r4, r5, pc}
 800877c:	20000470 	.word	0x20000470

08008780 <_sbrk_r>:
 8008780:	b538      	push	{r3, r4, r5, lr}
 8008782:	4c06      	ldr	r4, [pc, #24]	; (800879c <_sbrk_r+0x1c>)
 8008784:	2300      	movs	r3, #0
 8008786:	4605      	mov	r5, r0
 8008788:	4608      	mov	r0, r1
 800878a:	6023      	str	r3, [r4, #0]
 800878c:	f7f9 fc84 	bl	8002098 <_sbrk>
 8008790:	1c43      	adds	r3, r0, #1
 8008792:	d102      	bne.n	800879a <_sbrk_r+0x1a>
 8008794:	6823      	ldr	r3, [r4, #0]
 8008796:	b103      	cbz	r3, 800879a <_sbrk_r+0x1a>
 8008798:	602b      	str	r3, [r5, #0]
 800879a:	bd38      	pop	{r3, r4, r5, pc}
 800879c:	20000470 	.word	0x20000470

080087a0 <setvbuf>:
 80087a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80087a4:	461d      	mov	r5, r3
 80087a6:	4b51      	ldr	r3, [pc, #324]	; (80088ec <setvbuf+0x14c>)
 80087a8:	681e      	ldr	r6, [r3, #0]
 80087aa:	4604      	mov	r4, r0
 80087ac:	460f      	mov	r7, r1
 80087ae:	4690      	mov	r8, r2
 80087b0:	b126      	cbz	r6, 80087bc <setvbuf+0x1c>
 80087b2:	69b3      	ldr	r3, [r6, #24]
 80087b4:	b913      	cbnz	r3, 80087bc <setvbuf+0x1c>
 80087b6:	4630      	mov	r0, r6
 80087b8:	f7fe fcf0 	bl	800719c <__sinit>
 80087bc:	4b4c      	ldr	r3, [pc, #304]	; (80088f0 <setvbuf+0x150>)
 80087be:	429c      	cmp	r4, r3
 80087c0:	d152      	bne.n	8008868 <setvbuf+0xc8>
 80087c2:	6874      	ldr	r4, [r6, #4]
 80087c4:	f1b8 0f02 	cmp.w	r8, #2
 80087c8:	d006      	beq.n	80087d8 <setvbuf+0x38>
 80087ca:	f1b8 0f01 	cmp.w	r8, #1
 80087ce:	f200 8089 	bhi.w	80088e4 <setvbuf+0x144>
 80087d2:	2d00      	cmp	r5, #0
 80087d4:	f2c0 8086 	blt.w	80088e4 <setvbuf+0x144>
 80087d8:	4621      	mov	r1, r4
 80087da:	4630      	mov	r0, r6
 80087dc:	f7fe fc74 	bl	80070c8 <_fflush_r>
 80087e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087e2:	b141      	cbz	r1, 80087f6 <setvbuf+0x56>
 80087e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087e8:	4299      	cmp	r1, r3
 80087ea:	d002      	beq.n	80087f2 <setvbuf+0x52>
 80087ec:	4630      	mov	r0, r6
 80087ee:	f7ff fab1 	bl	8007d54 <_free_r>
 80087f2:	2300      	movs	r3, #0
 80087f4:	6363      	str	r3, [r4, #52]	; 0x34
 80087f6:	2300      	movs	r3, #0
 80087f8:	61a3      	str	r3, [r4, #24]
 80087fa:	6063      	str	r3, [r4, #4]
 80087fc:	89a3      	ldrh	r3, [r4, #12]
 80087fe:	061b      	lsls	r3, r3, #24
 8008800:	d503      	bpl.n	800880a <setvbuf+0x6a>
 8008802:	6921      	ldr	r1, [r4, #16]
 8008804:	4630      	mov	r0, r6
 8008806:	f7ff faa5 	bl	8007d54 <_free_r>
 800880a:	89a3      	ldrh	r3, [r4, #12]
 800880c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8008810:	f023 0303 	bic.w	r3, r3, #3
 8008814:	f1b8 0f02 	cmp.w	r8, #2
 8008818:	81a3      	strh	r3, [r4, #12]
 800881a:	d05d      	beq.n	80088d8 <setvbuf+0x138>
 800881c:	ab01      	add	r3, sp, #4
 800881e:	466a      	mov	r2, sp
 8008820:	4621      	mov	r1, r4
 8008822:	4630      	mov	r0, r6
 8008824:	f7fe ff7a 	bl	800771c <__swhatbuf_r>
 8008828:	89a3      	ldrh	r3, [r4, #12]
 800882a:	4318      	orrs	r0, r3
 800882c:	81a0      	strh	r0, [r4, #12]
 800882e:	bb2d      	cbnz	r5, 800887c <setvbuf+0xdc>
 8008830:	9d00      	ldr	r5, [sp, #0]
 8008832:	4628      	mov	r0, r5
 8008834:	f7fe ffd6 	bl	80077e4 <malloc>
 8008838:	4607      	mov	r7, r0
 800883a:	2800      	cmp	r0, #0
 800883c:	d14e      	bne.n	80088dc <setvbuf+0x13c>
 800883e:	f8dd 9000 	ldr.w	r9, [sp]
 8008842:	45a9      	cmp	r9, r5
 8008844:	d13c      	bne.n	80088c0 <setvbuf+0x120>
 8008846:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800884a:	89a3      	ldrh	r3, [r4, #12]
 800884c:	f043 0302 	orr.w	r3, r3, #2
 8008850:	81a3      	strh	r3, [r4, #12]
 8008852:	2300      	movs	r3, #0
 8008854:	60a3      	str	r3, [r4, #8]
 8008856:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800885a:	6023      	str	r3, [r4, #0]
 800885c:	6123      	str	r3, [r4, #16]
 800885e:	2301      	movs	r3, #1
 8008860:	6163      	str	r3, [r4, #20]
 8008862:	b003      	add	sp, #12
 8008864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008868:	4b22      	ldr	r3, [pc, #136]	; (80088f4 <setvbuf+0x154>)
 800886a:	429c      	cmp	r4, r3
 800886c:	d101      	bne.n	8008872 <setvbuf+0xd2>
 800886e:	68b4      	ldr	r4, [r6, #8]
 8008870:	e7a8      	b.n	80087c4 <setvbuf+0x24>
 8008872:	4b21      	ldr	r3, [pc, #132]	; (80088f8 <setvbuf+0x158>)
 8008874:	429c      	cmp	r4, r3
 8008876:	bf08      	it	eq
 8008878:	68f4      	ldreq	r4, [r6, #12]
 800887a:	e7a3      	b.n	80087c4 <setvbuf+0x24>
 800887c:	2f00      	cmp	r7, #0
 800887e:	d0d8      	beq.n	8008832 <setvbuf+0x92>
 8008880:	69b3      	ldr	r3, [r6, #24]
 8008882:	b913      	cbnz	r3, 800888a <setvbuf+0xea>
 8008884:	4630      	mov	r0, r6
 8008886:	f7fe fc89 	bl	800719c <__sinit>
 800888a:	f1b8 0f01 	cmp.w	r8, #1
 800888e:	bf08      	it	eq
 8008890:	89a3      	ldrheq	r3, [r4, #12]
 8008892:	6027      	str	r7, [r4, #0]
 8008894:	bf04      	itt	eq
 8008896:	f043 0301 	orreq.w	r3, r3, #1
 800889a:	81a3      	strheq	r3, [r4, #12]
 800889c:	89a3      	ldrh	r3, [r4, #12]
 800889e:	f013 0008 	ands.w	r0, r3, #8
 80088a2:	e9c4 7504 	strd	r7, r5, [r4, #16]
 80088a6:	d01b      	beq.n	80088e0 <setvbuf+0x140>
 80088a8:	f013 0001 	ands.w	r0, r3, #1
 80088ac:	bf18      	it	ne
 80088ae:	426d      	negne	r5, r5
 80088b0:	f04f 0300 	mov.w	r3, #0
 80088b4:	bf1d      	ittte	ne
 80088b6:	60a3      	strne	r3, [r4, #8]
 80088b8:	61a5      	strne	r5, [r4, #24]
 80088ba:	4618      	movne	r0, r3
 80088bc:	60a5      	streq	r5, [r4, #8]
 80088be:	e7d0      	b.n	8008862 <setvbuf+0xc2>
 80088c0:	4648      	mov	r0, r9
 80088c2:	f7fe ff8f 	bl	80077e4 <malloc>
 80088c6:	4607      	mov	r7, r0
 80088c8:	2800      	cmp	r0, #0
 80088ca:	d0bc      	beq.n	8008846 <setvbuf+0xa6>
 80088cc:	89a3      	ldrh	r3, [r4, #12]
 80088ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088d2:	81a3      	strh	r3, [r4, #12]
 80088d4:	464d      	mov	r5, r9
 80088d6:	e7d3      	b.n	8008880 <setvbuf+0xe0>
 80088d8:	2000      	movs	r0, #0
 80088da:	e7b6      	b.n	800884a <setvbuf+0xaa>
 80088dc:	46a9      	mov	r9, r5
 80088de:	e7f5      	b.n	80088cc <setvbuf+0x12c>
 80088e0:	60a0      	str	r0, [r4, #8]
 80088e2:	e7be      	b.n	8008862 <setvbuf+0xc2>
 80088e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088e8:	e7bb      	b.n	8008862 <setvbuf+0xc2>
 80088ea:	bf00      	nop
 80088ec:	20000094 	.word	0x20000094
 80088f0:	08018018 	.word	0x08018018
 80088f4:	08018038 	.word	0x08018038
 80088f8:	08017ff8 	.word	0x08017ff8

080088fc <_raise_r>:
 80088fc:	291f      	cmp	r1, #31
 80088fe:	b538      	push	{r3, r4, r5, lr}
 8008900:	4604      	mov	r4, r0
 8008902:	460d      	mov	r5, r1
 8008904:	d904      	bls.n	8008910 <_raise_r+0x14>
 8008906:	2316      	movs	r3, #22
 8008908:	6003      	str	r3, [r0, #0]
 800890a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800890e:	bd38      	pop	{r3, r4, r5, pc}
 8008910:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008912:	b112      	cbz	r2, 800891a <_raise_r+0x1e>
 8008914:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008918:	b94b      	cbnz	r3, 800892e <_raise_r+0x32>
 800891a:	4620      	mov	r0, r4
 800891c:	f000 f830 	bl	8008980 <_getpid_r>
 8008920:	462a      	mov	r2, r5
 8008922:	4601      	mov	r1, r0
 8008924:	4620      	mov	r0, r4
 8008926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800892a:	f000 b817 	b.w	800895c <_kill_r>
 800892e:	2b01      	cmp	r3, #1
 8008930:	d00a      	beq.n	8008948 <_raise_r+0x4c>
 8008932:	1c59      	adds	r1, r3, #1
 8008934:	d103      	bne.n	800893e <_raise_r+0x42>
 8008936:	2316      	movs	r3, #22
 8008938:	6003      	str	r3, [r0, #0]
 800893a:	2001      	movs	r0, #1
 800893c:	e7e7      	b.n	800890e <_raise_r+0x12>
 800893e:	2400      	movs	r4, #0
 8008940:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008944:	4628      	mov	r0, r5
 8008946:	4798      	blx	r3
 8008948:	2000      	movs	r0, #0
 800894a:	e7e0      	b.n	800890e <_raise_r+0x12>

0800894c <raise>:
 800894c:	4b02      	ldr	r3, [pc, #8]	; (8008958 <raise+0xc>)
 800894e:	4601      	mov	r1, r0
 8008950:	6818      	ldr	r0, [r3, #0]
 8008952:	f7ff bfd3 	b.w	80088fc <_raise_r>
 8008956:	bf00      	nop
 8008958:	20000094 	.word	0x20000094

0800895c <_kill_r>:
 800895c:	b538      	push	{r3, r4, r5, lr}
 800895e:	4c07      	ldr	r4, [pc, #28]	; (800897c <_kill_r+0x20>)
 8008960:	2300      	movs	r3, #0
 8008962:	4605      	mov	r5, r0
 8008964:	4608      	mov	r0, r1
 8008966:	4611      	mov	r1, r2
 8008968:	6023      	str	r3, [r4, #0]
 800896a:	f7f9 faff 	bl	8001f6c <_kill>
 800896e:	1c43      	adds	r3, r0, #1
 8008970:	d102      	bne.n	8008978 <_kill_r+0x1c>
 8008972:	6823      	ldr	r3, [r4, #0]
 8008974:	b103      	cbz	r3, 8008978 <_kill_r+0x1c>
 8008976:	602b      	str	r3, [r5, #0]
 8008978:	bd38      	pop	{r3, r4, r5, pc}
 800897a:	bf00      	nop
 800897c:	20000470 	.word	0x20000470

08008980 <_getpid_r>:
 8008980:	f7f9 baec 	b.w	8001f5c <_getpid>

08008984 <siprintf>:
 8008984:	b40e      	push	{r1, r2, r3}
 8008986:	b500      	push	{lr}
 8008988:	b09c      	sub	sp, #112	; 0x70
 800898a:	ab1d      	add	r3, sp, #116	; 0x74
 800898c:	9002      	str	r0, [sp, #8]
 800898e:	9006      	str	r0, [sp, #24]
 8008990:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008994:	4809      	ldr	r0, [pc, #36]	; (80089bc <siprintf+0x38>)
 8008996:	9107      	str	r1, [sp, #28]
 8008998:	9104      	str	r1, [sp, #16]
 800899a:	4909      	ldr	r1, [pc, #36]	; (80089c0 <siprintf+0x3c>)
 800899c:	f853 2b04 	ldr.w	r2, [r3], #4
 80089a0:	9105      	str	r1, [sp, #20]
 80089a2:	6800      	ldr	r0, [r0, #0]
 80089a4:	9301      	str	r3, [sp, #4]
 80089a6:	a902      	add	r1, sp, #8
 80089a8:	f002 fcca 	bl	800b340 <_svfiprintf_r>
 80089ac:	9b02      	ldr	r3, [sp, #8]
 80089ae:	2200      	movs	r2, #0
 80089b0:	701a      	strb	r2, [r3, #0]
 80089b2:	b01c      	add	sp, #112	; 0x70
 80089b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80089b8:	b003      	add	sp, #12
 80089ba:	4770      	bx	lr
 80089bc:	20000094 	.word	0x20000094
 80089c0:	ffff0208 	.word	0xffff0208

080089c4 <__sread>:
 80089c4:	b510      	push	{r4, lr}
 80089c6:	460c      	mov	r4, r1
 80089c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089cc:	f002 fdb0 	bl	800b530 <_read_r>
 80089d0:	2800      	cmp	r0, #0
 80089d2:	bfab      	itete	ge
 80089d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089d6:	89a3      	ldrhlt	r3, [r4, #12]
 80089d8:	181b      	addge	r3, r3, r0
 80089da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089de:	bfac      	ite	ge
 80089e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80089e2:	81a3      	strhlt	r3, [r4, #12]
 80089e4:	bd10      	pop	{r4, pc}

080089e6 <__seofread>:
 80089e6:	2000      	movs	r0, #0
 80089e8:	4770      	bx	lr

080089ea <__swrite>:
 80089ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ee:	461f      	mov	r7, r3
 80089f0:	898b      	ldrh	r3, [r1, #12]
 80089f2:	05db      	lsls	r3, r3, #23
 80089f4:	4605      	mov	r5, r0
 80089f6:	460c      	mov	r4, r1
 80089f8:	4616      	mov	r6, r2
 80089fa:	d505      	bpl.n	8008a08 <__swrite+0x1e>
 80089fc:	2302      	movs	r3, #2
 80089fe:	2200      	movs	r2, #0
 8008a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a04:	f002 f932 	bl	800ac6c <_lseek_r>
 8008a08:	89a3      	ldrh	r3, [r4, #12]
 8008a0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a12:	81a3      	strh	r3, [r4, #12]
 8008a14:	4632      	mov	r2, r6
 8008a16:	463b      	mov	r3, r7
 8008a18:	4628      	mov	r0, r5
 8008a1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a1e:	f001 b8c5 	b.w	8009bac <_write_r>

08008a22 <__sseek>:
 8008a22:	b510      	push	{r4, lr}
 8008a24:	460c      	mov	r4, r1
 8008a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a2a:	f002 f91f 	bl	800ac6c <_lseek_r>
 8008a2e:	1c43      	adds	r3, r0, #1
 8008a30:	89a3      	ldrh	r3, [r4, #12]
 8008a32:	bf15      	itete	ne
 8008a34:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a3e:	81a3      	strheq	r3, [r4, #12]
 8008a40:	bf18      	it	ne
 8008a42:	81a3      	strhne	r3, [r4, #12]
 8008a44:	bd10      	pop	{r4, pc}

08008a46 <__sclose>:
 8008a46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a4a:	f001 b933 	b.w	8009cb4 <_close_r>

08008a4e <strchr>:
 8008a4e:	b2c9      	uxtb	r1, r1
 8008a50:	4603      	mov	r3, r0
 8008a52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a56:	b11a      	cbz	r2, 8008a60 <strchr+0x12>
 8008a58:	428a      	cmp	r2, r1
 8008a5a:	d1f9      	bne.n	8008a50 <strchr+0x2>
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	4770      	bx	lr
 8008a60:	2900      	cmp	r1, #0
 8008a62:	bf18      	it	ne
 8008a64:	2300      	movne	r3, #0
 8008a66:	e7f9      	b.n	8008a5c <strchr+0xe>

08008a68 <strcpy>:
 8008a68:	4603      	mov	r3, r0
 8008a6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a6e:	f803 2b01 	strb.w	r2, [r3], #1
 8008a72:	2a00      	cmp	r2, #0
 8008a74:	d1f9      	bne.n	8008a6a <strcpy+0x2>
 8008a76:	4770      	bx	lr

08008a78 <iso_year_adjust>:
 8008a78:	6942      	ldr	r2, [r0, #20]
 8008a7a:	2a00      	cmp	r2, #0
 8008a7c:	f240 736c 	movw	r3, #1900	; 0x76c
 8008a80:	bfa8      	it	ge
 8008a82:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8008a86:	441a      	add	r2, r3
 8008a88:	0793      	lsls	r3, r2, #30
 8008a8a:	d105      	bne.n	8008a98 <iso_year_adjust+0x20>
 8008a8c:	2164      	movs	r1, #100	; 0x64
 8008a8e:	fb92 f3f1 	sdiv	r3, r2, r1
 8008a92:	fb01 2313 	mls	r3, r1, r3, r2
 8008a96:	b9d3      	cbnz	r3, 8008ace <iso_year_adjust+0x56>
 8008a98:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008a9c:	fb92 f3f1 	sdiv	r3, r2, r1
 8008aa0:	fb01 2313 	mls	r3, r1, r3, r2
 8008aa4:	fab3 f283 	clz	r2, r3
 8008aa8:	0952      	lsrs	r2, r2, #5
 8008aaa:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
 8008aae:	005b      	lsls	r3, r3, #1
 8008ab0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8008ab4:	4413      	add	r3, r2
 8008ab6:	2b21      	cmp	r3, #33	; 0x21
 8008ab8:	dc11      	bgt.n	8008ade <iso_year_adjust+0x66>
 8008aba:	2b20      	cmp	r3, #32
 8008abc:	da30      	bge.n	8008b20 <iso_year_adjust+0xa8>
 8008abe:	2b0d      	cmp	r3, #13
 8008ac0:	dc07      	bgt.n	8008ad2 <iso_year_adjust+0x5a>
 8008ac2:	2b0a      	cmp	r3, #10
 8008ac4:	da2c      	bge.n	8008b20 <iso_year_adjust+0xa8>
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d92a      	bls.n	8008b20 <iso_year_adjust+0xa8>
 8008aca:	2000      	movs	r0, #0
 8008acc:	4770      	bx	lr
 8008ace:	2201      	movs	r2, #1
 8008ad0:	e7eb      	b.n	8008aaa <iso_year_adjust+0x32>
 8008ad2:	2b10      	cmp	r3, #16
 8008ad4:	dbf9      	blt.n	8008aca <iso_year_adjust+0x52>
 8008ad6:	2b11      	cmp	r3, #17
 8008ad8:	dd22      	ble.n	8008b20 <iso_year_adjust+0xa8>
 8008ada:	3b1c      	subs	r3, #28
 8008adc:	e7f3      	b.n	8008ac6 <iso_year_adjust+0x4e>
 8008ade:	f241 62c6 	movw	r2, #5830	; 0x16c6
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	dc0f      	bgt.n	8008b06 <iso_year_adjust+0x8e>
 8008ae6:	f241 62c2 	movw	r2, #5826	; 0x16c2
 8008aea:	4293      	cmp	r3, r2
 8008aec:	da09      	bge.n	8008b02 <iso_year_adjust+0x8a>
 8008aee:	f241 62a2 	movw	r2, #5794	; 0x16a2
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d005      	beq.n	8008b02 <iso_year_adjust+0x8a>
 8008af6:	dbe8      	blt.n	8008aca <iso_year_adjust+0x52>
 8008af8:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 8008afc:	3b12      	subs	r3, #18
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	d8e3      	bhi.n	8008aca <iso_year_adjust+0x52>
 8008b02:	2001      	movs	r0, #1
 8008b04:	4770      	bx	lr
 8008b06:	f241 62d5 	movw	r2, #5845	; 0x16d5
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d0f9      	beq.n	8008b02 <iso_year_adjust+0x8a>
 8008b0e:	f241 62d7 	movw	r2, #5847	; 0x16d7
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d0f5      	beq.n	8008b02 <iso_year_adjust+0x8a>
 8008b16:	f241 62d3 	movw	r2, #5843	; 0x16d3
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d1d5      	bne.n	8008aca <iso_year_adjust+0x52>
 8008b1e:	e7f0      	b.n	8008b02 <iso_year_adjust+0x8a>
 8008b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b24:	4770      	bx	lr
	...

08008b28 <__strftime>:
 8008b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b2c:	b091      	sub	sp, #68	; 0x44
 8008b2e:	461d      	mov	r5, r3
 8008b30:	2300      	movs	r3, #0
 8008b32:	4607      	mov	r7, r0
 8008b34:	460e      	mov	r6, r1
 8008b36:	9303      	str	r3, [sp, #12]
 8008b38:	461c      	mov	r4, r3
 8008b3a:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 8008b3e:	7813      	ldrb	r3, [r2, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f000 84e3 	beq.w	800950c <__strftime+0x9e4>
 8008b46:	2b25      	cmp	r3, #37	; 0x25
 8008b48:	d11f      	bne.n	8008b8a <__strftime+0x62>
 8008b4a:	f892 a001 	ldrb.w	sl, [r2, #1]
 8008b4e:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 8008b52:	d023      	beq.n	8008b9c <__strftime+0x74>
 8008b54:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8008b58:	d020      	beq.n	8008b9c <__strftime+0x74>
 8008b5a:	f102 0801 	add.w	r8, r2, #1
 8008b5e:	f04f 0a00 	mov.w	sl, #0
 8008b62:	f898 3000 	ldrb.w	r3, [r8]
 8008b66:	3b31      	subs	r3, #49	; 0x31
 8008b68:	2b08      	cmp	r3, #8
 8008b6a:	d81a      	bhi.n	8008ba2 <__strftime+0x7a>
 8008b6c:	4640      	mov	r0, r8
 8008b6e:	220a      	movs	r2, #10
 8008b70:	a908      	add	r1, sp, #32
 8008b72:	f000 fd85 	bl	8009680 <strtoul>
 8008b76:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b7a:	4681      	mov	r9, r0
 8008b7c:	f898 3000 	ldrb.w	r3, [r8]
 8008b80:	2b45      	cmp	r3, #69	; 0x45
 8008b82:	d111      	bne.n	8008ba8 <__strftime+0x80>
 8008b84:	f108 0801 	add.w	r8, r8, #1
 8008b88:	e010      	b.n	8008bac <__strftime+0x84>
 8008b8a:	45a3      	cmp	fp, r4
 8008b8c:	d802      	bhi.n	8008b94 <__strftime+0x6c>
 8008b8e:	2400      	movs	r4, #0
 8008b90:	f000 bcbf 	b.w	8009512 <__strftime+0x9ea>
 8008b94:	553b      	strb	r3, [r7, r4]
 8008b96:	3201      	adds	r2, #1
 8008b98:	3401      	adds	r4, #1
 8008b9a:	e7d0      	b.n	8008b3e <__strftime+0x16>
 8008b9c:	f102 0802 	add.w	r8, r2, #2
 8008ba0:	e7df      	b.n	8008b62 <__strftime+0x3a>
 8008ba2:	f04f 0900 	mov.w	r9, #0
 8008ba6:	e7e9      	b.n	8008b7c <__strftime+0x54>
 8008ba8:	2b4f      	cmp	r3, #79	; 0x4f
 8008baa:	d0eb      	beq.n	8008b84 <__strftime+0x5c>
 8008bac:	f898 1000 	ldrb.w	r1, [r8]
 8008bb0:	f1a1 0325 	sub.w	r3, r1, #37	; 0x25
 8008bb4:	2b55      	cmp	r3, #85	; 0x55
 8008bb6:	d8ea      	bhi.n	8008b8e <__strftime+0x66>
 8008bb8:	a201      	add	r2, pc, #4	; (adr r2, 8008bc0 <__strftime+0x98>)
 8008bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bbe:	bf00      	nop
 8008bc0:	08009503 	.word	0x08009503
 8008bc4:	08008b8f 	.word	0x08008b8f
 8008bc8:	08008b8f 	.word	0x08008b8f
 8008bcc:	08008b8f 	.word	0x08008b8f
 8008bd0:	08008b8f 	.word	0x08008b8f
 8008bd4:	08008b8f 	.word	0x08008b8f
 8008bd8:	08008b8f 	.word	0x08008b8f
 8008bdc:	08008b8f 	.word	0x08008b8f
 8008be0:	08008b8f 	.word	0x08008b8f
 8008be4:	08008b8f 	.word	0x08008b8f
 8008be8:	08008b8f 	.word	0x08008b8f
 8008bec:	08008b8f 	.word	0x08008b8f
 8008bf0:	08008b8f 	.word	0x08008b8f
 8008bf4:	08008b8f 	.word	0x08008b8f
 8008bf8:	08008b8f 	.word	0x08008b8f
 8008bfc:	08008b8f 	.word	0x08008b8f
 8008c00:	08008b8f 	.word	0x08008b8f
 8008c04:	08008b8f 	.word	0x08008b8f
 8008c08:	08008b8f 	.word	0x08008b8f
 8008c0c:	08008b8f 	.word	0x08008b8f
 8008c10:	08008b8f 	.word	0x08008b8f
 8008c14:	08008b8f 	.word	0x08008b8f
 8008c18:	08008b8f 	.word	0x08008b8f
 8008c1c:	08008b8f 	.word	0x08008b8f
 8008c20:	08008b8f 	.word	0x08008b8f
 8008c24:	08008b8f 	.word	0x08008b8f
 8008c28:	08008b8f 	.word	0x08008b8f
 8008c2c:	08008b8f 	.word	0x08008b8f
 8008c30:	08008d55 	.word	0x08008d55
 8008c34:	08008da9 	.word	0x08008da9
 8008c38:	08008e19 	.word	0x08008e19
 8008c3c:	08008eb3 	.word	0x08008eb3
 8008c40:	08008b8f 	.word	0x08008b8f
 8008c44:	08008f01 	.word	0x08008f01
 8008c48:	08008ff1 	.word	0x08008ff1
 8008c4c:	08009109 	.word	0x08009109
 8008c50:	08009117 	.word	0x08009117
 8008c54:	08008b8f 	.word	0x08008b8f
 8008c58:	08008b8f 	.word	0x08008b8f
 8008c5c:	08008b8f 	.word	0x08008b8f
 8008c60:	08009147 	.word	0x08009147
 8008c64:	08008b8f 	.word	0x08008b8f
 8008c68:	08008b8f 	.word	0x08008b8f
 8008c6c:	08009159 	.word	0x08009159
 8008c70:	08008b8f 	.word	0x08008b8f
 8008c74:	080091b7 	.word	0x080091b7
 8008c78:	080092cf 	.word	0x080092cf
 8008c7c:	080092dd 	.word	0x080092dd
 8008c80:	0800932d 	.word	0x0800932d
 8008c84:	0800933d 	.word	0x0800933d
 8008c88:	080093af 	.word	0x080093af
 8008c8c:	08008e11 	.word	0x08008e11
 8008c90:	080093e9 	.word	0x080093e9
 8008c94:	080094af 	.word	0x080094af
 8008c98:	08008b8f 	.word	0x08008b8f
 8008c9c:	08008b8f 	.word	0x08008b8f
 8008ca0:	08008b8f 	.word	0x08008b8f
 8008ca4:	08008b8f 	.word	0x08008b8f
 8008ca8:	08008b8f 	.word	0x08008b8f
 8008cac:	08008b8f 	.word	0x08008b8f
 8008cb0:	08008d19 	.word	0x08008d19
 8008cb4:	08008d81 	.word	0x08008d81
 8008cb8:	08008dd3 	.word	0x08008dd3
 8008cbc:	08008e8f 	.word	0x08008e8f
 8008cc0:	08008e8f 	.word	0x08008e8f
 8008cc4:	08008b8f 	.word	0x08008b8f
 8008cc8:	08008f59 	.word	0x08008f59
 8008ccc:	08008d81 	.word	0x08008d81
 8008cd0:	08008b8f 	.word	0x08008b8f
 8008cd4:	08009139 	.word	0x08009139
 8008cd8:	08009109 	.word	0x08009109
 8008cdc:	08009117 	.word	0x08009117
 8008ce0:	08009141 	.word	0x08009141
 8008ce4:	0800914b 	.word	0x0800914b
 8008ce8:	08008b8f 	.word	0x08008b8f
 8008cec:	08009159 	.word	0x08009159
 8008cf0:	08008b8f 	.word	0x08008b8f
 8008cf4:	08008e01 	.word	0x08008e01
 8008cf8:	080091c9 	.word	0x080091c9
 8008cfc:	080092d3 	.word	0x080092d3
 8008d00:	08009315 	.word	0x08009315
 8008d04:	08008b8f 	.word	0x08008b8f
 8008d08:	080093a3 	.word	0x080093a3
 8008d0c:	08008e09 	.word	0x08008e09
 8008d10:	080093c7 	.word	0x080093c7
 8008d14:	0800943d 	.word	0x0800943d
 8008d18:	69ab      	ldr	r3, [r5, #24]
 8008d1a:	4aa8      	ldr	r2, [pc, #672]	; (8008fbc <__strftime+0x494>)
 8008d1c:	3318      	adds	r3, #24
 8008d1e:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8008d22:	4648      	mov	r0, r9
 8008d24:	f7f7 fa5e 	bl	80001e4 <strlen>
 8008d28:	eba9 0904 	sub.w	r9, r9, r4
 8008d2c:	4420      	add	r0, r4
 8008d2e:	42a0      	cmp	r0, r4
 8008d30:	d108      	bne.n	8008d44 <__strftime+0x21c>
 8008d32:	4604      	mov	r4, r0
 8008d34:	f898 3000 	ldrb.w	r3, [r8]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	f000 83e7 	beq.w	800950c <__strftime+0x9e4>
 8008d3e:	f108 0201 	add.w	r2, r8, #1
 8008d42:	e6fc      	b.n	8008b3e <__strftime+0x16>
 8008d44:	45a3      	cmp	fp, r4
 8008d46:	f67f af22 	bls.w	8008b8e <__strftime+0x66>
 8008d4a:	f819 3004 	ldrb.w	r3, [r9, r4]
 8008d4e:	553b      	strb	r3, [r7, r4]
 8008d50:	3401      	adds	r4, #1
 8008d52:	e7ec      	b.n	8008d2e <__strftime+0x206>
 8008d54:	69aa      	ldr	r2, [r5, #24]
 8008d56:	4b99      	ldr	r3, [pc, #612]	; (8008fbc <__strftime+0x494>)
 8008d58:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8008d5c:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 8008d60:	4648      	mov	r0, r9
 8008d62:	f7f7 fa3f 	bl	80001e4 <strlen>
 8008d66:	eba9 0904 	sub.w	r9, r9, r4
 8008d6a:	4420      	add	r0, r4
 8008d6c:	42a0      	cmp	r0, r4
 8008d6e:	d0e0      	beq.n	8008d32 <__strftime+0x20a>
 8008d70:	45a3      	cmp	fp, r4
 8008d72:	f67f af0c 	bls.w	8008b8e <__strftime+0x66>
 8008d76:	f819 3004 	ldrb.w	r3, [r9, r4]
 8008d7a:	553b      	strb	r3, [r7, r4]
 8008d7c:	3401      	adds	r4, #1
 8008d7e:	e7f5      	b.n	8008d6c <__strftime+0x244>
 8008d80:	692a      	ldr	r2, [r5, #16]
 8008d82:	4b8e      	ldr	r3, [pc, #568]	; (8008fbc <__strftime+0x494>)
 8008d84:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 8008d88:	4648      	mov	r0, r9
 8008d8a:	f7f7 fa2b 	bl	80001e4 <strlen>
 8008d8e:	eba9 0904 	sub.w	r9, r9, r4
 8008d92:	4420      	add	r0, r4
 8008d94:	42a0      	cmp	r0, r4
 8008d96:	d0cc      	beq.n	8008d32 <__strftime+0x20a>
 8008d98:	45a3      	cmp	fp, r4
 8008d9a:	f67f aef8 	bls.w	8008b8e <__strftime+0x66>
 8008d9e:	f819 3004 	ldrb.w	r3, [r9, r4]
 8008da2:	553b      	strb	r3, [r7, r4]
 8008da4:	3401      	adds	r4, #1
 8008da6:	e7f5      	b.n	8008d94 <__strftime+0x26c>
 8008da8:	692b      	ldr	r3, [r5, #16]
 8008daa:	4a84      	ldr	r2, [pc, #528]	; (8008fbc <__strftime+0x494>)
 8008dac:	330c      	adds	r3, #12
 8008dae:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8008db2:	4648      	mov	r0, r9
 8008db4:	f7f7 fa16 	bl	80001e4 <strlen>
 8008db8:	eba9 0904 	sub.w	r9, r9, r4
 8008dbc:	4420      	add	r0, r4
 8008dbe:	42a0      	cmp	r0, r4
 8008dc0:	d0b7      	beq.n	8008d32 <__strftime+0x20a>
 8008dc2:	45a3      	cmp	fp, r4
 8008dc4:	f67f aee3 	bls.w	8008b8e <__strftime+0x66>
 8008dc8:	f819 3004 	ldrb.w	r3, [r9, r4]
 8008dcc:	553b      	strb	r3, [r7, r4]
 8008dce:	3401      	adds	r4, #1
 8008dd0:	e7f5      	b.n	8008dbe <__strftime+0x296>
 8008dd2:	4b7a      	ldr	r3, [pc, #488]	; (8008fbc <__strftime+0x494>)
 8008dd4:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 8008dd8:	4648      	mov	r0, r9
 8008dda:	f7f7 fa03 	bl	80001e4 <strlen>
 8008dde:	f899 3000 	ldrb.w	r3, [r9]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d0a6      	beq.n	8008d34 <__strftime+0x20c>
 8008de6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008de8:	9300      	str	r3, [sp, #0]
 8008dea:	464a      	mov	r2, r9
 8008dec:	462b      	mov	r3, r5
 8008dee:	1b31      	subs	r1, r6, r4
 8008df0:	1938      	adds	r0, r7, r4
 8008df2:	f7ff fe99 	bl	8008b28 <__strftime>
 8008df6:	2800      	cmp	r0, #0
 8008df8:	f77f aec9 	ble.w	8008b8e <__strftime+0x66>
 8008dfc:	4404      	add	r4, r0
 8008dfe:	e799      	b.n	8008d34 <__strftime+0x20c>
 8008e00:	4b6e      	ldr	r3, [pc, #440]	; (8008fbc <__strftime+0x494>)
 8008e02:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 8008e06:	e7e7      	b.n	8008dd8 <__strftime+0x2b0>
 8008e08:	4b6c      	ldr	r3, [pc, #432]	; (8008fbc <__strftime+0x494>)
 8008e0a:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 8008e0e:	e7e3      	b.n	8008dd8 <__strftime+0x2b0>
 8008e10:	4b6a      	ldr	r3, [pc, #424]	; (8008fbc <__strftime+0x494>)
 8008e12:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 8008e16:	e7df      	b.n	8008dd8 <__strftime+0x2b0>
 8008e18:	4b69      	ldr	r3, [pc, #420]	; (8008fc0 <__strftime+0x498>)
 8008e1a:	6969      	ldr	r1, [r5, #20]
 8008e1c:	4299      	cmp	r1, r3
 8008e1e:	bfac      	ite	ge
 8008e20:	2300      	movge	r3, #0
 8008e22:	2301      	movlt	r3, #1
 8008e24:	2900      	cmp	r1, #0
 8008e26:	9304      	str	r3, [sp, #16]
 8008e28:	db10      	blt.n	8008e4c <__strftime+0x324>
 8008e2a:	2064      	movs	r0, #100	; 0x64
 8008e2c:	fb91 f0f0 	sdiv	r0, r1, r0
 8008e30:	3013      	adds	r0, #19
 8008e32:	f1ba 0f00 	cmp.w	sl, #0
 8008e36:	d013      	beq.n	8008e60 <__strftime+0x338>
 8008e38:	2863      	cmp	r0, #99	; 0x63
 8008e3a:	dd26      	ble.n	8008e8a <__strftime+0x362>
 8008e3c:	4a61      	ldr	r2, [pc, #388]	; (8008fc4 <__strftime+0x49c>)
 8008e3e:	4b62      	ldr	r3, [pc, #392]	; (8008fc8 <__strftime+0x4a0>)
 8008e40:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8008e44:	bf18      	it	ne
 8008e46:	4613      	movne	r3, r2
 8008e48:	4a60      	ldr	r2, [pc, #384]	; (8008fcc <__strftime+0x4a4>)
 8008e4a:	e00b      	b.n	8008e64 <__strftime+0x33c>
 8008e4c:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8008e50:	9105      	str	r1, [sp, #20]
 8008e52:	f000 ff2b 	bl	8009cac <abs>
 8008e56:	2364      	movs	r3, #100	; 0x64
 8008e58:	9905      	ldr	r1, [sp, #20]
 8008e5a:	fb90 f0f3 	sdiv	r0, r0, r3
 8008e5e:	e7e8      	b.n	8008e32 <__strftime+0x30a>
 8008e60:	4b58      	ldr	r3, [pc, #352]	; (8008fc4 <__strftime+0x49c>)
 8008e62:	4a5b      	ldr	r2, [pc, #364]	; (8008fd0 <__strftime+0x4a8>)
 8008e64:	9001      	str	r0, [sp, #4]
 8008e66:	9804      	ldr	r0, [sp, #16]
 8008e68:	f8df c154 	ldr.w	ip, [pc, #340]	; 8008fc0 <__strftime+0x498>
 8008e6c:	f1b9 0f02 	cmp.w	r9, #2
 8008e70:	bf2c      	ite	cs
 8008e72:	ebc0 0009 	rsbcs	r0, r0, r9
 8008e76:	f1c0 0002 	rsbcc	r0, r0, #2
 8008e7a:	9000      	str	r0, [sp, #0]
 8008e7c:	4855      	ldr	r0, [pc, #340]	; (8008fd4 <__strftime+0x4ac>)
 8008e7e:	4561      	cmp	r1, ip
 8008e80:	bfb8      	it	lt
 8008e82:	4603      	movlt	r3, r0
 8008e84:	1b31      	subs	r1, r6, r4
 8008e86:	1938      	adds	r0, r7, r4
 8008e88:	e029      	b.n	8008ede <__strftime+0x3b6>
 8008e8a:	4b4e      	ldr	r3, [pc, #312]	; (8008fc4 <__strftime+0x49c>)
 8008e8c:	e7dc      	b.n	8008e48 <__strftime+0x320>
 8008e8e:	4852      	ldr	r0, [pc, #328]	; (8008fd8 <__strftime+0x4b0>)
 8008e90:	4a52      	ldr	r2, [pc, #328]	; (8008fdc <__strftime+0x4b4>)
 8008e92:	68eb      	ldr	r3, [r5, #12]
 8008e94:	2964      	cmp	r1, #100	; 0x64
 8008e96:	bf18      	it	ne
 8008e98:	4602      	movne	r2, r0
 8008e9a:	1b31      	subs	r1, r6, r4
 8008e9c:	1938      	adds	r0, r7, r4
 8008e9e:	f002 fb59 	bl	800b554 <sniprintf>
 8008ea2:	2800      	cmp	r0, #0
 8008ea4:	f6ff ae73 	blt.w	8008b8e <__strftime+0x66>
 8008ea8:	4404      	add	r4, r0
 8008eaa:	42a6      	cmp	r6, r4
 8008eac:	f63f af42 	bhi.w	8008d34 <__strftime+0x20c>
 8008eb0:	e66d      	b.n	8008b8e <__strftime+0x66>
 8008eb2:	6968      	ldr	r0, [r5, #20]
 8008eb4:	692b      	ldr	r3, [r5, #16]
 8008eb6:	68ea      	ldr	r2, [r5, #12]
 8008eb8:	2800      	cmp	r0, #0
 8008eba:	eb07 0904 	add.w	r9, r7, r4
 8008ebe:	eba6 0a04 	sub.w	sl, r6, r4
 8008ec2:	f103 0301 	add.w	r3, r3, #1
 8008ec6:	db0d      	blt.n	8008ee4 <__strftime+0x3bc>
 8008ec8:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8008ecc:	fb90 f1fc 	sdiv	r1, r0, ip
 8008ed0:	fb0c 0011 	mls	r0, ip, r1, r0
 8008ed4:	e9cd 2000 	strd	r2, r0, [sp]
 8008ed8:	4a41      	ldr	r2, [pc, #260]	; (8008fe0 <__strftime+0x4b8>)
 8008eda:	4651      	mov	r1, sl
 8008edc:	4648      	mov	r0, r9
 8008ede:	f002 fb39 	bl	800b554 <sniprintf>
 8008ee2:	e7de      	b.n	8008ea2 <__strftime+0x37a>
 8008ee4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8008ee8:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8008eec:	f000 fede 	bl	8009cac <abs>
 8008ef0:	2164      	movs	r1, #100	; 0x64
 8008ef2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8008ef6:	fb90 fcf1 	sdiv	ip, r0, r1
 8008efa:	fb0c 0011 	mls	r0, ip, r1, r0
 8008efe:	e7e9      	b.n	8008ed4 <__strftime+0x3ac>
 8008f00:	2325      	movs	r3, #37	; 0x25
 8008f02:	f88d 3020 	strb.w	r3, [sp, #32]
 8008f06:	f1ba 0f00 	cmp.w	sl, #0
 8008f0a:	d013      	beq.n	8008f34 <__strftime+0x40c>
 8008f0c:	f1b9 0f06 	cmp.w	r9, #6
 8008f10:	f88d a021 	strb.w	sl, [sp, #33]	; 0x21
 8008f14:	bf38      	it	cc
 8008f16:	f04f 0906 	movcc.w	r9, #6
 8008f1a:	f1b9 0306 	subs.w	r3, r9, #6
 8008f1e:	d10f      	bne.n	8008f40 <__strftime+0x418>
 8008f20:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8008f24:	492f      	ldr	r1, [pc, #188]	; (8008fe4 <__strftime+0x4bc>)
 8008f26:	f7ff fd9f 	bl	8008a68 <strcpy>
 8008f2a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008f2c:	9300      	str	r3, [sp, #0]
 8008f2e:	aa08      	add	r2, sp, #32
 8008f30:	462b      	mov	r3, r5
 8008f32:	e75c      	b.n	8008dee <__strftime+0x2c6>
 8008f34:	232b      	movs	r3, #43	; 0x2b
 8008f36:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8008f3a:	f04f 090a 	mov.w	r9, #10
 8008f3e:	e7ec      	b.n	8008f1a <__strftime+0x3f2>
 8008f40:	4a29      	ldr	r2, [pc, #164]	; (8008fe8 <__strftime+0x4c0>)
 8008f42:	211e      	movs	r1, #30
 8008f44:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8008f48:	f002 fb04 	bl	800b554 <sniprintf>
 8008f4c:	2800      	cmp	r0, #0
 8008f4e:	dde7      	ble.n	8008f20 <__strftime+0x3f8>
 8008f50:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8008f54:	4418      	add	r0, r3
 8008f56:	e7e5      	b.n	8008f24 <__strftime+0x3fc>
 8008f58:	4628      	mov	r0, r5
 8008f5a:	f7ff fd8d 	bl	8008a78 <iso_year_adjust>
 8008f5e:	4681      	mov	r9, r0
 8008f60:	6968      	ldr	r0, [r5, #20]
 8008f62:	2800      	cmp	r0, #0
 8008f64:	db1a      	blt.n	8008f9c <__strftime+0x474>
 8008f66:	2264      	movs	r2, #100	; 0x64
 8008f68:	fb90 f3f2 	sdiv	r3, r0, r2
 8008f6c:	f1b9 0f00 	cmp.w	r9, #0
 8008f70:	fb02 0013 	mls	r0, r2, r3, r0
 8008f74:	da1a      	bge.n	8008fac <__strftime+0x484>
 8008f76:	696a      	ldr	r2, [r5, #20]
 8008f78:	4b1c      	ldr	r3, [pc, #112]	; (8008fec <__strftime+0x4c4>)
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	bfb8      	it	lt
 8008f7e:	f04f 0901 	movlt.w	r9, #1
 8008f82:	2364      	movs	r3, #100	; 0x64
 8008f84:	4481      	add	r9, r0
 8008f86:	fb99 f0f3 	sdiv	r0, r9, r3
 8008f8a:	fb03 9910 	mls	r9, r3, r0, r9
 8008f8e:	4499      	add	r9, r3
 8008f90:	fb99 f2f3 	sdiv	r2, r9, r3
 8008f94:	fb03 9312 	mls	r3, r3, r2, r9
 8008f98:	4a10      	ldr	r2, [pc, #64]	; (8008fdc <__strftime+0x4b4>)
 8008f9a:	e77e      	b.n	8008e9a <__strftime+0x372>
 8008f9c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8008fa0:	f000 fe84 	bl	8009cac <abs>
 8008fa4:	2364      	movs	r3, #100	; 0x64
 8008fa6:	fb90 f2f3 	sdiv	r2, r0, r3
 8008faa:	e7df      	b.n	8008f6c <__strftime+0x444>
 8008fac:	d0e9      	beq.n	8008f82 <__strftime+0x45a>
 8008fae:	696a      	ldr	r2, [r5, #20]
 8008fb0:	4b03      	ldr	r3, [pc, #12]	; (8008fc0 <__strftime+0x498>)
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	bfb8      	it	lt
 8008fb6:	f04f 39ff 	movlt.w	r9, #4294967295	; 0xffffffff
 8008fba:	e7e2      	b.n	8008f82 <__strftime+0x45a>
 8008fbc:	080181a8 	.word	0x080181a8
 8008fc0:	fffff894 	.word	0xfffff894
 8008fc4:	08018529 	.word	0x08018529
 8008fc8:	0801815d 	.word	0x0801815d
 8008fcc:	08018155 	.word	0x08018155
 8008fd0:	0801814e 	.word	0x0801814e
 8008fd4:	08018649 	.word	0x08018649
 8008fd8:	0801815f 	.word	0x0801815f
 8008fdc:	0801816d 	.word	0x0801816d
 8008fe0:	08018163 	.word	0x08018163
 8008fe4:	08018176 	.word	0x08018176
 8008fe8:	08018172 	.word	0x08018172
 8008fec:	fffff895 	.word	0xfffff895
 8008ff0:	696b      	ldr	r3, [r5, #20]
 8008ff2:	9304      	str	r3, [sp, #16]
 8008ff4:	9a04      	ldr	r2, [sp, #16]
 8008ff6:	4bbd      	ldr	r3, [pc, #756]	; (80092ec <__strftime+0x7c4>)
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	bfac      	ite	ge
 8008ffc:	2300      	movge	r3, #0
 8008ffe:	2301      	movlt	r3, #1
 8009000:	4628      	mov	r0, r5
 8009002:	9305      	str	r3, [sp, #20]
 8009004:	f7ff fd38 	bl	8008a78 <iso_year_adjust>
 8009008:	9a04      	ldr	r2, [sp, #16]
 800900a:	2a00      	cmp	r2, #0
 800900c:	4603      	mov	r3, r0
 800900e:	db3a      	blt.n	8009086 <__strftime+0x55e>
 8009010:	2264      	movs	r2, #100	; 0x64
 8009012:	9904      	ldr	r1, [sp, #16]
 8009014:	fb91 f2f2 	sdiv	r2, r1, r2
 8009018:	3213      	adds	r2, #19
 800901a:	6968      	ldr	r0, [r5, #20]
 800901c:	2800      	cmp	r0, #0
 800901e:	db3d      	blt.n	800909c <__strftime+0x574>
 8009020:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8009024:	fb90 fefc 	sdiv	lr, r0, ip
 8009028:	fb0c 001e 	mls	r0, ip, lr, r0
 800902c:	2b00      	cmp	r3, #0
 800902e:	da44      	bge.n	80090ba <__strftime+0x592>
 8009030:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 8009310 <__strftime+0x7e8>
 8009034:	6969      	ldr	r1, [r5, #20]
 8009036:	4561      	cmp	r1, ip
 8009038:	da01      	bge.n	800903e <__strftime+0x516>
 800903a:	2301      	movs	r3, #1
 800903c:	9305      	str	r3, [sp, #20]
 800903e:	4403      	add	r3, r0
 8009040:	1c59      	adds	r1, r3, #1
 8009042:	d146      	bne.n	80090d2 <__strftime+0x5aa>
 8009044:	3a01      	subs	r2, #1
 8009046:	2363      	movs	r3, #99	; 0x63
 8009048:	2064      	movs	r0, #100	; 0x64
 800904a:	fb00 3202 	mla	r2, r0, r2, r3
 800904e:	9b05      	ldr	r3, [sp, #20]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d043      	beq.n	80090dc <__strftime+0x5b4>
 8009054:	232d      	movs	r3, #45	; 0x2d
 8009056:	f88d 3020 	strb.w	r3, [sp, #32]
 800905a:	f1b9 0f00 	cmp.w	r9, #0
 800905e:	d001      	beq.n	8009064 <__strftime+0x53c>
 8009060:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8009064:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8009068:	2125      	movs	r1, #37	; 0x25
 800906a:	7019      	strb	r1, [r3, #0]
 800906c:	f1ba 0f00 	cmp.w	sl, #0
 8009070:	d144      	bne.n	80090fc <__strftime+0x5d4>
 8009072:	1c58      	adds	r0, r3, #1
 8009074:	499e      	ldr	r1, [pc, #632]	; (80092f0 <__strftime+0x7c8>)
 8009076:	9204      	str	r2, [sp, #16]
 8009078:	f7ff fcf6 	bl	8008a68 <strcpy>
 800907c:	9a04      	ldr	r2, [sp, #16]
 800907e:	9200      	str	r2, [sp, #0]
 8009080:	464b      	mov	r3, r9
 8009082:	aa08      	add	r2, sp, #32
 8009084:	e09b      	b.n	80091be <__strftime+0x696>
 8009086:	9b04      	ldr	r3, [sp, #16]
 8009088:	9006      	str	r0, [sp, #24]
 800908a:	f203 706c 	addw	r0, r3, #1900	; 0x76c
 800908e:	f000 fe0d 	bl	8009cac <abs>
 8009092:	2264      	movs	r2, #100	; 0x64
 8009094:	9b06      	ldr	r3, [sp, #24]
 8009096:	fb90 f2f2 	sdiv	r2, r0, r2
 800909a:	e7be      	b.n	800901a <__strftime+0x4f2>
 800909c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80090a0:	e9cd 3206 	strd	r3, r2, [sp, #24]
 80090a4:	f000 fe02 	bl	8009cac <abs>
 80090a8:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80090ac:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80090b0:	fb90 fefc 	sdiv	lr, r0, ip
 80090b4:	fb0e 001c 	mls	r0, lr, ip, r0
 80090b8:	e7b8      	b.n	800902c <__strftime+0x504>
 80090ba:	d0c0      	beq.n	800903e <__strftime+0x516>
 80090bc:	9904      	ldr	r1, [sp, #16]
 80090be:	f8df c22c 	ldr.w	ip, [pc, #556]	; 80092ec <__strftime+0x7c4>
 80090c2:	4561      	cmp	r1, ip
 80090c4:	bfae      	itee	ge
 80090c6:	2100      	movge	r1, #0
 80090c8:	2101      	movlt	r1, #1
 80090ca:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80090ce:	9105      	str	r1, [sp, #20]
 80090d0:	e7b5      	b.n	800903e <__strftime+0x516>
 80090d2:	2b64      	cmp	r3, #100	; 0x64
 80090d4:	bf04      	itt	eq
 80090d6:	3201      	addeq	r2, #1
 80090d8:	2300      	moveq	r3, #0
 80090da:	e7b5      	b.n	8009048 <__strftime+0x520>
 80090dc:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80090e0:	d110      	bne.n	8009104 <__strftime+0x5dc>
 80090e2:	f242 730f 	movw	r3, #9999	; 0x270f
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d90c      	bls.n	8009104 <__strftime+0x5dc>
 80090ea:	f88d a020 	strb.w	sl, [sp, #32]
 80090ee:	f1b9 0f00 	cmp.w	r9, #0
 80090f2:	d1b5      	bne.n	8009060 <__strftime+0x538>
 80090f4:	ab10      	add	r3, sp, #64	; 0x40
 80090f6:	2125      	movs	r1, #37	; 0x25
 80090f8:	f803 1d1f 	strb.w	r1, [r3, #-31]!
 80090fc:	2130      	movs	r1, #48	; 0x30
 80090fe:	1c98      	adds	r0, r3, #2
 8009100:	7059      	strb	r1, [r3, #1]
 8009102:	e7b7      	b.n	8009074 <__strftime+0x54c>
 8009104:	ab08      	add	r3, sp, #32
 8009106:	e7af      	b.n	8009068 <__strftime+0x540>
 8009108:	487a      	ldr	r0, [pc, #488]	; (80092f4 <__strftime+0x7cc>)
 800910a:	4a7b      	ldr	r2, [pc, #492]	; (80092f8 <__strftime+0x7d0>)
 800910c:	68ab      	ldr	r3, [r5, #8]
 800910e:	296b      	cmp	r1, #107	; 0x6b
 8009110:	bf18      	it	ne
 8009112:	4602      	movne	r2, r0
 8009114:	e6c1      	b.n	8008e9a <__strftime+0x372>
 8009116:	68ab      	ldr	r3, [r5, #8]
 8009118:	220c      	movs	r2, #12
 800911a:	b15b      	cbz	r3, 8009134 <__strftime+0x60c>
 800911c:	4293      	cmp	r3, r2
 800911e:	d003      	beq.n	8009128 <__strftime+0x600>
 8009120:	fb93 f0f2 	sdiv	r0, r3, r2
 8009124:	fb02 3310 	mls	r3, r2, r0, r3
 8009128:	4873      	ldr	r0, [pc, #460]	; (80092f8 <__strftime+0x7d0>)
 800912a:	4a72      	ldr	r2, [pc, #456]	; (80092f4 <__strftime+0x7cc>)
 800912c:	2949      	cmp	r1, #73	; 0x49
 800912e:	bf18      	it	ne
 8009130:	4602      	movne	r2, r0
 8009132:	e6b2      	b.n	8008e9a <__strftime+0x372>
 8009134:	4613      	mov	r3, r2
 8009136:	e7f7      	b.n	8009128 <__strftime+0x600>
 8009138:	69eb      	ldr	r3, [r5, #28]
 800913a:	4a70      	ldr	r2, [pc, #448]	; (80092fc <__strftime+0x7d4>)
 800913c:	3301      	adds	r3, #1
 800913e:	e6ac      	b.n	8008e9a <__strftime+0x372>
 8009140:	692b      	ldr	r3, [r5, #16]
 8009142:	3301      	adds	r3, #1
 8009144:	e728      	b.n	8008f98 <__strftime+0x470>
 8009146:	686b      	ldr	r3, [r5, #4]
 8009148:	e726      	b.n	8008f98 <__strftime+0x470>
 800914a:	45a3      	cmp	fp, r4
 800914c:	f67f ad1f 	bls.w	8008b8e <__strftime+0x66>
 8009150:	230a      	movs	r3, #10
 8009152:	553b      	strb	r3, [r7, r4]
 8009154:	3401      	adds	r4, #1
 8009156:	e5ed      	b.n	8008d34 <__strftime+0x20c>
 8009158:	68ab      	ldr	r3, [r5, #8]
 800915a:	2b0b      	cmp	r3, #11
 800915c:	bfcc      	ite	gt
 800915e:	22a4      	movgt	r2, #164	; 0xa4
 8009160:	22a0      	movle	r2, #160	; 0xa0
 8009162:	4b67      	ldr	r3, [pc, #412]	; (8009300 <__strftime+0x7d8>)
 8009164:	4413      	add	r3, r2
 8009166:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800916a:	4648      	mov	r0, r9
 800916c:	f7f7 f83a 	bl	80001e4 <strlen>
 8009170:	eba9 0304 	sub.w	r3, r9, r4
 8009174:	eb04 0a00 	add.w	sl, r4, r0
 8009178:	45a2      	cmp	sl, r4
 800917a:	d101      	bne.n	8009180 <__strftime+0x658>
 800917c:	4654      	mov	r4, sl
 800917e:	e5d9      	b.n	8008d34 <__strftime+0x20c>
 8009180:	45a3      	cmp	fp, r4
 8009182:	f67f ad04 	bls.w	8008b8e <__strftime+0x66>
 8009186:	f898 2000 	ldrb.w	r2, [r8]
 800918a:	f813 9004 	ldrb.w	r9, [r3, r4]
 800918e:	2a50      	cmp	r2, #80	; 0x50
 8009190:	d10d      	bne.n	80091ae <__strftime+0x686>
 8009192:	9304      	str	r3, [sp, #16]
 8009194:	f001 fd4e 	bl	800ac34 <__locale_ctype_ptr>
 8009198:	4448      	add	r0, r9
 800919a:	9b04      	ldr	r3, [sp, #16]
 800919c:	7842      	ldrb	r2, [r0, #1]
 800919e:	f002 0203 	and.w	r2, r2, #3
 80091a2:	2a01      	cmp	r2, #1
 80091a4:	bf08      	it	eq
 80091a6:	f109 0920 	addeq.w	r9, r9, #32
 80091aa:	fa5f f989 	uxtb.w	r9, r9
 80091ae:	f807 9004 	strb.w	r9, [r7, r4]
 80091b2:	3401      	adds	r4, #1
 80091b4:	e7e0      	b.n	8009178 <__strftime+0x650>
 80091b6:	686b      	ldr	r3, [r5, #4]
 80091b8:	9300      	str	r3, [sp, #0]
 80091ba:	4a52      	ldr	r2, [pc, #328]	; (8009304 <__strftime+0x7dc>)
 80091bc:	68ab      	ldr	r3, [r5, #8]
 80091be:	1b31      	subs	r1, r6, r4
 80091c0:	1938      	adds	r0, r7, r4
 80091c2:	f002 f9c7 	bl	800b554 <sniprintf>
 80091c6:	e66c      	b.n	8008ea2 <__strftime+0x37a>
 80091c8:	6a2b      	ldr	r3, [r5, #32]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	db7c      	blt.n	80092c8 <__strftime+0x7a0>
 80091ce:	f000 fb15 	bl	80097fc <__tz_lock>
 80091d2:	9b03      	ldr	r3, [sp, #12]
 80091d4:	b90b      	cbnz	r3, 80091da <__strftime+0x6b2>
 80091d6:	f000 fb13 	bl	8009800 <_tzset_unlocked>
 80091da:	f001 fc61 	bl	800aaa0 <__gettzinfo>
 80091de:	6a2b      	ldr	r3, [r5, #32]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	bfcc      	ite	gt
 80091e4:	2350      	movgt	r3, #80	; 0x50
 80091e6:	2328      	movle	r3, #40	; 0x28
 80091e8:	58c3      	ldr	r3, [r0, r3]
 80091ea:	425b      	negs	r3, r3
 80091ec:	9304      	str	r3, [sp, #16]
 80091ee:	f000 fb06 	bl	80097fe <__tz_unlock>
 80091f2:	2301      	movs	r3, #1
 80091f4:	9303      	str	r3, [sp, #12]
 80091f6:	f8d5 c014 	ldr.w	ip, [r5, #20]
 80091fa:	193b      	adds	r3, r7, r4
 80091fc:	4662      	mov	r2, ip
 80091fe:	f1bc 0045 	subs.w	r0, ip, #69	; 0x45
 8009202:	9305      	str	r3, [sp, #20]
 8009204:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8009208:	f143 31ff 	adc.w	r1, r3, #4294967295	; 0xffffffff
 800920c:	2800      	cmp	r0, #0
 800920e:	f171 0e00 	sbcs.w	lr, r1, #0
 8009212:	da03      	bge.n	800921c <__strftime+0x6f4>
 8009214:	f1bc 0042 	subs.w	r0, ip, #66	; 0x42
 8009218:	f143 31ff 	adc.w	r1, r3, #4294967295	; 0xffffffff
 800921c:	0883      	lsrs	r3, r0, #2
 800921e:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 8009222:	4699      	mov	r9, r3
 8009224:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8009228:	108b      	asrs	r3, r1, #2
 800922a:	2164      	movs	r1, #100	; 0x64
 800922c:	fb90 f1f1 	sdiv	r1, r0, r1
 8009230:	ebb9 0201 	subs.w	r2, r9, r1
 8009234:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 8009238:	f20c 102b 	addw	r0, ip, #299	; 0x12b
 800923c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009240:	fb90 f1f1 	sdiv	r1, r0, r1
 8009244:	eb12 0901 	adds.w	r9, r2, r1
 8009248:	eb43 7ae1 	adc.w	sl, r3, r1, asr #31
 800924c:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 8009250:	f240 116d 	movw	r1, #365	; 0x16d
 8009254:	fb01 fc0c 	mul.w	ip, r1, ip
 8009258:	69e9      	ldr	r1, [r5, #28]
 800925a:	eb19 020c 	adds.w	r2, r9, ip
 800925e:	eb4a 73ec 	adc.w	r3, sl, ip, asr #31
 8009262:	eb12 0901 	adds.w	r9, r2, r1
 8009266:	f04f 0c18 	mov.w	ip, #24
 800926a:	eb43 7ae1 	adc.w	sl, r3, r1, asr #31
 800926e:	fba9 230c 	umull	r2, r3, r9, ip
 8009272:	4619      	mov	r1, r3
 8009274:	fb0c 130a 	mla	r3, ip, sl, r1
 8009278:	4619      	mov	r1, r3
 800927a:	68ab      	ldr	r3, [r5, #8]
 800927c:	4610      	mov	r0, r2
 800927e:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8009282:	18c0      	adds	r0, r0, r3
 8009284:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 8009288:	fba0 230c 	umull	r2, r3, r0, ip
 800928c:	fb0c 3301 	mla	r3, ip, r1, r3
 8009290:	6869      	ldr	r1, [r5, #4]
 8009292:	4691      	mov	r9, r2
 8009294:	eb19 0201 	adds.w	r2, r9, r1
 8009298:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 800929c:	fba2 010c 	umull	r0, r1, r2, ip
 80092a0:	fb0c 1103 	mla	r1, ip, r3, r1
 80092a4:	682b      	ldr	r3, [r5, #0]
 80092a6:	4a18      	ldr	r2, [pc, #96]	; (8009308 <__strftime+0x7e0>)
 80092a8:	eb10 0903 	adds.w	r9, r0, r3
 80092ac:	eb41 7ae3 	adc.w	sl, r1, r3, asr #31
 80092b0:	9b04      	ldr	r3, [sp, #16]
 80092b2:	ebb9 0003 	subs.w	r0, r9, r3
 80092b6:	eb6a 71e3 	sbc.w	r1, sl, r3, asr #31
 80092ba:	e9cd 0100 	strd	r0, r1, [sp]
 80092be:	1b31      	subs	r1, r6, r4
 80092c0:	1938      	adds	r0, r7, r4
 80092c2:	f002 f947 	bl	800b554 <sniprintf>
 80092c6:	e5ec      	b.n	8008ea2 <__strftime+0x37a>
 80092c8:	2300      	movs	r3, #0
 80092ca:	9304      	str	r3, [sp, #16]
 80092cc:	e793      	b.n	80091f6 <__strftime+0x6ce>
 80092ce:	682b      	ldr	r3, [r5, #0]
 80092d0:	e662      	b.n	8008f98 <__strftime+0x470>
 80092d2:	45a3      	cmp	fp, r4
 80092d4:	f67f ac5b 	bls.w	8008b8e <__strftime+0x66>
 80092d8:	2309      	movs	r3, #9
 80092da:	e73a      	b.n	8009152 <__strftime+0x62a>
 80092dc:	682b      	ldr	r3, [r5, #0]
 80092de:	9301      	str	r3, [sp, #4]
 80092e0:	686b      	ldr	r3, [r5, #4]
 80092e2:	9300      	str	r3, [sp, #0]
 80092e4:	4a09      	ldr	r2, [pc, #36]	; (800930c <__strftime+0x7e4>)
 80092e6:	68ab      	ldr	r3, [r5, #8]
 80092e8:	e5cc      	b.n	8008e84 <__strftime+0x35c>
 80092ea:	bf00      	nop
 80092ec:	fffff894 	.word	0xfffff894
 80092f0:	0801817e 	.word	0x0801817e
 80092f4:	0801816d 	.word	0x0801816d
 80092f8:	0801815f 	.word	0x0801815f
 80092fc:	08018182 	.word	0x08018182
 8009300:	080181a8 	.word	0x080181a8
 8009304:	08018191 	.word	0x08018191
 8009308:	08018187 	.word	0x08018187
 800930c:	0801818c 	.word	0x0801818c
 8009310:	fffff895 	.word	0xfffff895
 8009314:	45a3      	cmp	fp, r4
 8009316:	f67f ac3a 	bls.w	8008b8e <__strftime+0x66>
 800931a:	69ab      	ldr	r3, [r5, #24]
 800931c:	193a      	adds	r2, r7, r4
 800931e:	3401      	adds	r4, #1
 8009320:	b913      	cbnz	r3, 8009328 <__strftime+0x800>
 8009322:	2337      	movs	r3, #55	; 0x37
 8009324:	7013      	strb	r3, [r2, #0]
 8009326:	e505      	b.n	8008d34 <__strftime+0x20c>
 8009328:	3330      	adds	r3, #48	; 0x30
 800932a:	e7fb      	b.n	8009324 <__strftime+0x7fc>
 800932c:	69eb      	ldr	r3, [r5, #28]
 800932e:	69aa      	ldr	r2, [r5, #24]
 8009330:	3307      	adds	r3, #7
 8009332:	1a9b      	subs	r3, r3, r2
 8009334:	2207      	movs	r2, #7
 8009336:	fb93 f3f2 	sdiv	r3, r3, r2
 800933a:	e62d      	b.n	8008f98 <__strftime+0x470>
 800933c:	4628      	mov	r0, r5
 800933e:	f7ff fb9b 	bl	8008a78 <iso_year_adjust>
 8009342:	69aa      	ldr	r2, [r5, #24]
 8009344:	b132      	cbz	r2, 8009354 <__strftime+0x82c>
 8009346:	3a01      	subs	r2, #1
 8009348:	2800      	cmp	r0, #0
 800934a:	dc28      	bgt.n	800939e <__strftime+0x876>
 800934c:	69eb      	ldr	r3, [r5, #28]
 800934e:	d103      	bne.n	8009358 <__strftime+0x830>
 8009350:	330a      	adds	r3, #10
 8009352:	e7ee      	b.n	8009332 <__strftime+0x80a>
 8009354:	2206      	movs	r2, #6
 8009356:	e7f7      	b.n	8009348 <__strftime+0x820>
 8009358:	6968      	ldr	r0, [r5, #20]
 800935a:	2800      	cmp	r0, #0
 800935c:	eba2 0303 	sub.w	r3, r2, r3
 8009360:	f240 726b 	movw	r2, #1899	; 0x76b
 8009364:	bfa8      	it	ge
 8009366:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 800936a:	4410      	add	r0, r2
 800936c:	0782      	lsls	r2, r0, #30
 800936e:	d105      	bne.n	800937c <__strftime+0x854>
 8009370:	2264      	movs	r2, #100	; 0x64
 8009372:	fb90 f1f2 	sdiv	r1, r0, r2
 8009376:	fb02 0111 	mls	r1, r2, r1, r0
 800937a:	b971      	cbnz	r1, 800939a <__strftime+0x872>
 800937c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009380:	fb90 f2f1 	sdiv	r2, r0, r1
 8009384:	fb01 0212 	mls	r2, r1, r2, r0
 8009388:	fab2 f282 	clz	r2, r2
 800938c:	0952      	lsrs	r2, r2, #5
 800938e:	1a9a      	subs	r2, r3, r2
 8009390:	2a04      	cmp	r2, #4
 8009392:	bfcc      	ite	gt
 8009394:	2334      	movgt	r3, #52	; 0x34
 8009396:	2335      	movle	r3, #53	; 0x35
 8009398:	e5fe      	b.n	8008f98 <__strftime+0x470>
 800939a:	2201      	movs	r2, #1
 800939c:	e7f7      	b.n	800938e <__strftime+0x866>
 800939e:	2301      	movs	r3, #1
 80093a0:	e5fa      	b.n	8008f98 <__strftime+0x470>
 80093a2:	45a3      	cmp	fp, r4
 80093a4:	f67f abf3 	bls.w	8008b8e <__strftime+0x66>
 80093a8:	69ab      	ldr	r3, [r5, #24]
 80093aa:	3330      	adds	r3, #48	; 0x30
 80093ac:	e6d1      	b.n	8009152 <__strftime+0x62a>
 80093ae:	69ab      	ldr	r3, [r5, #24]
 80093b0:	b13b      	cbz	r3, 80093c2 <__strftime+0x89a>
 80093b2:	3b01      	subs	r3, #1
 80093b4:	69ea      	ldr	r2, [r5, #28]
 80093b6:	3207      	adds	r2, #7
 80093b8:	1ad2      	subs	r2, r2, r3
 80093ba:	2307      	movs	r3, #7
 80093bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80093c0:	e5ea      	b.n	8008f98 <__strftime+0x470>
 80093c2:	2306      	movs	r3, #6
 80093c4:	e7f6      	b.n	80093b4 <__strftime+0x88c>
 80093c6:	6968      	ldr	r0, [r5, #20]
 80093c8:	2800      	cmp	r0, #0
 80093ca:	db05      	blt.n	80093d8 <__strftime+0x8b0>
 80093cc:	2264      	movs	r2, #100	; 0x64
 80093ce:	fb90 f3f2 	sdiv	r3, r0, r2
 80093d2:	fb02 0313 	mls	r3, r2, r3, r0
 80093d6:	e5df      	b.n	8008f98 <__strftime+0x470>
 80093d8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80093dc:	f000 fc66 	bl	8009cac <abs>
 80093e0:	2364      	movs	r3, #100	; 0x64
 80093e2:	fb90 f2f3 	sdiv	r2, r0, r3
 80093e6:	e7f4      	b.n	80093d2 <__strftime+0x8aa>
 80093e8:	696b      	ldr	r3, [r5, #20]
 80093ea:	4a52      	ldr	r2, [pc, #328]	; (8009534 <__strftime+0xa0c>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	da18      	bge.n	8009422 <__strftime+0x8fa>
 80093f0:	212d      	movs	r1, #45	; 0x2d
 80093f2:	f88d 1020 	strb.w	r1, [sp, #32]
 80093f6:	1ad3      	subs	r3, r2, r3
 80093f8:	f1b9 0f00 	cmp.w	r9, #0
 80093fc:	d001      	beq.n	8009402 <__strftime+0x8da>
 80093fe:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8009402:	f10d 0221 	add.w	r2, sp, #33	; 0x21
 8009406:	2125      	movs	r1, #37	; 0x25
 8009408:	7011      	strb	r1, [r2, #0]
 800940a:	f1ba 0f00 	cmp.w	sl, #0
 800940e:	f040 8088 	bne.w	8009522 <__strftime+0x9fa>
 8009412:	1c50      	adds	r0, r2, #1
 8009414:	4948      	ldr	r1, [pc, #288]	; (8009538 <__strftime+0xa10>)
 8009416:	9304      	str	r3, [sp, #16]
 8009418:	f7ff fb26 	bl	8008a68 <strcpy>
 800941c:	9b04      	ldr	r3, [sp, #16]
 800941e:	9300      	str	r3, [sp, #0]
 8009420:	e62e      	b.n	8009080 <__strftime+0x558>
 8009422:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8009426:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800942a:	f040 8081 	bne.w	8009530 <__strftime+0xa08>
 800942e:	f242 720f 	movw	r2, #9999	; 0x270f
 8009432:	4293      	cmp	r3, r2
 8009434:	d979      	bls.n	800952a <__strftime+0xa02>
 8009436:	f88d a020 	strb.w	sl, [sp, #32]
 800943a:	e7dd      	b.n	80093f8 <__strftime+0x8d0>
 800943c:	6a2b      	ldr	r3, [r5, #32]
 800943e:	2b00      	cmp	r3, #0
 8009440:	f6ff ac78 	blt.w	8008d34 <__strftime+0x20c>
 8009444:	f000 f9da 	bl	80097fc <__tz_lock>
 8009448:	9b03      	ldr	r3, [sp, #12]
 800944a:	b90b      	cbnz	r3, 8009450 <__strftime+0x928>
 800944c:	f000 f9d8 	bl	8009800 <_tzset_unlocked>
 8009450:	f001 fb26 	bl	800aaa0 <__gettzinfo>
 8009454:	6a2b      	ldr	r3, [r5, #32]
 8009456:	2b00      	cmp	r3, #0
 8009458:	bfcc      	ite	gt
 800945a:	2350      	movgt	r3, #80	; 0x50
 800945c:	2328      	movle	r3, #40	; 0x28
 800945e:	eb07 0a04 	add.w	sl, r7, r4
 8009462:	58c3      	ldr	r3, [r0, r3]
 8009464:	f1c3 0900 	rsb	r9, r3, #0
 8009468:	f000 f9c9 	bl	80097fe <__tz_unlock>
 800946c:	233c      	movs	r3, #60	; 0x3c
 800946e:	1b31      	subs	r1, r6, r4
 8009470:	fb99 f0f3 	sdiv	r0, r9, r3
 8009474:	9104      	str	r1, [sp, #16]
 8009476:	9303      	str	r3, [sp, #12]
 8009478:	f001 fbd4 	bl	800ac24 <labs>
 800947c:	9b03      	ldr	r3, [sp, #12]
 800947e:	fb90 f2f3 	sdiv	r2, r0, r3
 8009482:	fb02 0013 	mls	r0, r2, r3, r0
 8009486:	9000      	str	r0, [sp, #0]
 8009488:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800948c:	4a2b      	ldr	r2, [pc, #172]	; (800953c <__strftime+0xa14>)
 800948e:	fb99 f3f3 	sdiv	r3, r9, r3
 8009492:	9904      	ldr	r1, [sp, #16]
 8009494:	4650      	mov	r0, sl
 8009496:	f002 f85d 	bl	800b554 <sniprintf>
 800949a:	2800      	cmp	r0, #0
 800949c:	f6ff ab77 	blt.w	8008b8e <__strftime+0x66>
 80094a0:	4404      	add	r4, r0
 80094a2:	42a6      	cmp	r6, r4
 80094a4:	f67f ab73 	bls.w	8008b8e <__strftime+0x66>
 80094a8:	2301      	movs	r3, #1
 80094aa:	9303      	str	r3, [sp, #12]
 80094ac:	e442      	b.n	8008d34 <__strftime+0x20c>
 80094ae:	6a2b      	ldr	r3, [r5, #32]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f6ff ac3f 	blt.w	8008d34 <__strftime+0x20c>
 80094b6:	f000 f9a1 	bl	80097fc <__tz_lock>
 80094ba:	9b03      	ldr	r3, [sp, #12]
 80094bc:	b90b      	cbnz	r3, 80094c2 <__strftime+0x99a>
 80094be:	f000 f99f 	bl	8009800 <_tzset_unlocked>
 80094c2:	6a2b      	ldr	r3, [r5, #32]
 80094c4:	4a1e      	ldr	r2, [pc, #120]	; (8009540 <__strftime+0xa18>)
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	bfd4      	ite	le
 80094ca:	2300      	movle	r3, #0
 80094cc:	2301      	movgt	r3, #1
 80094ce:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 80094d2:	4648      	mov	r0, r9
 80094d4:	f7f6 fe86 	bl	80001e4 <strlen>
 80094d8:	eba9 0904 	sub.w	r9, r9, r4
 80094dc:	eb04 0a00 	add.w	sl, r4, r0
 80094e0:	45a2      	cmp	sl, r4
 80094e2:	d103      	bne.n	80094ec <__strftime+0x9c4>
 80094e4:	f000 f98b 	bl	80097fe <__tz_unlock>
 80094e8:	4654      	mov	r4, sl
 80094ea:	e7dd      	b.n	80094a8 <__strftime+0x980>
 80094ec:	45a3      	cmp	fp, r4
 80094ee:	d904      	bls.n	80094fa <__strftime+0x9d2>
 80094f0:	f819 3004 	ldrb.w	r3, [r9, r4]
 80094f4:	553b      	strb	r3, [r7, r4]
 80094f6:	3401      	adds	r4, #1
 80094f8:	e7f2      	b.n	80094e0 <__strftime+0x9b8>
 80094fa:	f000 f980 	bl	80097fe <__tz_unlock>
 80094fe:	f7ff bb46 	b.w	8008b8e <__strftime+0x66>
 8009502:	45a3      	cmp	fp, r4
 8009504:	f67f ab43 	bls.w	8008b8e <__strftime+0x66>
 8009508:	2325      	movs	r3, #37	; 0x25
 800950a:	e622      	b.n	8009152 <__strftime+0x62a>
 800950c:	b10e      	cbz	r6, 8009512 <__strftime+0x9ea>
 800950e:	2300      	movs	r3, #0
 8009510:	553b      	strb	r3, [r7, r4]
 8009512:	4620      	mov	r0, r4
 8009514:	b011      	add	sp, #68	; 0x44
 8009516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800951a:	2225      	movs	r2, #37	; 0x25
 800951c:	f88d 2020 	strb.w	r2, [sp, #32]
 8009520:	aa08      	add	r2, sp, #32
 8009522:	2130      	movs	r1, #48	; 0x30
 8009524:	1c90      	adds	r0, r2, #2
 8009526:	7051      	strb	r1, [r2, #1]
 8009528:	e774      	b.n	8009414 <__strftime+0x8ec>
 800952a:	f1b9 0f00 	cmp.w	r9, #0
 800952e:	d1f4      	bne.n	800951a <__strftime+0x9f2>
 8009530:	aa08      	add	r2, sp, #32
 8009532:	e768      	b.n	8009406 <__strftime+0x8de>
 8009534:	fffff894 	.word	0xfffff894
 8009538:	0801817e 	.word	0x0801817e
 800953c:	0801819b 	.word	0x0801819b
 8009540:	200000f8 	.word	0x200000f8

08009544 <strftime>:
 8009544:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009546:	4c06      	ldr	r4, [pc, #24]	; (8009560 <strftime+0x1c>)
 8009548:	4d06      	ldr	r5, [pc, #24]	; (8009564 <strftime+0x20>)
 800954a:	6824      	ldr	r4, [r4, #0]
 800954c:	6a24      	ldr	r4, [r4, #32]
 800954e:	2c00      	cmp	r4, #0
 8009550:	bf08      	it	eq
 8009552:	462c      	moveq	r4, r5
 8009554:	9400      	str	r4, [sp, #0]
 8009556:	f7ff fae7 	bl	8008b28 <__strftime>
 800955a:	b003      	add	sp, #12
 800955c:	bd30      	pop	{r4, r5, pc}
 800955e:	bf00      	nop
 8009560:	20000094 	.word	0x20000094
 8009564:	20000158 	.word	0x20000158

08009568 <_strtoul_l.isra.0>:
 8009568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800956c:	4680      	mov	r8, r0
 800956e:	4689      	mov	r9, r1
 8009570:	4692      	mov	sl, r2
 8009572:	461e      	mov	r6, r3
 8009574:	460f      	mov	r7, r1
 8009576:	463d      	mov	r5, r7
 8009578:	9808      	ldr	r0, [sp, #32]
 800957a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800957e:	f001 fb55 	bl	800ac2c <__locale_ctype_ptr_l>
 8009582:	4420      	add	r0, r4
 8009584:	7843      	ldrb	r3, [r0, #1]
 8009586:	f013 0308 	ands.w	r3, r3, #8
 800958a:	d130      	bne.n	80095ee <_strtoul_l.isra.0+0x86>
 800958c:	2c2d      	cmp	r4, #45	; 0x2d
 800958e:	d130      	bne.n	80095f2 <_strtoul_l.isra.0+0x8a>
 8009590:	787c      	ldrb	r4, [r7, #1]
 8009592:	1cbd      	adds	r5, r7, #2
 8009594:	2101      	movs	r1, #1
 8009596:	2e00      	cmp	r6, #0
 8009598:	d05c      	beq.n	8009654 <_strtoul_l.isra.0+0xec>
 800959a:	2e10      	cmp	r6, #16
 800959c:	d109      	bne.n	80095b2 <_strtoul_l.isra.0+0x4a>
 800959e:	2c30      	cmp	r4, #48	; 0x30
 80095a0:	d107      	bne.n	80095b2 <_strtoul_l.isra.0+0x4a>
 80095a2:	782b      	ldrb	r3, [r5, #0]
 80095a4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80095a8:	2b58      	cmp	r3, #88	; 0x58
 80095aa:	d14e      	bne.n	800964a <_strtoul_l.isra.0+0xe2>
 80095ac:	786c      	ldrb	r4, [r5, #1]
 80095ae:	2610      	movs	r6, #16
 80095b0:	3502      	adds	r5, #2
 80095b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095b6:	2300      	movs	r3, #0
 80095b8:	fbb2 f2f6 	udiv	r2, r2, r6
 80095bc:	fb06 fc02 	mul.w	ip, r6, r2
 80095c0:	ea6f 0c0c 	mvn.w	ip, ip
 80095c4:	4618      	mov	r0, r3
 80095c6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80095ca:	2f09      	cmp	r7, #9
 80095cc:	d817      	bhi.n	80095fe <_strtoul_l.isra.0+0x96>
 80095ce:	463c      	mov	r4, r7
 80095d0:	42a6      	cmp	r6, r4
 80095d2:	dd23      	ble.n	800961c <_strtoul_l.isra.0+0xb4>
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	db1e      	blt.n	8009616 <_strtoul_l.isra.0+0xae>
 80095d8:	4282      	cmp	r2, r0
 80095da:	d31c      	bcc.n	8009616 <_strtoul_l.isra.0+0xae>
 80095dc:	d101      	bne.n	80095e2 <_strtoul_l.isra.0+0x7a>
 80095de:	45a4      	cmp	ip, r4
 80095e0:	db19      	blt.n	8009616 <_strtoul_l.isra.0+0xae>
 80095e2:	fb00 4006 	mla	r0, r0, r6, r4
 80095e6:	2301      	movs	r3, #1
 80095e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095ec:	e7eb      	b.n	80095c6 <_strtoul_l.isra.0+0x5e>
 80095ee:	462f      	mov	r7, r5
 80095f0:	e7c1      	b.n	8009576 <_strtoul_l.isra.0+0xe>
 80095f2:	2c2b      	cmp	r4, #43	; 0x2b
 80095f4:	bf04      	itt	eq
 80095f6:	1cbd      	addeq	r5, r7, #2
 80095f8:	787c      	ldrbeq	r4, [r7, #1]
 80095fa:	4619      	mov	r1, r3
 80095fc:	e7cb      	b.n	8009596 <_strtoul_l.isra.0+0x2e>
 80095fe:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009602:	2f19      	cmp	r7, #25
 8009604:	d801      	bhi.n	800960a <_strtoul_l.isra.0+0xa2>
 8009606:	3c37      	subs	r4, #55	; 0x37
 8009608:	e7e2      	b.n	80095d0 <_strtoul_l.isra.0+0x68>
 800960a:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800960e:	2f19      	cmp	r7, #25
 8009610:	d804      	bhi.n	800961c <_strtoul_l.isra.0+0xb4>
 8009612:	3c57      	subs	r4, #87	; 0x57
 8009614:	e7dc      	b.n	80095d0 <_strtoul_l.isra.0+0x68>
 8009616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800961a:	e7e5      	b.n	80095e8 <_strtoul_l.isra.0+0x80>
 800961c:	2b00      	cmp	r3, #0
 800961e:	da09      	bge.n	8009634 <_strtoul_l.isra.0+0xcc>
 8009620:	2322      	movs	r3, #34	; 0x22
 8009622:	f8c8 3000 	str.w	r3, [r8]
 8009626:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800962a:	f1ba 0f00 	cmp.w	sl, #0
 800962e:	d107      	bne.n	8009640 <_strtoul_l.isra.0+0xd8>
 8009630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009634:	b101      	cbz	r1, 8009638 <_strtoul_l.isra.0+0xd0>
 8009636:	4240      	negs	r0, r0
 8009638:	f1ba 0f00 	cmp.w	sl, #0
 800963c:	d0f8      	beq.n	8009630 <_strtoul_l.isra.0+0xc8>
 800963e:	b10b      	cbz	r3, 8009644 <_strtoul_l.isra.0+0xdc>
 8009640:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8009644:	f8ca 9000 	str.w	r9, [sl]
 8009648:	e7f2      	b.n	8009630 <_strtoul_l.isra.0+0xc8>
 800964a:	2430      	movs	r4, #48	; 0x30
 800964c:	2e00      	cmp	r6, #0
 800964e:	d1b0      	bne.n	80095b2 <_strtoul_l.isra.0+0x4a>
 8009650:	2608      	movs	r6, #8
 8009652:	e7ae      	b.n	80095b2 <_strtoul_l.isra.0+0x4a>
 8009654:	2c30      	cmp	r4, #48	; 0x30
 8009656:	d0a4      	beq.n	80095a2 <_strtoul_l.isra.0+0x3a>
 8009658:	260a      	movs	r6, #10
 800965a:	e7aa      	b.n	80095b2 <_strtoul_l.isra.0+0x4a>

0800965c <_strtoul_r>:
 800965c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800965e:	4c06      	ldr	r4, [pc, #24]	; (8009678 <_strtoul_r+0x1c>)
 8009660:	4d06      	ldr	r5, [pc, #24]	; (800967c <_strtoul_r+0x20>)
 8009662:	6824      	ldr	r4, [r4, #0]
 8009664:	6a24      	ldr	r4, [r4, #32]
 8009666:	2c00      	cmp	r4, #0
 8009668:	bf08      	it	eq
 800966a:	462c      	moveq	r4, r5
 800966c:	9400      	str	r4, [sp, #0]
 800966e:	f7ff ff7b 	bl	8009568 <_strtoul_l.isra.0>
 8009672:	b003      	add	sp, #12
 8009674:	bd30      	pop	{r4, r5, pc}
 8009676:	bf00      	nop
 8009678:	20000094 	.word	0x20000094
 800967c:	20000158 	.word	0x20000158

08009680 <strtoul>:
 8009680:	4b08      	ldr	r3, [pc, #32]	; (80096a4 <strtoul+0x24>)
 8009682:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009684:	681c      	ldr	r4, [r3, #0]
 8009686:	4d08      	ldr	r5, [pc, #32]	; (80096a8 <strtoul+0x28>)
 8009688:	6a23      	ldr	r3, [r4, #32]
 800968a:	2b00      	cmp	r3, #0
 800968c:	bf08      	it	eq
 800968e:	462b      	moveq	r3, r5
 8009690:	9300      	str	r3, [sp, #0]
 8009692:	4613      	mov	r3, r2
 8009694:	460a      	mov	r2, r1
 8009696:	4601      	mov	r1, r0
 8009698:	4620      	mov	r0, r4
 800969a:	f7ff ff65 	bl	8009568 <_strtoul_l.isra.0>
 800969e:	b003      	add	sp, #12
 80096a0:	bd30      	pop	{r4, r5, pc}
 80096a2:	bf00      	nop
 80096a4:	20000094 	.word	0x20000094
 80096a8:	20000158 	.word	0x20000158

080096ac <__tzcalc_limits>:
 80096ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b0:	4680      	mov	r8, r0
 80096b2:	f001 f9f5 	bl	800aaa0 <__gettzinfo>
 80096b6:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80096ba:	4598      	cmp	r8, r3
 80096bc:	f340 8098 	ble.w	80097f0 <__tzcalc_limits+0x144>
 80096c0:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80096c4:	4443      	add	r3, r8
 80096c6:	109b      	asrs	r3, r3, #2
 80096c8:	f240 126d 	movw	r2, #365	; 0x16d
 80096cc:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 80096d0:	fb02 3505 	mla	r5, r2, r5, r3
 80096d4:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80096d8:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 80096dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80096e0:	441d      	add	r5, r3
 80096e2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80096e6:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80096ea:	fb98 f7f3 	sdiv	r7, r8, r3
 80096ee:	fb03 8717 	mls	r7, r3, r7, r8
 80096f2:	4442      	add	r2, r8
 80096f4:	fab7 fc87 	clz	ip, r7
 80096f8:	fb92 f2f3 	sdiv	r2, r2, r3
 80096fc:	f008 0303 	and.w	r3, r8, #3
 8009700:	4415      	add	r5, r2
 8009702:	2264      	movs	r2, #100	; 0x64
 8009704:	f8c0 8004 	str.w	r8, [r0, #4]
 8009708:	fb98 f6f2 	sdiv	r6, r8, r2
 800970c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8009710:	fb02 8616 	mls	r6, r2, r6, r8
 8009714:	4604      	mov	r4, r0
 8009716:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800971a:	9300      	str	r3, [sp, #0]
 800971c:	f04f 0e07 	mov.w	lr, #7
 8009720:	7a22      	ldrb	r2, [r4, #8]
 8009722:	6963      	ldr	r3, [r4, #20]
 8009724:	2a4a      	cmp	r2, #74	; 0x4a
 8009726:	d128      	bne.n	800977a <__tzcalc_limits+0xce>
 8009728:	9900      	ldr	r1, [sp, #0]
 800972a:	18ea      	adds	r2, r5, r3
 800972c:	b901      	cbnz	r1, 8009730 <__tzcalc_limits+0x84>
 800972e:	b906      	cbnz	r6, 8009732 <__tzcalc_limits+0x86>
 8009730:	bb0f      	cbnz	r7, 8009776 <__tzcalc_limits+0xca>
 8009732:	2b3b      	cmp	r3, #59	; 0x3b
 8009734:	bfd4      	ite	le
 8009736:	2300      	movle	r3, #0
 8009738:	2301      	movgt	r3, #1
 800973a:	4413      	add	r3, r2
 800973c:	1e5a      	subs	r2, r3, #1
 800973e:	69a3      	ldr	r3, [r4, #24]
 8009740:	492c      	ldr	r1, [pc, #176]	; (80097f4 <__tzcalc_limits+0x148>)
 8009742:	fb01 3202 	mla	r2, r1, r2, r3
 8009746:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009748:	4413      	add	r3, r2
 800974a:	461a      	mov	r2, r3
 800974c:	17db      	asrs	r3, r3, #31
 800974e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8009752:	3428      	adds	r4, #40	; 0x28
 8009754:	45a3      	cmp	fp, r4
 8009756:	d1e3      	bne.n	8009720 <__tzcalc_limits+0x74>
 8009758:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 800975c:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8009760:	4294      	cmp	r4, r2
 8009762:	eb75 0303 	sbcs.w	r3, r5, r3
 8009766:	bfb4      	ite	lt
 8009768:	2301      	movlt	r3, #1
 800976a:	2300      	movge	r3, #0
 800976c:	6003      	str	r3, [r0, #0]
 800976e:	2001      	movs	r0, #1
 8009770:	b003      	add	sp, #12
 8009772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009776:	2300      	movs	r3, #0
 8009778:	e7df      	b.n	800973a <__tzcalc_limits+0x8e>
 800977a:	2a44      	cmp	r2, #68	; 0x44
 800977c:	d101      	bne.n	8009782 <__tzcalc_limits+0xd6>
 800977e:	18ea      	adds	r2, r5, r3
 8009780:	e7dd      	b.n	800973e <__tzcalc_limits+0x92>
 8009782:	9a00      	ldr	r2, [sp, #0]
 8009784:	bb72      	cbnz	r2, 80097e4 <__tzcalc_limits+0x138>
 8009786:	2e00      	cmp	r6, #0
 8009788:	bf0c      	ite	eq
 800978a:	46e1      	moveq	r9, ip
 800978c:	f04f 0901 	movne.w	r9, #1
 8009790:	2230      	movs	r2, #48	; 0x30
 8009792:	fb02 f909 	mul.w	r9, r2, r9
 8009796:	68e2      	ldr	r2, [r4, #12]
 8009798:	9201      	str	r2, [sp, #4]
 800979a:	f04f 0800 	mov.w	r8, #0
 800979e:	462a      	mov	r2, r5
 80097a0:	f108 0801 	add.w	r8, r8, #1
 80097a4:	4914      	ldr	r1, [pc, #80]	; (80097f8 <__tzcalc_limits+0x14c>)
 80097a6:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 80097aa:	448a      	add	sl, r1
 80097ac:	9901      	ldr	r1, [sp, #4]
 80097ae:	f85a ac04 	ldr.w	sl, [sl, #-4]
 80097b2:	4541      	cmp	r1, r8
 80097b4:	dc18      	bgt.n	80097e8 <__tzcalc_limits+0x13c>
 80097b6:	f102 0804 	add.w	r8, r2, #4
 80097ba:	fb98 f9fe 	sdiv	r9, r8, lr
 80097be:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80097c2:	eba8 0909 	sub.w	r9, r8, r9
 80097c6:	ebb3 0909 	subs.w	r9, r3, r9
 80097ca:	6923      	ldr	r3, [r4, #16]
 80097cc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80097d0:	bf48      	it	mi
 80097d2:	f109 0907 	addmi.w	r9, r9, #7
 80097d6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80097da:	444b      	add	r3, r9
 80097dc:	4553      	cmp	r3, sl
 80097de:	da05      	bge.n	80097ec <__tzcalc_limits+0x140>
 80097e0:	441a      	add	r2, r3
 80097e2:	e7ac      	b.n	800973e <__tzcalc_limits+0x92>
 80097e4:	46e1      	mov	r9, ip
 80097e6:	e7d3      	b.n	8009790 <__tzcalc_limits+0xe4>
 80097e8:	4452      	add	r2, sl
 80097ea:	e7d9      	b.n	80097a0 <__tzcalc_limits+0xf4>
 80097ec:	3b07      	subs	r3, #7
 80097ee:	e7f5      	b.n	80097dc <__tzcalc_limits+0x130>
 80097f0:	2000      	movs	r0, #0
 80097f2:	e7bd      	b.n	8009770 <__tzcalc_limits+0xc4>
 80097f4:	00015180 	.word	0x00015180
 80097f8:	080180bc 	.word	0x080180bc

080097fc <__tz_lock>:
 80097fc:	4770      	bx	lr

080097fe <__tz_unlock>:
 80097fe:	4770      	bx	lr

08009800 <_tzset_unlocked>:
 8009800:	4b01      	ldr	r3, [pc, #4]	; (8009808 <_tzset_unlocked+0x8>)
 8009802:	6818      	ldr	r0, [r3, #0]
 8009804:	f000 b802 	b.w	800980c <_tzset_unlocked_r>
 8009808:	20000094 	.word	0x20000094

0800980c <_tzset_unlocked_r>:
 800980c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009810:	b08d      	sub	sp, #52	; 0x34
 8009812:	4607      	mov	r7, r0
 8009814:	f001 f944 	bl	800aaa0 <__gettzinfo>
 8009818:	49af      	ldr	r1, [pc, #700]	; (8009ad8 <_tzset_unlocked_r+0x2cc>)
 800981a:	4eb0      	ldr	r6, [pc, #704]	; (8009adc <_tzset_unlocked_r+0x2d0>)
 800981c:	4605      	mov	r5, r0
 800981e:	4638      	mov	r0, r7
 8009820:	f001 f936 	bl	800aa90 <_getenv_r>
 8009824:	4604      	mov	r4, r0
 8009826:	b970      	cbnz	r0, 8009846 <_tzset_unlocked_r+0x3a>
 8009828:	4bad      	ldr	r3, [pc, #692]	; (8009ae0 <_tzset_unlocked_r+0x2d4>)
 800982a:	4aae      	ldr	r2, [pc, #696]	; (8009ae4 <_tzset_unlocked_r+0x2d8>)
 800982c:	6018      	str	r0, [r3, #0]
 800982e:	4bae      	ldr	r3, [pc, #696]	; (8009ae8 <_tzset_unlocked_r+0x2dc>)
 8009830:	6018      	str	r0, [r3, #0]
 8009832:	4bae      	ldr	r3, [pc, #696]	; (8009aec <_tzset_unlocked_r+0x2e0>)
 8009834:	6830      	ldr	r0, [r6, #0]
 8009836:	e9c3 2200 	strd	r2, r2, [r3]
 800983a:	f7fd ffdb 	bl	80077f4 <free>
 800983e:	6034      	str	r4, [r6, #0]
 8009840:	b00d      	add	sp, #52	; 0x34
 8009842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009846:	6831      	ldr	r1, [r6, #0]
 8009848:	2900      	cmp	r1, #0
 800984a:	d15f      	bne.n	800990c <_tzset_unlocked_r+0x100>
 800984c:	6830      	ldr	r0, [r6, #0]
 800984e:	f7fd ffd1 	bl	80077f4 <free>
 8009852:	4620      	mov	r0, r4
 8009854:	f7f6 fcc6 	bl	80001e4 <strlen>
 8009858:	1c41      	adds	r1, r0, #1
 800985a:	4638      	mov	r0, r7
 800985c:	f7fe fac8 	bl	8007df0 <_malloc_r>
 8009860:	6030      	str	r0, [r6, #0]
 8009862:	2800      	cmp	r0, #0
 8009864:	d157      	bne.n	8009916 <_tzset_unlocked_r+0x10a>
 8009866:	7823      	ldrb	r3, [r4, #0]
 8009868:	4aa1      	ldr	r2, [pc, #644]	; (8009af0 <_tzset_unlocked_r+0x2e4>)
 800986a:	49a2      	ldr	r1, [pc, #648]	; (8009af4 <_tzset_unlocked_r+0x2e8>)
 800986c:	2b3a      	cmp	r3, #58	; 0x3a
 800986e:	bf08      	it	eq
 8009870:	3401      	addeq	r4, #1
 8009872:	ae0a      	add	r6, sp, #40	; 0x28
 8009874:	4633      	mov	r3, r6
 8009876:	4620      	mov	r0, r4
 8009878:	f001 fea0 	bl	800b5bc <siscanf>
 800987c:	2800      	cmp	r0, #0
 800987e:	dddf      	ble.n	8009840 <_tzset_unlocked_r+0x34>
 8009880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009882:	18e7      	adds	r7, r4, r3
 8009884:	5ce3      	ldrb	r3, [r4, r3]
 8009886:	2b2d      	cmp	r3, #45	; 0x2d
 8009888:	d149      	bne.n	800991e <_tzset_unlocked_r+0x112>
 800988a:	3701      	adds	r7, #1
 800988c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009890:	f10d 0a20 	add.w	sl, sp, #32
 8009894:	f10d 0b1e 	add.w	fp, sp, #30
 8009898:	f04f 0800 	mov.w	r8, #0
 800989c:	9603      	str	r6, [sp, #12]
 800989e:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80098a2:	f8cd b000 	str.w	fp, [sp]
 80098a6:	4633      	mov	r3, r6
 80098a8:	aa07      	add	r2, sp, #28
 80098aa:	4993      	ldr	r1, [pc, #588]	; (8009af8 <_tzset_unlocked_r+0x2ec>)
 80098ac:	f8ad 801e 	strh.w	r8, [sp, #30]
 80098b0:	4638      	mov	r0, r7
 80098b2:	f8ad 8020 	strh.w	r8, [sp, #32]
 80098b6:	f001 fe81 	bl	800b5bc <siscanf>
 80098ba:	4540      	cmp	r0, r8
 80098bc:	ddc0      	ble.n	8009840 <_tzset_unlocked_r+0x34>
 80098be:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80098c2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80098c6:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8009b04 <_tzset_unlocked_r+0x2f8>
 80098ca:	213c      	movs	r1, #60	; 0x3c
 80098cc:	fb01 2203 	mla	r2, r1, r3, r2
 80098d0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80098d4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80098d8:	fb01 2303 	mla	r3, r1, r3, r2
 80098dc:	435c      	muls	r4, r3
 80098de:	62ac      	str	r4, [r5, #40]	; 0x28
 80098e0:	4c82      	ldr	r4, [pc, #520]	; (8009aec <_tzset_unlocked_r+0x2e0>)
 80098e2:	4b83      	ldr	r3, [pc, #524]	; (8009af0 <_tzset_unlocked_r+0x2e4>)
 80098e4:	6023      	str	r3, [r4, #0]
 80098e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098e8:	4982      	ldr	r1, [pc, #520]	; (8009af4 <_tzset_unlocked_r+0x2e8>)
 80098ea:	441f      	add	r7, r3
 80098ec:	464a      	mov	r2, r9
 80098ee:	4633      	mov	r3, r6
 80098f0:	4638      	mov	r0, r7
 80098f2:	f001 fe63 	bl	800b5bc <siscanf>
 80098f6:	4540      	cmp	r0, r8
 80098f8:	dc16      	bgt.n	8009928 <_tzset_unlocked_r+0x11c>
 80098fa:	6823      	ldr	r3, [r4, #0]
 80098fc:	6063      	str	r3, [r4, #4]
 80098fe:	4b78      	ldr	r3, [pc, #480]	; (8009ae0 <_tzset_unlocked_r+0x2d4>)
 8009900:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8009902:	601a      	str	r2, [r3, #0]
 8009904:	4b78      	ldr	r3, [pc, #480]	; (8009ae8 <_tzset_unlocked_r+0x2dc>)
 8009906:	f8c3 8000 	str.w	r8, [r3]
 800990a:	e799      	b.n	8009840 <_tzset_unlocked_r+0x34>
 800990c:	f7f6 fc60 	bl	80001d0 <strcmp>
 8009910:	2800      	cmp	r0, #0
 8009912:	d095      	beq.n	8009840 <_tzset_unlocked_r+0x34>
 8009914:	e79a      	b.n	800984c <_tzset_unlocked_r+0x40>
 8009916:	4621      	mov	r1, r4
 8009918:	f7ff f8a6 	bl	8008a68 <strcpy>
 800991c:	e7a3      	b.n	8009866 <_tzset_unlocked_r+0x5a>
 800991e:	2b2b      	cmp	r3, #43	; 0x2b
 8009920:	bf08      	it	eq
 8009922:	3701      	addeq	r7, #1
 8009924:	2401      	movs	r4, #1
 8009926:	e7b3      	b.n	8009890 <_tzset_unlocked_r+0x84>
 8009928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800992a:	f8c4 9004 	str.w	r9, [r4, #4]
 800992e:	18fc      	adds	r4, r7, r3
 8009930:	5cfb      	ldrb	r3, [r7, r3]
 8009932:	2b2d      	cmp	r3, #45	; 0x2d
 8009934:	f040 808b 	bne.w	8009a4e <_tzset_unlocked_r+0x242>
 8009938:	3401      	adds	r4, #1
 800993a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800993e:	2300      	movs	r3, #0
 8009940:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009944:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009948:	f8ad 3020 	strh.w	r3, [sp, #32]
 800994c:	930a      	str	r3, [sp, #40]	; 0x28
 800994e:	e9cd a602 	strd	sl, r6, [sp, #8]
 8009952:	e9cd b600 	strd	fp, r6, [sp]
 8009956:	4633      	mov	r3, r6
 8009958:	aa07      	add	r2, sp, #28
 800995a:	4967      	ldr	r1, [pc, #412]	; (8009af8 <_tzset_unlocked_r+0x2ec>)
 800995c:	4620      	mov	r0, r4
 800995e:	f001 fe2d 	bl	800b5bc <siscanf>
 8009962:	2800      	cmp	r0, #0
 8009964:	dc78      	bgt.n	8009a58 <_tzset_unlocked_r+0x24c>
 8009966:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8009968:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800996c:	652b      	str	r3, [r5, #80]	; 0x50
 800996e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009970:	462f      	mov	r7, r5
 8009972:	441c      	add	r4, r3
 8009974:	f04f 0900 	mov.w	r9, #0
 8009978:	7823      	ldrb	r3, [r4, #0]
 800997a:	2b2c      	cmp	r3, #44	; 0x2c
 800997c:	bf08      	it	eq
 800997e:	3401      	addeq	r4, #1
 8009980:	f894 8000 	ldrb.w	r8, [r4]
 8009984:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8009988:	d179      	bne.n	8009a7e <_tzset_unlocked_r+0x272>
 800998a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800998e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8009992:	ab09      	add	r3, sp, #36	; 0x24
 8009994:	9300      	str	r3, [sp, #0]
 8009996:	9603      	str	r6, [sp, #12]
 8009998:	4633      	mov	r3, r6
 800999a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800999e:	4957      	ldr	r1, [pc, #348]	; (8009afc <_tzset_unlocked_r+0x2f0>)
 80099a0:	4620      	mov	r0, r4
 80099a2:	f001 fe0b 	bl	800b5bc <siscanf>
 80099a6:	2803      	cmp	r0, #3
 80099a8:	f47f af4a 	bne.w	8009840 <_tzset_unlocked_r+0x34>
 80099ac:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80099b0:	1e4b      	subs	r3, r1, #1
 80099b2:	2b0b      	cmp	r3, #11
 80099b4:	f63f af44 	bhi.w	8009840 <_tzset_unlocked_r+0x34>
 80099b8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80099bc:	1e53      	subs	r3, r2, #1
 80099be:	2b04      	cmp	r3, #4
 80099c0:	f63f af3e 	bhi.w	8009840 <_tzset_unlocked_r+0x34>
 80099c4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80099c8:	2b06      	cmp	r3, #6
 80099ca:	f63f af39 	bhi.w	8009840 <_tzset_unlocked_r+0x34>
 80099ce:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80099d2:	f887 8008 	strb.w	r8, [r7, #8]
 80099d6:	617b      	str	r3, [r7, #20]
 80099d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099da:	eb04 0803 	add.w	r8, r4, r3
 80099de:	2302      	movs	r3, #2
 80099e0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80099e4:	2300      	movs	r3, #0
 80099e6:	f8ad 301e 	strh.w	r3, [sp, #30]
 80099ea:	f8ad 3020 	strh.w	r3, [sp, #32]
 80099ee:	930a      	str	r3, [sp, #40]	; 0x28
 80099f0:	f898 3000 	ldrb.w	r3, [r8]
 80099f4:	2b2f      	cmp	r3, #47	; 0x2f
 80099f6:	d109      	bne.n	8009a0c <_tzset_unlocked_r+0x200>
 80099f8:	e9cd a602 	strd	sl, r6, [sp, #8]
 80099fc:	e9cd b600 	strd	fp, r6, [sp]
 8009a00:	4633      	mov	r3, r6
 8009a02:	aa07      	add	r2, sp, #28
 8009a04:	493e      	ldr	r1, [pc, #248]	; (8009b00 <_tzset_unlocked_r+0x2f4>)
 8009a06:	4640      	mov	r0, r8
 8009a08:	f001 fdd8 	bl	800b5bc <siscanf>
 8009a0c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8009a10:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8009a14:	213c      	movs	r1, #60	; 0x3c
 8009a16:	fb01 2203 	mla	r2, r1, r3, r2
 8009a1a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8009a1e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009a22:	fb01 2303 	mla	r3, r1, r3, r2
 8009a26:	61bb      	str	r3, [r7, #24]
 8009a28:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009a2a:	3728      	adds	r7, #40	; 0x28
 8009a2c:	4444      	add	r4, r8
 8009a2e:	f1b9 0f00 	cmp.w	r9, #0
 8009a32:	d021      	beq.n	8009a78 <_tzset_unlocked_r+0x26c>
 8009a34:	6868      	ldr	r0, [r5, #4]
 8009a36:	f7ff fe39 	bl	80096ac <__tzcalc_limits>
 8009a3a:	4b29      	ldr	r3, [pc, #164]	; (8009ae0 <_tzset_unlocked_r+0x2d4>)
 8009a3c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8009a3e:	601a      	str	r2, [r3, #0]
 8009a40:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009a42:	1a9b      	subs	r3, r3, r2
 8009a44:	4a28      	ldr	r2, [pc, #160]	; (8009ae8 <_tzset_unlocked_r+0x2dc>)
 8009a46:	bf18      	it	ne
 8009a48:	2301      	movne	r3, #1
 8009a4a:	6013      	str	r3, [r2, #0]
 8009a4c:	e6f8      	b.n	8009840 <_tzset_unlocked_r+0x34>
 8009a4e:	2b2b      	cmp	r3, #43	; 0x2b
 8009a50:	bf08      	it	eq
 8009a52:	3401      	addeq	r4, #1
 8009a54:	2701      	movs	r7, #1
 8009a56:	e772      	b.n	800993e <_tzset_unlocked_r+0x132>
 8009a58:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8009a5c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8009a60:	213c      	movs	r1, #60	; 0x3c
 8009a62:	fb01 2203 	mla	r2, r1, r3, r2
 8009a66:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8009a6a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009a6e:	fb01 2303 	mla	r3, r1, r3, r2
 8009a72:	435f      	muls	r7, r3
 8009a74:	652f      	str	r7, [r5, #80]	; 0x50
 8009a76:	e77a      	b.n	800996e <_tzset_unlocked_r+0x162>
 8009a78:	f04f 0901 	mov.w	r9, #1
 8009a7c:	e77c      	b.n	8009978 <_tzset_unlocked_r+0x16c>
 8009a7e:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8009a82:	bf06      	itte	eq
 8009a84:	3401      	addeq	r4, #1
 8009a86:	4643      	moveq	r3, r8
 8009a88:	2344      	movne	r3, #68	; 0x44
 8009a8a:	220a      	movs	r2, #10
 8009a8c:	a90b      	add	r1, sp, #44	; 0x2c
 8009a8e:	4620      	mov	r0, r4
 8009a90:	9305      	str	r3, [sp, #20]
 8009a92:	f7ff fdf5 	bl	8009680 <strtoul>
 8009a96:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8009a9a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8009a9e:	45a0      	cmp	r8, r4
 8009aa0:	9b05      	ldr	r3, [sp, #20]
 8009aa2:	d114      	bne.n	8009ace <_tzset_unlocked_r+0x2c2>
 8009aa4:	234d      	movs	r3, #77	; 0x4d
 8009aa6:	f1b9 0f00 	cmp.w	r9, #0
 8009aaa:	d107      	bne.n	8009abc <_tzset_unlocked_r+0x2b0>
 8009aac:	722b      	strb	r3, [r5, #8]
 8009aae:	2103      	movs	r1, #3
 8009ab0:	2302      	movs	r3, #2
 8009ab2:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8009ab6:	f8c5 9014 	str.w	r9, [r5, #20]
 8009aba:	e790      	b.n	80099de <_tzset_unlocked_r+0x1d2>
 8009abc:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8009ac0:	220b      	movs	r2, #11
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8009ac8:	2300      	movs	r3, #0
 8009aca:	63eb      	str	r3, [r5, #60]	; 0x3c
 8009acc:	e787      	b.n	80099de <_tzset_unlocked_r+0x1d2>
 8009ace:	b280      	uxth	r0, r0
 8009ad0:	723b      	strb	r3, [r7, #8]
 8009ad2:	6178      	str	r0, [r7, #20]
 8009ad4:	e783      	b.n	80099de <_tzset_unlocked_r+0x1d2>
 8009ad6:	bf00      	nop
 8009ad8:	080183cf 	.word	0x080183cf
 8009adc:	20000460 	.word	0x20000460
 8009ae0:	20000468 	.word	0x20000468
 8009ae4:	080183d2 	.word	0x080183d2
 8009ae8:	20000464 	.word	0x20000464
 8009aec:	200000f8 	.word	0x200000f8
 8009af0:	20000453 	.word	0x20000453
 8009af4:	080183d6 	.word	0x080183d6
 8009af8:	080183f9 	.word	0x080183f9
 8009afc:	080183e5 	.word	0x080183e5
 8009b00:	080183f8 	.word	0x080183f8
 8009b04:	20000448 	.word	0x20000448

08009b08 <__swbuf_r>:
 8009b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b0a:	460e      	mov	r6, r1
 8009b0c:	4614      	mov	r4, r2
 8009b0e:	4605      	mov	r5, r0
 8009b10:	b118      	cbz	r0, 8009b1a <__swbuf_r+0x12>
 8009b12:	6983      	ldr	r3, [r0, #24]
 8009b14:	b90b      	cbnz	r3, 8009b1a <__swbuf_r+0x12>
 8009b16:	f7fd fb41 	bl	800719c <__sinit>
 8009b1a:	4b21      	ldr	r3, [pc, #132]	; (8009ba0 <__swbuf_r+0x98>)
 8009b1c:	429c      	cmp	r4, r3
 8009b1e:	d12a      	bne.n	8009b76 <__swbuf_r+0x6e>
 8009b20:	686c      	ldr	r4, [r5, #4]
 8009b22:	69a3      	ldr	r3, [r4, #24]
 8009b24:	60a3      	str	r3, [r4, #8]
 8009b26:	89a3      	ldrh	r3, [r4, #12]
 8009b28:	071a      	lsls	r2, r3, #28
 8009b2a:	d52e      	bpl.n	8009b8a <__swbuf_r+0x82>
 8009b2c:	6923      	ldr	r3, [r4, #16]
 8009b2e:	b363      	cbz	r3, 8009b8a <__swbuf_r+0x82>
 8009b30:	6923      	ldr	r3, [r4, #16]
 8009b32:	6820      	ldr	r0, [r4, #0]
 8009b34:	1ac0      	subs	r0, r0, r3
 8009b36:	6963      	ldr	r3, [r4, #20]
 8009b38:	b2f6      	uxtb	r6, r6
 8009b3a:	4283      	cmp	r3, r0
 8009b3c:	4637      	mov	r7, r6
 8009b3e:	dc04      	bgt.n	8009b4a <__swbuf_r+0x42>
 8009b40:	4621      	mov	r1, r4
 8009b42:	4628      	mov	r0, r5
 8009b44:	f7fd fac0 	bl	80070c8 <_fflush_r>
 8009b48:	bb28      	cbnz	r0, 8009b96 <__swbuf_r+0x8e>
 8009b4a:	68a3      	ldr	r3, [r4, #8]
 8009b4c:	3b01      	subs	r3, #1
 8009b4e:	60a3      	str	r3, [r4, #8]
 8009b50:	6823      	ldr	r3, [r4, #0]
 8009b52:	1c5a      	adds	r2, r3, #1
 8009b54:	6022      	str	r2, [r4, #0]
 8009b56:	701e      	strb	r6, [r3, #0]
 8009b58:	6963      	ldr	r3, [r4, #20]
 8009b5a:	3001      	adds	r0, #1
 8009b5c:	4283      	cmp	r3, r0
 8009b5e:	d004      	beq.n	8009b6a <__swbuf_r+0x62>
 8009b60:	89a3      	ldrh	r3, [r4, #12]
 8009b62:	07db      	lsls	r3, r3, #31
 8009b64:	d519      	bpl.n	8009b9a <__swbuf_r+0x92>
 8009b66:	2e0a      	cmp	r6, #10
 8009b68:	d117      	bne.n	8009b9a <__swbuf_r+0x92>
 8009b6a:	4621      	mov	r1, r4
 8009b6c:	4628      	mov	r0, r5
 8009b6e:	f7fd faab 	bl	80070c8 <_fflush_r>
 8009b72:	b190      	cbz	r0, 8009b9a <__swbuf_r+0x92>
 8009b74:	e00f      	b.n	8009b96 <__swbuf_r+0x8e>
 8009b76:	4b0b      	ldr	r3, [pc, #44]	; (8009ba4 <__swbuf_r+0x9c>)
 8009b78:	429c      	cmp	r4, r3
 8009b7a:	d101      	bne.n	8009b80 <__swbuf_r+0x78>
 8009b7c:	68ac      	ldr	r4, [r5, #8]
 8009b7e:	e7d0      	b.n	8009b22 <__swbuf_r+0x1a>
 8009b80:	4b09      	ldr	r3, [pc, #36]	; (8009ba8 <__swbuf_r+0xa0>)
 8009b82:	429c      	cmp	r4, r3
 8009b84:	bf08      	it	eq
 8009b86:	68ec      	ldreq	r4, [r5, #12]
 8009b88:	e7cb      	b.n	8009b22 <__swbuf_r+0x1a>
 8009b8a:	4621      	mov	r1, r4
 8009b8c:	4628      	mov	r0, r5
 8009b8e:	f000 f81f 	bl	8009bd0 <__swsetup_r>
 8009b92:	2800      	cmp	r0, #0
 8009b94:	d0cc      	beq.n	8009b30 <__swbuf_r+0x28>
 8009b96:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009b9a:	4638      	mov	r0, r7
 8009b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b9e:	bf00      	nop
 8009ba0:	08018018 	.word	0x08018018
 8009ba4:	08018038 	.word	0x08018038
 8009ba8:	08017ff8 	.word	0x08017ff8

08009bac <_write_r>:
 8009bac:	b538      	push	{r3, r4, r5, lr}
 8009bae:	4c07      	ldr	r4, [pc, #28]	; (8009bcc <_write_r+0x20>)
 8009bb0:	4605      	mov	r5, r0
 8009bb2:	4608      	mov	r0, r1
 8009bb4:	4611      	mov	r1, r2
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	6022      	str	r2, [r4, #0]
 8009bba:	461a      	mov	r2, r3
 8009bbc:	f7f8 fa0d 	bl	8001fda <_write>
 8009bc0:	1c43      	adds	r3, r0, #1
 8009bc2:	d102      	bne.n	8009bca <_write_r+0x1e>
 8009bc4:	6823      	ldr	r3, [r4, #0]
 8009bc6:	b103      	cbz	r3, 8009bca <_write_r+0x1e>
 8009bc8:	602b      	str	r3, [r5, #0]
 8009bca:	bd38      	pop	{r3, r4, r5, pc}
 8009bcc:	20000470 	.word	0x20000470

08009bd0 <__swsetup_r>:
 8009bd0:	4b32      	ldr	r3, [pc, #200]	; (8009c9c <__swsetup_r+0xcc>)
 8009bd2:	b570      	push	{r4, r5, r6, lr}
 8009bd4:	681d      	ldr	r5, [r3, #0]
 8009bd6:	4606      	mov	r6, r0
 8009bd8:	460c      	mov	r4, r1
 8009bda:	b125      	cbz	r5, 8009be6 <__swsetup_r+0x16>
 8009bdc:	69ab      	ldr	r3, [r5, #24]
 8009bde:	b913      	cbnz	r3, 8009be6 <__swsetup_r+0x16>
 8009be0:	4628      	mov	r0, r5
 8009be2:	f7fd fadb 	bl	800719c <__sinit>
 8009be6:	4b2e      	ldr	r3, [pc, #184]	; (8009ca0 <__swsetup_r+0xd0>)
 8009be8:	429c      	cmp	r4, r3
 8009bea:	d10f      	bne.n	8009c0c <__swsetup_r+0x3c>
 8009bec:	686c      	ldr	r4, [r5, #4]
 8009bee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bf2:	b29a      	uxth	r2, r3
 8009bf4:	0715      	lsls	r5, r2, #28
 8009bf6:	d42c      	bmi.n	8009c52 <__swsetup_r+0x82>
 8009bf8:	06d0      	lsls	r0, r2, #27
 8009bfa:	d411      	bmi.n	8009c20 <__swsetup_r+0x50>
 8009bfc:	2209      	movs	r2, #9
 8009bfe:	6032      	str	r2, [r6, #0]
 8009c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c04:	81a3      	strh	r3, [r4, #12]
 8009c06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c0a:	e03e      	b.n	8009c8a <__swsetup_r+0xba>
 8009c0c:	4b25      	ldr	r3, [pc, #148]	; (8009ca4 <__swsetup_r+0xd4>)
 8009c0e:	429c      	cmp	r4, r3
 8009c10:	d101      	bne.n	8009c16 <__swsetup_r+0x46>
 8009c12:	68ac      	ldr	r4, [r5, #8]
 8009c14:	e7eb      	b.n	8009bee <__swsetup_r+0x1e>
 8009c16:	4b24      	ldr	r3, [pc, #144]	; (8009ca8 <__swsetup_r+0xd8>)
 8009c18:	429c      	cmp	r4, r3
 8009c1a:	bf08      	it	eq
 8009c1c:	68ec      	ldreq	r4, [r5, #12]
 8009c1e:	e7e6      	b.n	8009bee <__swsetup_r+0x1e>
 8009c20:	0751      	lsls	r1, r2, #29
 8009c22:	d512      	bpl.n	8009c4a <__swsetup_r+0x7a>
 8009c24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c26:	b141      	cbz	r1, 8009c3a <__swsetup_r+0x6a>
 8009c28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c2c:	4299      	cmp	r1, r3
 8009c2e:	d002      	beq.n	8009c36 <__swsetup_r+0x66>
 8009c30:	4630      	mov	r0, r6
 8009c32:	f7fe f88f 	bl	8007d54 <_free_r>
 8009c36:	2300      	movs	r3, #0
 8009c38:	6363      	str	r3, [r4, #52]	; 0x34
 8009c3a:	89a3      	ldrh	r3, [r4, #12]
 8009c3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c40:	81a3      	strh	r3, [r4, #12]
 8009c42:	2300      	movs	r3, #0
 8009c44:	6063      	str	r3, [r4, #4]
 8009c46:	6923      	ldr	r3, [r4, #16]
 8009c48:	6023      	str	r3, [r4, #0]
 8009c4a:	89a3      	ldrh	r3, [r4, #12]
 8009c4c:	f043 0308 	orr.w	r3, r3, #8
 8009c50:	81a3      	strh	r3, [r4, #12]
 8009c52:	6923      	ldr	r3, [r4, #16]
 8009c54:	b94b      	cbnz	r3, 8009c6a <__swsetup_r+0x9a>
 8009c56:	89a3      	ldrh	r3, [r4, #12]
 8009c58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c60:	d003      	beq.n	8009c6a <__swsetup_r+0x9a>
 8009c62:	4621      	mov	r1, r4
 8009c64:	4630      	mov	r0, r6
 8009c66:	f7fd fd7d 	bl	8007764 <__smakebuf_r>
 8009c6a:	89a2      	ldrh	r2, [r4, #12]
 8009c6c:	f012 0301 	ands.w	r3, r2, #1
 8009c70:	d00c      	beq.n	8009c8c <__swsetup_r+0xbc>
 8009c72:	2300      	movs	r3, #0
 8009c74:	60a3      	str	r3, [r4, #8]
 8009c76:	6963      	ldr	r3, [r4, #20]
 8009c78:	425b      	negs	r3, r3
 8009c7a:	61a3      	str	r3, [r4, #24]
 8009c7c:	6923      	ldr	r3, [r4, #16]
 8009c7e:	b953      	cbnz	r3, 8009c96 <__swsetup_r+0xc6>
 8009c80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c84:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009c88:	d1ba      	bne.n	8009c00 <__swsetup_r+0x30>
 8009c8a:	bd70      	pop	{r4, r5, r6, pc}
 8009c8c:	0792      	lsls	r2, r2, #30
 8009c8e:	bf58      	it	pl
 8009c90:	6963      	ldrpl	r3, [r4, #20]
 8009c92:	60a3      	str	r3, [r4, #8]
 8009c94:	e7f2      	b.n	8009c7c <__swsetup_r+0xac>
 8009c96:	2000      	movs	r0, #0
 8009c98:	e7f7      	b.n	8009c8a <__swsetup_r+0xba>
 8009c9a:	bf00      	nop
 8009c9c:	20000094 	.word	0x20000094
 8009ca0:	08018018 	.word	0x08018018
 8009ca4:	08018038 	.word	0x08018038
 8009ca8:	08017ff8 	.word	0x08017ff8

08009cac <abs>:
 8009cac:	2800      	cmp	r0, #0
 8009cae:	bfb8      	it	lt
 8009cb0:	4240      	neglt	r0, r0
 8009cb2:	4770      	bx	lr

08009cb4 <_close_r>:
 8009cb4:	b538      	push	{r3, r4, r5, lr}
 8009cb6:	4c06      	ldr	r4, [pc, #24]	; (8009cd0 <_close_r+0x1c>)
 8009cb8:	2300      	movs	r3, #0
 8009cba:	4605      	mov	r5, r0
 8009cbc:	4608      	mov	r0, r1
 8009cbe:	6023      	str	r3, [r4, #0]
 8009cc0:	f7f8 f9a7 	bl	8002012 <_close>
 8009cc4:	1c43      	adds	r3, r0, #1
 8009cc6:	d102      	bne.n	8009cce <_close_r+0x1a>
 8009cc8:	6823      	ldr	r3, [r4, #0]
 8009cca:	b103      	cbz	r3, 8009cce <_close_r+0x1a>
 8009ccc:	602b      	str	r3, [r5, #0]
 8009cce:	bd38      	pop	{r3, r4, r5, pc}
 8009cd0:	20000470 	.word	0x20000470

08009cd4 <div>:
 8009cd4:	2900      	cmp	r1, #0
 8009cd6:	b510      	push	{r4, lr}
 8009cd8:	fb91 f4f2 	sdiv	r4, r1, r2
 8009cdc:	fb02 1314 	mls	r3, r2, r4, r1
 8009ce0:	db06      	blt.n	8009cf0 <div+0x1c>
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	da01      	bge.n	8009cea <div+0x16>
 8009ce6:	3401      	adds	r4, #1
 8009ce8:	1a9b      	subs	r3, r3, r2
 8009cea:	e9c0 4300 	strd	r4, r3, [r0]
 8009cee:	bd10      	pop	{r4, pc}
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	bfc4      	itt	gt
 8009cf4:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
 8009cf8:	189b      	addgt	r3, r3, r2
 8009cfa:	e7f6      	b.n	8009cea <div+0x16>

08009cfc <quorem>:
 8009cfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d00:	6903      	ldr	r3, [r0, #16]
 8009d02:	690c      	ldr	r4, [r1, #16]
 8009d04:	42a3      	cmp	r3, r4
 8009d06:	4680      	mov	r8, r0
 8009d08:	f2c0 8082 	blt.w	8009e10 <quorem+0x114>
 8009d0c:	3c01      	subs	r4, #1
 8009d0e:	f101 0714 	add.w	r7, r1, #20
 8009d12:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009d16:	f100 0614 	add.w	r6, r0, #20
 8009d1a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009d1e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009d22:	eb06 030c 	add.w	r3, r6, ip
 8009d26:	3501      	adds	r5, #1
 8009d28:	eb07 090c 	add.w	r9, r7, ip
 8009d2c:	9301      	str	r3, [sp, #4]
 8009d2e:	fbb0 f5f5 	udiv	r5, r0, r5
 8009d32:	b395      	cbz	r5, 8009d9a <quorem+0x9e>
 8009d34:	f04f 0a00 	mov.w	sl, #0
 8009d38:	4638      	mov	r0, r7
 8009d3a:	46b6      	mov	lr, r6
 8009d3c:	46d3      	mov	fp, sl
 8009d3e:	f850 2b04 	ldr.w	r2, [r0], #4
 8009d42:	b293      	uxth	r3, r2
 8009d44:	fb05 a303 	mla	r3, r5, r3, sl
 8009d48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	ebab 0303 	sub.w	r3, fp, r3
 8009d52:	0c12      	lsrs	r2, r2, #16
 8009d54:	f8de b000 	ldr.w	fp, [lr]
 8009d58:	fb05 a202 	mla	r2, r5, r2, sl
 8009d5c:	fa13 f38b 	uxtah	r3, r3, fp
 8009d60:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009d64:	fa1f fb82 	uxth.w	fp, r2
 8009d68:	f8de 2000 	ldr.w	r2, [lr]
 8009d6c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009d70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d7a:	4581      	cmp	r9, r0
 8009d7c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009d80:	f84e 3b04 	str.w	r3, [lr], #4
 8009d84:	d2db      	bcs.n	8009d3e <quorem+0x42>
 8009d86:	f856 300c 	ldr.w	r3, [r6, ip]
 8009d8a:	b933      	cbnz	r3, 8009d9a <quorem+0x9e>
 8009d8c:	9b01      	ldr	r3, [sp, #4]
 8009d8e:	3b04      	subs	r3, #4
 8009d90:	429e      	cmp	r6, r3
 8009d92:	461a      	mov	r2, r3
 8009d94:	d330      	bcc.n	8009df8 <quorem+0xfc>
 8009d96:	f8c8 4010 	str.w	r4, [r8, #16]
 8009d9a:	4640      	mov	r0, r8
 8009d9c:	f001 f9a2 	bl	800b0e4 <__mcmp>
 8009da0:	2800      	cmp	r0, #0
 8009da2:	db25      	blt.n	8009df0 <quorem+0xf4>
 8009da4:	3501      	adds	r5, #1
 8009da6:	4630      	mov	r0, r6
 8009da8:	f04f 0c00 	mov.w	ip, #0
 8009dac:	f857 2b04 	ldr.w	r2, [r7], #4
 8009db0:	f8d0 e000 	ldr.w	lr, [r0]
 8009db4:	b293      	uxth	r3, r2
 8009db6:	ebac 0303 	sub.w	r3, ip, r3
 8009dba:	0c12      	lsrs	r2, r2, #16
 8009dbc:	fa13 f38e 	uxtah	r3, r3, lr
 8009dc0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009dc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009dce:	45b9      	cmp	r9, r7
 8009dd0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009dd4:	f840 3b04 	str.w	r3, [r0], #4
 8009dd8:	d2e8      	bcs.n	8009dac <quorem+0xb0>
 8009dda:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009dde:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009de2:	b92a      	cbnz	r2, 8009df0 <quorem+0xf4>
 8009de4:	3b04      	subs	r3, #4
 8009de6:	429e      	cmp	r6, r3
 8009de8:	461a      	mov	r2, r3
 8009dea:	d30b      	bcc.n	8009e04 <quorem+0x108>
 8009dec:	f8c8 4010 	str.w	r4, [r8, #16]
 8009df0:	4628      	mov	r0, r5
 8009df2:	b003      	add	sp, #12
 8009df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009df8:	6812      	ldr	r2, [r2, #0]
 8009dfa:	3b04      	subs	r3, #4
 8009dfc:	2a00      	cmp	r2, #0
 8009dfe:	d1ca      	bne.n	8009d96 <quorem+0x9a>
 8009e00:	3c01      	subs	r4, #1
 8009e02:	e7c5      	b.n	8009d90 <quorem+0x94>
 8009e04:	6812      	ldr	r2, [r2, #0]
 8009e06:	3b04      	subs	r3, #4
 8009e08:	2a00      	cmp	r2, #0
 8009e0a:	d1ef      	bne.n	8009dec <quorem+0xf0>
 8009e0c:	3c01      	subs	r4, #1
 8009e0e:	e7ea      	b.n	8009de6 <quorem+0xea>
 8009e10:	2000      	movs	r0, #0
 8009e12:	e7ee      	b.n	8009df2 <quorem+0xf6>
 8009e14:	0000      	movs	r0, r0
	...

08009e18 <_dtoa_r>:
 8009e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e1c:	ec57 6b10 	vmov	r6, r7, d0
 8009e20:	b097      	sub	sp, #92	; 0x5c
 8009e22:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009e24:	9106      	str	r1, [sp, #24]
 8009e26:	4604      	mov	r4, r0
 8009e28:	920b      	str	r2, [sp, #44]	; 0x2c
 8009e2a:	9312      	str	r3, [sp, #72]	; 0x48
 8009e2c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009e30:	e9cd 6700 	strd	r6, r7, [sp]
 8009e34:	b93d      	cbnz	r5, 8009e46 <_dtoa_r+0x2e>
 8009e36:	2010      	movs	r0, #16
 8009e38:	f7fd fcd4 	bl	80077e4 <malloc>
 8009e3c:	6260      	str	r0, [r4, #36]	; 0x24
 8009e3e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009e42:	6005      	str	r5, [r0, #0]
 8009e44:	60c5      	str	r5, [r0, #12]
 8009e46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e48:	6819      	ldr	r1, [r3, #0]
 8009e4a:	b151      	cbz	r1, 8009e62 <_dtoa_r+0x4a>
 8009e4c:	685a      	ldr	r2, [r3, #4]
 8009e4e:	604a      	str	r2, [r1, #4]
 8009e50:	2301      	movs	r3, #1
 8009e52:	4093      	lsls	r3, r2
 8009e54:	608b      	str	r3, [r1, #8]
 8009e56:	4620      	mov	r0, r4
 8009e58:	f000 ff62 	bl	800ad20 <_Bfree>
 8009e5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e5e:	2200      	movs	r2, #0
 8009e60:	601a      	str	r2, [r3, #0]
 8009e62:	1e3b      	subs	r3, r7, #0
 8009e64:	bfbb      	ittet	lt
 8009e66:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009e6a:	9301      	strlt	r3, [sp, #4]
 8009e6c:	2300      	movge	r3, #0
 8009e6e:	2201      	movlt	r2, #1
 8009e70:	bfac      	ite	ge
 8009e72:	f8c8 3000 	strge.w	r3, [r8]
 8009e76:	f8c8 2000 	strlt.w	r2, [r8]
 8009e7a:	4baf      	ldr	r3, [pc, #700]	; (800a138 <_dtoa_r+0x320>)
 8009e7c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009e80:	ea33 0308 	bics.w	r3, r3, r8
 8009e84:	d114      	bne.n	8009eb0 <_dtoa_r+0x98>
 8009e86:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009e88:	f242 730f 	movw	r3, #9999	; 0x270f
 8009e8c:	6013      	str	r3, [r2, #0]
 8009e8e:	9b00      	ldr	r3, [sp, #0]
 8009e90:	b923      	cbnz	r3, 8009e9c <_dtoa_r+0x84>
 8009e92:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009e96:	2800      	cmp	r0, #0
 8009e98:	f000 8542 	beq.w	800a920 <_dtoa_r+0xb08>
 8009e9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e9e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a14c <_dtoa_r+0x334>
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	f000 8544 	beq.w	800a930 <_dtoa_r+0xb18>
 8009ea8:	f10b 0303 	add.w	r3, fp, #3
 8009eac:	f000 bd3e 	b.w	800a92c <_dtoa_r+0xb14>
 8009eb0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	4630      	mov	r0, r6
 8009eba:	4639      	mov	r1, r7
 8009ebc:	f7f6 fe14 	bl	8000ae8 <__aeabi_dcmpeq>
 8009ec0:	4681      	mov	r9, r0
 8009ec2:	b168      	cbz	r0, 8009ee0 <_dtoa_r+0xc8>
 8009ec4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	6013      	str	r3, [r2, #0]
 8009eca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	f000 8524 	beq.w	800a91a <_dtoa_r+0xb02>
 8009ed2:	4b9a      	ldr	r3, [pc, #616]	; (800a13c <_dtoa_r+0x324>)
 8009ed4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009ed6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8009eda:	6013      	str	r3, [r2, #0]
 8009edc:	f000 bd28 	b.w	800a930 <_dtoa_r+0xb18>
 8009ee0:	aa14      	add	r2, sp, #80	; 0x50
 8009ee2:	a915      	add	r1, sp, #84	; 0x54
 8009ee4:	ec47 6b10 	vmov	d0, r6, r7
 8009ee8:	4620      	mov	r0, r4
 8009eea:	f001 f972 	bl	800b1d2 <__d2b>
 8009eee:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009ef2:	9004      	str	r0, [sp, #16]
 8009ef4:	2d00      	cmp	r5, #0
 8009ef6:	d07c      	beq.n	8009ff2 <_dtoa_r+0x1da>
 8009ef8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009efc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009f00:	46b2      	mov	sl, r6
 8009f02:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009f06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009f0a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8009f0e:	2200      	movs	r2, #0
 8009f10:	4b8b      	ldr	r3, [pc, #556]	; (800a140 <_dtoa_r+0x328>)
 8009f12:	4650      	mov	r0, sl
 8009f14:	4659      	mov	r1, fp
 8009f16:	f7f6 f9c7 	bl	80002a8 <__aeabi_dsub>
 8009f1a:	a381      	add	r3, pc, #516	; (adr r3, 800a120 <_dtoa_r+0x308>)
 8009f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f20:	f7f6 fb7a 	bl	8000618 <__aeabi_dmul>
 8009f24:	a380      	add	r3, pc, #512	; (adr r3, 800a128 <_dtoa_r+0x310>)
 8009f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2a:	f7f6 f9bf 	bl	80002ac <__adddf3>
 8009f2e:	4606      	mov	r6, r0
 8009f30:	4628      	mov	r0, r5
 8009f32:	460f      	mov	r7, r1
 8009f34:	f7f6 fb06 	bl	8000544 <__aeabi_i2d>
 8009f38:	a37d      	add	r3, pc, #500	; (adr r3, 800a130 <_dtoa_r+0x318>)
 8009f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3e:	f7f6 fb6b 	bl	8000618 <__aeabi_dmul>
 8009f42:	4602      	mov	r2, r0
 8009f44:	460b      	mov	r3, r1
 8009f46:	4630      	mov	r0, r6
 8009f48:	4639      	mov	r1, r7
 8009f4a:	f7f6 f9af 	bl	80002ac <__adddf3>
 8009f4e:	4606      	mov	r6, r0
 8009f50:	460f      	mov	r7, r1
 8009f52:	f7f6 fe11 	bl	8000b78 <__aeabi_d2iz>
 8009f56:	2200      	movs	r2, #0
 8009f58:	4682      	mov	sl, r0
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	4630      	mov	r0, r6
 8009f5e:	4639      	mov	r1, r7
 8009f60:	f7f6 fdcc 	bl	8000afc <__aeabi_dcmplt>
 8009f64:	b148      	cbz	r0, 8009f7a <_dtoa_r+0x162>
 8009f66:	4650      	mov	r0, sl
 8009f68:	f7f6 faec 	bl	8000544 <__aeabi_i2d>
 8009f6c:	4632      	mov	r2, r6
 8009f6e:	463b      	mov	r3, r7
 8009f70:	f7f6 fdba 	bl	8000ae8 <__aeabi_dcmpeq>
 8009f74:	b908      	cbnz	r0, 8009f7a <_dtoa_r+0x162>
 8009f76:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009f7a:	f1ba 0f16 	cmp.w	sl, #22
 8009f7e:	d859      	bhi.n	800a034 <_dtoa_r+0x21c>
 8009f80:	4970      	ldr	r1, [pc, #448]	; (800a144 <_dtoa_r+0x32c>)
 8009f82:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009f86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f8e:	f7f6 fdd3 	bl	8000b38 <__aeabi_dcmpgt>
 8009f92:	2800      	cmp	r0, #0
 8009f94:	d050      	beq.n	800a038 <_dtoa_r+0x220>
 8009f96:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009fa0:	1b5d      	subs	r5, r3, r5
 8009fa2:	f1b5 0801 	subs.w	r8, r5, #1
 8009fa6:	bf49      	itett	mi
 8009fa8:	f1c5 0301 	rsbmi	r3, r5, #1
 8009fac:	2300      	movpl	r3, #0
 8009fae:	9305      	strmi	r3, [sp, #20]
 8009fb0:	f04f 0800 	movmi.w	r8, #0
 8009fb4:	bf58      	it	pl
 8009fb6:	9305      	strpl	r3, [sp, #20]
 8009fb8:	f1ba 0f00 	cmp.w	sl, #0
 8009fbc:	db3e      	blt.n	800a03c <_dtoa_r+0x224>
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	44d0      	add	r8, sl
 8009fc2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009fc6:	9307      	str	r3, [sp, #28]
 8009fc8:	9b06      	ldr	r3, [sp, #24]
 8009fca:	2b09      	cmp	r3, #9
 8009fcc:	f200 8090 	bhi.w	800a0f0 <_dtoa_r+0x2d8>
 8009fd0:	2b05      	cmp	r3, #5
 8009fd2:	bfc4      	itt	gt
 8009fd4:	3b04      	subgt	r3, #4
 8009fd6:	9306      	strgt	r3, [sp, #24]
 8009fd8:	9b06      	ldr	r3, [sp, #24]
 8009fda:	f1a3 0302 	sub.w	r3, r3, #2
 8009fde:	bfcc      	ite	gt
 8009fe0:	2500      	movgt	r5, #0
 8009fe2:	2501      	movle	r5, #1
 8009fe4:	2b03      	cmp	r3, #3
 8009fe6:	f200 808f 	bhi.w	800a108 <_dtoa_r+0x2f0>
 8009fea:	e8df f003 	tbb	[pc, r3]
 8009fee:	7f7d      	.short	0x7f7d
 8009ff0:	7131      	.short	0x7131
 8009ff2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009ff6:	441d      	add	r5, r3
 8009ff8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009ffc:	2820      	cmp	r0, #32
 8009ffe:	dd13      	ble.n	800a028 <_dtoa_r+0x210>
 800a000:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a004:	9b00      	ldr	r3, [sp, #0]
 800a006:	fa08 f800 	lsl.w	r8, r8, r0
 800a00a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a00e:	fa23 f000 	lsr.w	r0, r3, r0
 800a012:	ea48 0000 	orr.w	r0, r8, r0
 800a016:	f7f6 fa85 	bl	8000524 <__aeabi_ui2d>
 800a01a:	2301      	movs	r3, #1
 800a01c:	4682      	mov	sl, r0
 800a01e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a022:	3d01      	subs	r5, #1
 800a024:	9313      	str	r3, [sp, #76]	; 0x4c
 800a026:	e772      	b.n	8009f0e <_dtoa_r+0xf6>
 800a028:	9b00      	ldr	r3, [sp, #0]
 800a02a:	f1c0 0020 	rsb	r0, r0, #32
 800a02e:	fa03 f000 	lsl.w	r0, r3, r0
 800a032:	e7f0      	b.n	800a016 <_dtoa_r+0x1fe>
 800a034:	2301      	movs	r3, #1
 800a036:	e7b1      	b.n	8009f9c <_dtoa_r+0x184>
 800a038:	900f      	str	r0, [sp, #60]	; 0x3c
 800a03a:	e7b0      	b.n	8009f9e <_dtoa_r+0x186>
 800a03c:	9b05      	ldr	r3, [sp, #20]
 800a03e:	eba3 030a 	sub.w	r3, r3, sl
 800a042:	9305      	str	r3, [sp, #20]
 800a044:	f1ca 0300 	rsb	r3, sl, #0
 800a048:	9307      	str	r3, [sp, #28]
 800a04a:	2300      	movs	r3, #0
 800a04c:	930e      	str	r3, [sp, #56]	; 0x38
 800a04e:	e7bb      	b.n	8009fc8 <_dtoa_r+0x1b0>
 800a050:	2301      	movs	r3, #1
 800a052:	930a      	str	r3, [sp, #40]	; 0x28
 800a054:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a056:	2b00      	cmp	r3, #0
 800a058:	dd59      	ble.n	800a10e <_dtoa_r+0x2f6>
 800a05a:	9302      	str	r3, [sp, #8]
 800a05c:	4699      	mov	r9, r3
 800a05e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a060:	2200      	movs	r2, #0
 800a062:	6072      	str	r2, [r6, #4]
 800a064:	2204      	movs	r2, #4
 800a066:	f102 0014 	add.w	r0, r2, #20
 800a06a:	4298      	cmp	r0, r3
 800a06c:	6871      	ldr	r1, [r6, #4]
 800a06e:	d953      	bls.n	800a118 <_dtoa_r+0x300>
 800a070:	4620      	mov	r0, r4
 800a072:	f000 fe21 	bl	800acb8 <_Balloc>
 800a076:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a078:	6030      	str	r0, [r6, #0]
 800a07a:	f1b9 0f0e 	cmp.w	r9, #14
 800a07e:	f8d3 b000 	ldr.w	fp, [r3]
 800a082:	f200 80e6 	bhi.w	800a252 <_dtoa_r+0x43a>
 800a086:	2d00      	cmp	r5, #0
 800a088:	f000 80e3 	beq.w	800a252 <_dtoa_r+0x43a>
 800a08c:	ed9d 7b00 	vldr	d7, [sp]
 800a090:	f1ba 0f00 	cmp.w	sl, #0
 800a094:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a098:	dd74      	ble.n	800a184 <_dtoa_r+0x36c>
 800a09a:	4a2a      	ldr	r2, [pc, #168]	; (800a144 <_dtoa_r+0x32c>)
 800a09c:	f00a 030f 	and.w	r3, sl, #15
 800a0a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a0a4:	ed93 7b00 	vldr	d7, [r3]
 800a0a8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a0ac:	06f0      	lsls	r0, r6, #27
 800a0ae:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a0b2:	d565      	bpl.n	800a180 <_dtoa_r+0x368>
 800a0b4:	4b24      	ldr	r3, [pc, #144]	; (800a148 <_dtoa_r+0x330>)
 800a0b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a0ba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a0be:	f7f6 fbd5 	bl	800086c <__aeabi_ddiv>
 800a0c2:	e9cd 0100 	strd	r0, r1, [sp]
 800a0c6:	f006 060f 	and.w	r6, r6, #15
 800a0ca:	2503      	movs	r5, #3
 800a0cc:	4f1e      	ldr	r7, [pc, #120]	; (800a148 <_dtoa_r+0x330>)
 800a0ce:	e04c      	b.n	800a16a <_dtoa_r+0x352>
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	930a      	str	r3, [sp, #40]	; 0x28
 800a0d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0d6:	4453      	add	r3, sl
 800a0d8:	f103 0901 	add.w	r9, r3, #1
 800a0dc:	9302      	str	r3, [sp, #8]
 800a0de:	464b      	mov	r3, r9
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	bfb8      	it	lt
 800a0e4:	2301      	movlt	r3, #1
 800a0e6:	e7ba      	b.n	800a05e <_dtoa_r+0x246>
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	e7b2      	b.n	800a052 <_dtoa_r+0x23a>
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	e7f0      	b.n	800a0d2 <_dtoa_r+0x2ba>
 800a0f0:	2501      	movs	r5, #1
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	9306      	str	r3, [sp, #24]
 800a0f6:	950a      	str	r5, [sp, #40]	; 0x28
 800a0f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0fc:	9302      	str	r3, [sp, #8]
 800a0fe:	4699      	mov	r9, r3
 800a100:	2200      	movs	r2, #0
 800a102:	2312      	movs	r3, #18
 800a104:	920b      	str	r2, [sp, #44]	; 0x2c
 800a106:	e7aa      	b.n	800a05e <_dtoa_r+0x246>
 800a108:	2301      	movs	r3, #1
 800a10a:	930a      	str	r3, [sp, #40]	; 0x28
 800a10c:	e7f4      	b.n	800a0f8 <_dtoa_r+0x2e0>
 800a10e:	2301      	movs	r3, #1
 800a110:	9302      	str	r3, [sp, #8]
 800a112:	4699      	mov	r9, r3
 800a114:	461a      	mov	r2, r3
 800a116:	e7f5      	b.n	800a104 <_dtoa_r+0x2ec>
 800a118:	3101      	adds	r1, #1
 800a11a:	6071      	str	r1, [r6, #4]
 800a11c:	0052      	lsls	r2, r2, #1
 800a11e:	e7a2      	b.n	800a066 <_dtoa_r+0x24e>
 800a120:	636f4361 	.word	0x636f4361
 800a124:	3fd287a7 	.word	0x3fd287a7
 800a128:	8b60c8b3 	.word	0x8b60c8b3
 800a12c:	3fc68a28 	.word	0x3fc68a28
 800a130:	509f79fb 	.word	0x509f79fb
 800a134:	3fd34413 	.word	0x3fd34413
 800a138:	7ff00000 	.word	0x7ff00000
 800a13c:	0801864d 	.word	0x0801864d
 800a140:	3ff80000 	.word	0x3ff80000
 800a144:	08018450 	.word	0x08018450
 800a148:	08018428 	.word	0x08018428
 800a14c:	08018414 	.word	0x08018414
 800a150:	07f1      	lsls	r1, r6, #31
 800a152:	d508      	bpl.n	800a166 <_dtoa_r+0x34e>
 800a154:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a158:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a15c:	f7f6 fa5c 	bl	8000618 <__aeabi_dmul>
 800a160:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a164:	3501      	adds	r5, #1
 800a166:	1076      	asrs	r6, r6, #1
 800a168:	3708      	adds	r7, #8
 800a16a:	2e00      	cmp	r6, #0
 800a16c:	d1f0      	bne.n	800a150 <_dtoa_r+0x338>
 800a16e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a172:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a176:	f7f6 fb79 	bl	800086c <__aeabi_ddiv>
 800a17a:	e9cd 0100 	strd	r0, r1, [sp]
 800a17e:	e01a      	b.n	800a1b6 <_dtoa_r+0x39e>
 800a180:	2502      	movs	r5, #2
 800a182:	e7a3      	b.n	800a0cc <_dtoa_r+0x2b4>
 800a184:	f000 80a0 	beq.w	800a2c8 <_dtoa_r+0x4b0>
 800a188:	f1ca 0600 	rsb	r6, sl, #0
 800a18c:	4b9f      	ldr	r3, [pc, #636]	; (800a40c <_dtoa_r+0x5f4>)
 800a18e:	4fa0      	ldr	r7, [pc, #640]	; (800a410 <_dtoa_r+0x5f8>)
 800a190:	f006 020f 	and.w	r2, r6, #15
 800a194:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a1a0:	f7f6 fa3a 	bl	8000618 <__aeabi_dmul>
 800a1a4:	e9cd 0100 	strd	r0, r1, [sp]
 800a1a8:	1136      	asrs	r6, r6, #4
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	2502      	movs	r5, #2
 800a1ae:	2e00      	cmp	r6, #0
 800a1b0:	d17f      	bne.n	800a2b2 <_dtoa_r+0x49a>
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d1e1      	bne.n	800a17a <_dtoa_r+0x362>
 800a1b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	f000 8087 	beq.w	800a2cc <_dtoa_r+0x4b4>
 800a1be:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	4b93      	ldr	r3, [pc, #588]	; (800a414 <_dtoa_r+0x5fc>)
 800a1c6:	4630      	mov	r0, r6
 800a1c8:	4639      	mov	r1, r7
 800a1ca:	f7f6 fc97 	bl	8000afc <__aeabi_dcmplt>
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	d07c      	beq.n	800a2cc <_dtoa_r+0x4b4>
 800a1d2:	f1b9 0f00 	cmp.w	r9, #0
 800a1d6:	d079      	beq.n	800a2cc <_dtoa_r+0x4b4>
 800a1d8:	9b02      	ldr	r3, [sp, #8]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	dd35      	ble.n	800a24a <_dtoa_r+0x432>
 800a1de:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800a1e2:	9308      	str	r3, [sp, #32]
 800a1e4:	4639      	mov	r1, r7
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	4b8b      	ldr	r3, [pc, #556]	; (800a418 <_dtoa_r+0x600>)
 800a1ea:	4630      	mov	r0, r6
 800a1ec:	f7f6 fa14 	bl	8000618 <__aeabi_dmul>
 800a1f0:	e9cd 0100 	strd	r0, r1, [sp]
 800a1f4:	9f02      	ldr	r7, [sp, #8]
 800a1f6:	3501      	adds	r5, #1
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	f7f6 f9a3 	bl	8000544 <__aeabi_i2d>
 800a1fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a202:	f7f6 fa09 	bl	8000618 <__aeabi_dmul>
 800a206:	2200      	movs	r2, #0
 800a208:	4b84      	ldr	r3, [pc, #528]	; (800a41c <_dtoa_r+0x604>)
 800a20a:	f7f6 f84f 	bl	80002ac <__adddf3>
 800a20e:	4605      	mov	r5, r0
 800a210:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a214:	2f00      	cmp	r7, #0
 800a216:	d15d      	bne.n	800a2d4 <_dtoa_r+0x4bc>
 800a218:	2200      	movs	r2, #0
 800a21a:	4b81      	ldr	r3, [pc, #516]	; (800a420 <_dtoa_r+0x608>)
 800a21c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a220:	f7f6 f842 	bl	80002a8 <__aeabi_dsub>
 800a224:	462a      	mov	r2, r5
 800a226:	4633      	mov	r3, r6
 800a228:	e9cd 0100 	strd	r0, r1, [sp]
 800a22c:	f7f6 fc84 	bl	8000b38 <__aeabi_dcmpgt>
 800a230:	2800      	cmp	r0, #0
 800a232:	f040 8288 	bne.w	800a746 <_dtoa_r+0x92e>
 800a236:	462a      	mov	r2, r5
 800a238:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a23c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a240:	f7f6 fc5c 	bl	8000afc <__aeabi_dcmplt>
 800a244:	2800      	cmp	r0, #0
 800a246:	f040 827c 	bne.w	800a742 <_dtoa_r+0x92a>
 800a24a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a24e:	e9cd 2300 	strd	r2, r3, [sp]
 800a252:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a254:	2b00      	cmp	r3, #0
 800a256:	f2c0 8150 	blt.w	800a4fa <_dtoa_r+0x6e2>
 800a25a:	f1ba 0f0e 	cmp.w	sl, #14
 800a25e:	f300 814c 	bgt.w	800a4fa <_dtoa_r+0x6e2>
 800a262:	4b6a      	ldr	r3, [pc, #424]	; (800a40c <_dtoa_r+0x5f4>)
 800a264:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a268:	ed93 7b00 	vldr	d7, [r3]
 800a26c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a26e:	2b00      	cmp	r3, #0
 800a270:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a274:	f280 80d8 	bge.w	800a428 <_dtoa_r+0x610>
 800a278:	f1b9 0f00 	cmp.w	r9, #0
 800a27c:	f300 80d4 	bgt.w	800a428 <_dtoa_r+0x610>
 800a280:	f040 825e 	bne.w	800a740 <_dtoa_r+0x928>
 800a284:	2200      	movs	r2, #0
 800a286:	4b66      	ldr	r3, [pc, #408]	; (800a420 <_dtoa_r+0x608>)
 800a288:	ec51 0b17 	vmov	r0, r1, d7
 800a28c:	f7f6 f9c4 	bl	8000618 <__aeabi_dmul>
 800a290:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a294:	f7f6 fc46 	bl	8000b24 <__aeabi_dcmpge>
 800a298:	464f      	mov	r7, r9
 800a29a:	464e      	mov	r6, r9
 800a29c:	2800      	cmp	r0, #0
 800a29e:	f040 8234 	bne.w	800a70a <_dtoa_r+0x8f2>
 800a2a2:	2331      	movs	r3, #49	; 0x31
 800a2a4:	f10b 0501 	add.w	r5, fp, #1
 800a2a8:	f88b 3000 	strb.w	r3, [fp]
 800a2ac:	f10a 0a01 	add.w	sl, sl, #1
 800a2b0:	e22f      	b.n	800a712 <_dtoa_r+0x8fa>
 800a2b2:	07f2      	lsls	r2, r6, #31
 800a2b4:	d505      	bpl.n	800a2c2 <_dtoa_r+0x4aa>
 800a2b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2ba:	f7f6 f9ad 	bl	8000618 <__aeabi_dmul>
 800a2be:	3501      	adds	r5, #1
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	1076      	asrs	r6, r6, #1
 800a2c4:	3708      	adds	r7, #8
 800a2c6:	e772      	b.n	800a1ae <_dtoa_r+0x396>
 800a2c8:	2502      	movs	r5, #2
 800a2ca:	e774      	b.n	800a1b6 <_dtoa_r+0x39e>
 800a2cc:	f8cd a020 	str.w	sl, [sp, #32]
 800a2d0:	464f      	mov	r7, r9
 800a2d2:	e791      	b.n	800a1f8 <_dtoa_r+0x3e0>
 800a2d4:	4b4d      	ldr	r3, [pc, #308]	; (800a40c <_dtoa_r+0x5f4>)
 800a2d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a2da:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a2de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d047      	beq.n	800a374 <_dtoa_r+0x55c>
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	2000      	movs	r0, #0
 800a2ea:	494e      	ldr	r1, [pc, #312]	; (800a424 <_dtoa_r+0x60c>)
 800a2ec:	f7f6 fabe 	bl	800086c <__aeabi_ddiv>
 800a2f0:	462a      	mov	r2, r5
 800a2f2:	4633      	mov	r3, r6
 800a2f4:	f7f5 ffd8 	bl	80002a8 <__aeabi_dsub>
 800a2f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a2fc:	465d      	mov	r5, fp
 800a2fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a302:	f7f6 fc39 	bl	8000b78 <__aeabi_d2iz>
 800a306:	4606      	mov	r6, r0
 800a308:	f7f6 f91c 	bl	8000544 <__aeabi_i2d>
 800a30c:	4602      	mov	r2, r0
 800a30e:	460b      	mov	r3, r1
 800a310:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a314:	f7f5 ffc8 	bl	80002a8 <__aeabi_dsub>
 800a318:	3630      	adds	r6, #48	; 0x30
 800a31a:	f805 6b01 	strb.w	r6, [r5], #1
 800a31e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a322:	e9cd 0100 	strd	r0, r1, [sp]
 800a326:	f7f6 fbe9 	bl	8000afc <__aeabi_dcmplt>
 800a32a:	2800      	cmp	r0, #0
 800a32c:	d163      	bne.n	800a3f6 <_dtoa_r+0x5de>
 800a32e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a332:	2000      	movs	r0, #0
 800a334:	4937      	ldr	r1, [pc, #220]	; (800a414 <_dtoa_r+0x5fc>)
 800a336:	f7f5 ffb7 	bl	80002a8 <__aeabi_dsub>
 800a33a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a33e:	f7f6 fbdd 	bl	8000afc <__aeabi_dcmplt>
 800a342:	2800      	cmp	r0, #0
 800a344:	f040 80b7 	bne.w	800a4b6 <_dtoa_r+0x69e>
 800a348:	eba5 030b 	sub.w	r3, r5, fp
 800a34c:	429f      	cmp	r7, r3
 800a34e:	f77f af7c 	ble.w	800a24a <_dtoa_r+0x432>
 800a352:	2200      	movs	r2, #0
 800a354:	4b30      	ldr	r3, [pc, #192]	; (800a418 <_dtoa_r+0x600>)
 800a356:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a35a:	f7f6 f95d 	bl	8000618 <__aeabi_dmul>
 800a35e:	2200      	movs	r2, #0
 800a360:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a364:	4b2c      	ldr	r3, [pc, #176]	; (800a418 <_dtoa_r+0x600>)
 800a366:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a36a:	f7f6 f955 	bl	8000618 <__aeabi_dmul>
 800a36e:	e9cd 0100 	strd	r0, r1, [sp]
 800a372:	e7c4      	b.n	800a2fe <_dtoa_r+0x4e6>
 800a374:	462a      	mov	r2, r5
 800a376:	4633      	mov	r3, r6
 800a378:	f7f6 f94e 	bl	8000618 <__aeabi_dmul>
 800a37c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a380:	eb0b 0507 	add.w	r5, fp, r7
 800a384:	465e      	mov	r6, fp
 800a386:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a38a:	f7f6 fbf5 	bl	8000b78 <__aeabi_d2iz>
 800a38e:	4607      	mov	r7, r0
 800a390:	f7f6 f8d8 	bl	8000544 <__aeabi_i2d>
 800a394:	3730      	adds	r7, #48	; 0x30
 800a396:	4602      	mov	r2, r0
 800a398:	460b      	mov	r3, r1
 800a39a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a39e:	f7f5 ff83 	bl	80002a8 <__aeabi_dsub>
 800a3a2:	f806 7b01 	strb.w	r7, [r6], #1
 800a3a6:	42ae      	cmp	r6, r5
 800a3a8:	e9cd 0100 	strd	r0, r1, [sp]
 800a3ac:	f04f 0200 	mov.w	r2, #0
 800a3b0:	d126      	bne.n	800a400 <_dtoa_r+0x5e8>
 800a3b2:	4b1c      	ldr	r3, [pc, #112]	; (800a424 <_dtoa_r+0x60c>)
 800a3b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a3b8:	f7f5 ff78 	bl	80002ac <__adddf3>
 800a3bc:	4602      	mov	r2, r0
 800a3be:	460b      	mov	r3, r1
 800a3c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3c4:	f7f6 fbb8 	bl	8000b38 <__aeabi_dcmpgt>
 800a3c8:	2800      	cmp	r0, #0
 800a3ca:	d174      	bne.n	800a4b6 <_dtoa_r+0x69e>
 800a3cc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a3d0:	2000      	movs	r0, #0
 800a3d2:	4914      	ldr	r1, [pc, #80]	; (800a424 <_dtoa_r+0x60c>)
 800a3d4:	f7f5 ff68 	bl	80002a8 <__aeabi_dsub>
 800a3d8:	4602      	mov	r2, r0
 800a3da:	460b      	mov	r3, r1
 800a3dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3e0:	f7f6 fb8c 	bl	8000afc <__aeabi_dcmplt>
 800a3e4:	2800      	cmp	r0, #0
 800a3e6:	f43f af30 	beq.w	800a24a <_dtoa_r+0x432>
 800a3ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a3ee:	2b30      	cmp	r3, #48	; 0x30
 800a3f0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800a3f4:	d002      	beq.n	800a3fc <_dtoa_r+0x5e4>
 800a3f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a3fa:	e04a      	b.n	800a492 <_dtoa_r+0x67a>
 800a3fc:	4615      	mov	r5, r2
 800a3fe:	e7f4      	b.n	800a3ea <_dtoa_r+0x5d2>
 800a400:	4b05      	ldr	r3, [pc, #20]	; (800a418 <_dtoa_r+0x600>)
 800a402:	f7f6 f909 	bl	8000618 <__aeabi_dmul>
 800a406:	e9cd 0100 	strd	r0, r1, [sp]
 800a40a:	e7bc      	b.n	800a386 <_dtoa_r+0x56e>
 800a40c:	08018450 	.word	0x08018450
 800a410:	08018428 	.word	0x08018428
 800a414:	3ff00000 	.word	0x3ff00000
 800a418:	40240000 	.word	0x40240000
 800a41c:	401c0000 	.word	0x401c0000
 800a420:	40140000 	.word	0x40140000
 800a424:	3fe00000 	.word	0x3fe00000
 800a428:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a42c:	465d      	mov	r5, fp
 800a42e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a432:	4630      	mov	r0, r6
 800a434:	4639      	mov	r1, r7
 800a436:	f7f6 fa19 	bl	800086c <__aeabi_ddiv>
 800a43a:	f7f6 fb9d 	bl	8000b78 <__aeabi_d2iz>
 800a43e:	4680      	mov	r8, r0
 800a440:	f7f6 f880 	bl	8000544 <__aeabi_i2d>
 800a444:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a448:	f7f6 f8e6 	bl	8000618 <__aeabi_dmul>
 800a44c:	4602      	mov	r2, r0
 800a44e:	460b      	mov	r3, r1
 800a450:	4630      	mov	r0, r6
 800a452:	4639      	mov	r1, r7
 800a454:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a458:	f7f5 ff26 	bl	80002a8 <__aeabi_dsub>
 800a45c:	f805 6b01 	strb.w	r6, [r5], #1
 800a460:	eba5 060b 	sub.w	r6, r5, fp
 800a464:	45b1      	cmp	r9, r6
 800a466:	4602      	mov	r2, r0
 800a468:	460b      	mov	r3, r1
 800a46a:	d139      	bne.n	800a4e0 <_dtoa_r+0x6c8>
 800a46c:	f7f5 ff1e 	bl	80002ac <__adddf3>
 800a470:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a474:	4606      	mov	r6, r0
 800a476:	460f      	mov	r7, r1
 800a478:	f7f6 fb5e 	bl	8000b38 <__aeabi_dcmpgt>
 800a47c:	b9c8      	cbnz	r0, 800a4b2 <_dtoa_r+0x69a>
 800a47e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a482:	4630      	mov	r0, r6
 800a484:	4639      	mov	r1, r7
 800a486:	f7f6 fb2f 	bl	8000ae8 <__aeabi_dcmpeq>
 800a48a:	b110      	cbz	r0, 800a492 <_dtoa_r+0x67a>
 800a48c:	f018 0f01 	tst.w	r8, #1
 800a490:	d10f      	bne.n	800a4b2 <_dtoa_r+0x69a>
 800a492:	9904      	ldr	r1, [sp, #16]
 800a494:	4620      	mov	r0, r4
 800a496:	f000 fc43 	bl	800ad20 <_Bfree>
 800a49a:	2300      	movs	r3, #0
 800a49c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a49e:	702b      	strb	r3, [r5, #0]
 800a4a0:	f10a 0301 	add.w	r3, sl, #1
 800a4a4:	6013      	str	r3, [r2, #0]
 800a4a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	f000 8241 	beq.w	800a930 <_dtoa_r+0xb18>
 800a4ae:	601d      	str	r5, [r3, #0]
 800a4b0:	e23e      	b.n	800a930 <_dtoa_r+0xb18>
 800a4b2:	f8cd a020 	str.w	sl, [sp, #32]
 800a4b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a4ba:	2a39      	cmp	r2, #57	; 0x39
 800a4bc:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800a4c0:	d108      	bne.n	800a4d4 <_dtoa_r+0x6bc>
 800a4c2:	459b      	cmp	fp, r3
 800a4c4:	d10a      	bne.n	800a4dc <_dtoa_r+0x6c4>
 800a4c6:	9b08      	ldr	r3, [sp, #32]
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	9308      	str	r3, [sp, #32]
 800a4cc:	2330      	movs	r3, #48	; 0x30
 800a4ce:	f88b 3000 	strb.w	r3, [fp]
 800a4d2:	465b      	mov	r3, fp
 800a4d4:	781a      	ldrb	r2, [r3, #0]
 800a4d6:	3201      	adds	r2, #1
 800a4d8:	701a      	strb	r2, [r3, #0]
 800a4da:	e78c      	b.n	800a3f6 <_dtoa_r+0x5de>
 800a4dc:	461d      	mov	r5, r3
 800a4de:	e7ea      	b.n	800a4b6 <_dtoa_r+0x69e>
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	4b9b      	ldr	r3, [pc, #620]	; (800a750 <_dtoa_r+0x938>)
 800a4e4:	f7f6 f898 	bl	8000618 <__aeabi_dmul>
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	4606      	mov	r6, r0
 800a4ee:	460f      	mov	r7, r1
 800a4f0:	f7f6 fafa 	bl	8000ae8 <__aeabi_dcmpeq>
 800a4f4:	2800      	cmp	r0, #0
 800a4f6:	d09a      	beq.n	800a42e <_dtoa_r+0x616>
 800a4f8:	e7cb      	b.n	800a492 <_dtoa_r+0x67a>
 800a4fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4fc:	2a00      	cmp	r2, #0
 800a4fe:	f000 808b 	beq.w	800a618 <_dtoa_r+0x800>
 800a502:	9a06      	ldr	r2, [sp, #24]
 800a504:	2a01      	cmp	r2, #1
 800a506:	dc6e      	bgt.n	800a5e6 <_dtoa_r+0x7ce>
 800a508:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a50a:	2a00      	cmp	r2, #0
 800a50c:	d067      	beq.n	800a5de <_dtoa_r+0x7c6>
 800a50e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a512:	9f07      	ldr	r7, [sp, #28]
 800a514:	9d05      	ldr	r5, [sp, #20]
 800a516:	9a05      	ldr	r2, [sp, #20]
 800a518:	2101      	movs	r1, #1
 800a51a:	441a      	add	r2, r3
 800a51c:	4620      	mov	r0, r4
 800a51e:	9205      	str	r2, [sp, #20]
 800a520:	4498      	add	r8, r3
 800a522:	f000 fc9d 	bl	800ae60 <__i2b>
 800a526:	4606      	mov	r6, r0
 800a528:	2d00      	cmp	r5, #0
 800a52a:	dd0c      	ble.n	800a546 <_dtoa_r+0x72e>
 800a52c:	f1b8 0f00 	cmp.w	r8, #0
 800a530:	dd09      	ble.n	800a546 <_dtoa_r+0x72e>
 800a532:	4545      	cmp	r5, r8
 800a534:	9a05      	ldr	r2, [sp, #20]
 800a536:	462b      	mov	r3, r5
 800a538:	bfa8      	it	ge
 800a53a:	4643      	movge	r3, r8
 800a53c:	1ad2      	subs	r2, r2, r3
 800a53e:	9205      	str	r2, [sp, #20]
 800a540:	1aed      	subs	r5, r5, r3
 800a542:	eba8 0803 	sub.w	r8, r8, r3
 800a546:	9b07      	ldr	r3, [sp, #28]
 800a548:	b1eb      	cbz	r3, 800a586 <_dtoa_r+0x76e>
 800a54a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d067      	beq.n	800a620 <_dtoa_r+0x808>
 800a550:	b18f      	cbz	r7, 800a576 <_dtoa_r+0x75e>
 800a552:	4631      	mov	r1, r6
 800a554:	463a      	mov	r2, r7
 800a556:	4620      	mov	r0, r4
 800a558:	f000 fd22 	bl	800afa0 <__pow5mult>
 800a55c:	9a04      	ldr	r2, [sp, #16]
 800a55e:	4601      	mov	r1, r0
 800a560:	4606      	mov	r6, r0
 800a562:	4620      	mov	r0, r4
 800a564:	f000 fc85 	bl	800ae72 <__multiply>
 800a568:	9904      	ldr	r1, [sp, #16]
 800a56a:	9008      	str	r0, [sp, #32]
 800a56c:	4620      	mov	r0, r4
 800a56e:	f000 fbd7 	bl	800ad20 <_Bfree>
 800a572:	9b08      	ldr	r3, [sp, #32]
 800a574:	9304      	str	r3, [sp, #16]
 800a576:	9b07      	ldr	r3, [sp, #28]
 800a578:	1bda      	subs	r2, r3, r7
 800a57a:	d004      	beq.n	800a586 <_dtoa_r+0x76e>
 800a57c:	9904      	ldr	r1, [sp, #16]
 800a57e:	4620      	mov	r0, r4
 800a580:	f000 fd0e 	bl	800afa0 <__pow5mult>
 800a584:	9004      	str	r0, [sp, #16]
 800a586:	2101      	movs	r1, #1
 800a588:	4620      	mov	r0, r4
 800a58a:	f000 fc69 	bl	800ae60 <__i2b>
 800a58e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a590:	4607      	mov	r7, r0
 800a592:	2b00      	cmp	r3, #0
 800a594:	f000 81d0 	beq.w	800a938 <_dtoa_r+0xb20>
 800a598:	461a      	mov	r2, r3
 800a59a:	4601      	mov	r1, r0
 800a59c:	4620      	mov	r0, r4
 800a59e:	f000 fcff 	bl	800afa0 <__pow5mult>
 800a5a2:	9b06      	ldr	r3, [sp, #24]
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	4607      	mov	r7, r0
 800a5a8:	dc40      	bgt.n	800a62c <_dtoa_r+0x814>
 800a5aa:	9b00      	ldr	r3, [sp, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d139      	bne.n	800a624 <_dtoa_r+0x80c>
 800a5b0:	9b01      	ldr	r3, [sp, #4]
 800a5b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d136      	bne.n	800a628 <_dtoa_r+0x810>
 800a5ba:	9b01      	ldr	r3, [sp, #4]
 800a5bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a5c0:	0d1b      	lsrs	r3, r3, #20
 800a5c2:	051b      	lsls	r3, r3, #20
 800a5c4:	b12b      	cbz	r3, 800a5d2 <_dtoa_r+0x7ba>
 800a5c6:	9b05      	ldr	r3, [sp, #20]
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	9305      	str	r3, [sp, #20]
 800a5cc:	f108 0801 	add.w	r8, r8, #1
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	9307      	str	r3, [sp, #28]
 800a5d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d12a      	bne.n	800a630 <_dtoa_r+0x818>
 800a5da:	2001      	movs	r0, #1
 800a5dc:	e030      	b.n	800a640 <_dtoa_r+0x828>
 800a5de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a5e0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a5e4:	e795      	b.n	800a512 <_dtoa_r+0x6fa>
 800a5e6:	9b07      	ldr	r3, [sp, #28]
 800a5e8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800a5ec:	42bb      	cmp	r3, r7
 800a5ee:	bfbf      	itttt	lt
 800a5f0:	9b07      	ldrlt	r3, [sp, #28]
 800a5f2:	9707      	strlt	r7, [sp, #28]
 800a5f4:	1afa      	sublt	r2, r7, r3
 800a5f6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a5f8:	bfbb      	ittet	lt
 800a5fa:	189b      	addlt	r3, r3, r2
 800a5fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a5fe:	1bdf      	subge	r7, r3, r7
 800a600:	2700      	movlt	r7, #0
 800a602:	f1b9 0f00 	cmp.w	r9, #0
 800a606:	bfb5      	itete	lt
 800a608:	9b05      	ldrlt	r3, [sp, #20]
 800a60a:	9d05      	ldrge	r5, [sp, #20]
 800a60c:	eba3 0509 	sublt.w	r5, r3, r9
 800a610:	464b      	movge	r3, r9
 800a612:	bfb8      	it	lt
 800a614:	2300      	movlt	r3, #0
 800a616:	e77e      	b.n	800a516 <_dtoa_r+0x6fe>
 800a618:	9f07      	ldr	r7, [sp, #28]
 800a61a:	9d05      	ldr	r5, [sp, #20]
 800a61c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a61e:	e783      	b.n	800a528 <_dtoa_r+0x710>
 800a620:	9a07      	ldr	r2, [sp, #28]
 800a622:	e7ab      	b.n	800a57c <_dtoa_r+0x764>
 800a624:	2300      	movs	r3, #0
 800a626:	e7d4      	b.n	800a5d2 <_dtoa_r+0x7ba>
 800a628:	9b00      	ldr	r3, [sp, #0]
 800a62a:	e7d2      	b.n	800a5d2 <_dtoa_r+0x7ba>
 800a62c:	2300      	movs	r3, #0
 800a62e:	9307      	str	r3, [sp, #28]
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a636:	6918      	ldr	r0, [r3, #16]
 800a638:	f000 fbc4 	bl	800adc4 <__hi0bits>
 800a63c:	f1c0 0020 	rsb	r0, r0, #32
 800a640:	4440      	add	r0, r8
 800a642:	f010 001f 	ands.w	r0, r0, #31
 800a646:	d047      	beq.n	800a6d8 <_dtoa_r+0x8c0>
 800a648:	f1c0 0320 	rsb	r3, r0, #32
 800a64c:	2b04      	cmp	r3, #4
 800a64e:	dd3b      	ble.n	800a6c8 <_dtoa_r+0x8b0>
 800a650:	9b05      	ldr	r3, [sp, #20]
 800a652:	f1c0 001c 	rsb	r0, r0, #28
 800a656:	4403      	add	r3, r0
 800a658:	9305      	str	r3, [sp, #20]
 800a65a:	4405      	add	r5, r0
 800a65c:	4480      	add	r8, r0
 800a65e:	9b05      	ldr	r3, [sp, #20]
 800a660:	2b00      	cmp	r3, #0
 800a662:	dd05      	ble.n	800a670 <_dtoa_r+0x858>
 800a664:	461a      	mov	r2, r3
 800a666:	9904      	ldr	r1, [sp, #16]
 800a668:	4620      	mov	r0, r4
 800a66a:	f000 fce7 	bl	800b03c <__lshift>
 800a66e:	9004      	str	r0, [sp, #16]
 800a670:	f1b8 0f00 	cmp.w	r8, #0
 800a674:	dd05      	ble.n	800a682 <_dtoa_r+0x86a>
 800a676:	4639      	mov	r1, r7
 800a678:	4642      	mov	r2, r8
 800a67a:	4620      	mov	r0, r4
 800a67c:	f000 fcde 	bl	800b03c <__lshift>
 800a680:	4607      	mov	r7, r0
 800a682:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a684:	b353      	cbz	r3, 800a6dc <_dtoa_r+0x8c4>
 800a686:	4639      	mov	r1, r7
 800a688:	9804      	ldr	r0, [sp, #16]
 800a68a:	f000 fd2b 	bl	800b0e4 <__mcmp>
 800a68e:	2800      	cmp	r0, #0
 800a690:	da24      	bge.n	800a6dc <_dtoa_r+0x8c4>
 800a692:	2300      	movs	r3, #0
 800a694:	220a      	movs	r2, #10
 800a696:	9904      	ldr	r1, [sp, #16]
 800a698:	4620      	mov	r0, r4
 800a69a:	f000 fb58 	bl	800ad4e <__multadd>
 800a69e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6a0:	9004      	str	r0, [sp, #16]
 800a6a2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	f000 814d 	beq.w	800a946 <_dtoa_r+0xb2e>
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	4631      	mov	r1, r6
 800a6b0:	220a      	movs	r2, #10
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	f000 fb4b 	bl	800ad4e <__multadd>
 800a6b8:	9b02      	ldr	r3, [sp, #8]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	4606      	mov	r6, r0
 800a6be:	dc4f      	bgt.n	800a760 <_dtoa_r+0x948>
 800a6c0:	9b06      	ldr	r3, [sp, #24]
 800a6c2:	2b02      	cmp	r3, #2
 800a6c4:	dd4c      	ble.n	800a760 <_dtoa_r+0x948>
 800a6c6:	e011      	b.n	800a6ec <_dtoa_r+0x8d4>
 800a6c8:	d0c9      	beq.n	800a65e <_dtoa_r+0x846>
 800a6ca:	9a05      	ldr	r2, [sp, #20]
 800a6cc:	331c      	adds	r3, #28
 800a6ce:	441a      	add	r2, r3
 800a6d0:	9205      	str	r2, [sp, #20]
 800a6d2:	441d      	add	r5, r3
 800a6d4:	4498      	add	r8, r3
 800a6d6:	e7c2      	b.n	800a65e <_dtoa_r+0x846>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	e7f6      	b.n	800a6ca <_dtoa_r+0x8b2>
 800a6dc:	f1b9 0f00 	cmp.w	r9, #0
 800a6e0:	dc38      	bgt.n	800a754 <_dtoa_r+0x93c>
 800a6e2:	9b06      	ldr	r3, [sp, #24]
 800a6e4:	2b02      	cmp	r3, #2
 800a6e6:	dd35      	ble.n	800a754 <_dtoa_r+0x93c>
 800a6e8:	f8cd 9008 	str.w	r9, [sp, #8]
 800a6ec:	9b02      	ldr	r3, [sp, #8]
 800a6ee:	b963      	cbnz	r3, 800a70a <_dtoa_r+0x8f2>
 800a6f0:	4639      	mov	r1, r7
 800a6f2:	2205      	movs	r2, #5
 800a6f4:	4620      	mov	r0, r4
 800a6f6:	f000 fb2a 	bl	800ad4e <__multadd>
 800a6fa:	4601      	mov	r1, r0
 800a6fc:	4607      	mov	r7, r0
 800a6fe:	9804      	ldr	r0, [sp, #16]
 800a700:	f000 fcf0 	bl	800b0e4 <__mcmp>
 800a704:	2800      	cmp	r0, #0
 800a706:	f73f adcc 	bgt.w	800a2a2 <_dtoa_r+0x48a>
 800a70a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a70c:	465d      	mov	r5, fp
 800a70e:	ea6f 0a03 	mvn.w	sl, r3
 800a712:	f04f 0900 	mov.w	r9, #0
 800a716:	4639      	mov	r1, r7
 800a718:	4620      	mov	r0, r4
 800a71a:	f000 fb01 	bl	800ad20 <_Bfree>
 800a71e:	2e00      	cmp	r6, #0
 800a720:	f43f aeb7 	beq.w	800a492 <_dtoa_r+0x67a>
 800a724:	f1b9 0f00 	cmp.w	r9, #0
 800a728:	d005      	beq.n	800a736 <_dtoa_r+0x91e>
 800a72a:	45b1      	cmp	r9, r6
 800a72c:	d003      	beq.n	800a736 <_dtoa_r+0x91e>
 800a72e:	4649      	mov	r1, r9
 800a730:	4620      	mov	r0, r4
 800a732:	f000 faf5 	bl	800ad20 <_Bfree>
 800a736:	4631      	mov	r1, r6
 800a738:	4620      	mov	r0, r4
 800a73a:	f000 faf1 	bl	800ad20 <_Bfree>
 800a73e:	e6a8      	b.n	800a492 <_dtoa_r+0x67a>
 800a740:	2700      	movs	r7, #0
 800a742:	463e      	mov	r6, r7
 800a744:	e7e1      	b.n	800a70a <_dtoa_r+0x8f2>
 800a746:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a74a:	463e      	mov	r6, r7
 800a74c:	e5a9      	b.n	800a2a2 <_dtoa_r+0x48a>
 800a74e:	bf00      	nop
 800a750:	40240000 	.word	0x40240000
 800a754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a756:	f8cd 9008 	str.w	r9, [sp, #8]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	f000 80fa 	beq.w	800a954 <_dtoa_r+0xb3c>
 800a760:	2d00      	cmp	r5, #0
 800a762:	dd05      	ble.n	800a770 <_dtoa_r+0x958>
 800a764:	4631      	mov	r1, r6
 800a766:	462a      	mov	r2, r5
 800a768:	4620      	mov	r0, r4
 800a76a:	f000 fc67 	bl	800b03c <__lshift>
 800a76e:	4606      	mov	r6, r0
 800a770:	9b07      	ldr	r3, [sp, #28]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d04c      	beq.n	800a810 <_dtoa_r+0x9f8>
 800a776:	6871      	ldr	r1, [r6, #4]
 800a778:	4620      	mov	r0, r4
 800a77a:	f000 fa9d 	bl	800acb8 <_Balloc>
 800a77e:	6932      	ldr	r2, [r6, #16]
 800a780:	3202      	adds	r2, #2
 800a782:	4605      	mov	r5, r0
 800a784:	0092      	lsls	r2, r2, #2
 800a786:	f106 010c 	add.w	r1, r6, #12
 800a78a:	300c      	adds	r0, #12
 800a78c:	f7fd f83a 	bl	8007804 <memcpy>
 800a790:	2201      	movs	r2, #1
 800a792:	4629      	mov	r1, r5
 800a794:	4620      	mov	r0, r4
 800a796:	f000 fc51 	bl	800b03c <__lshift>
 800a79a:	9b00      	ldr	r3, [sp, #0]
 800a79c:	f8cd b014 	str.w	fp, [sp, #20]
 800a7a0:	f003 0301 	and.w	r3, r3, #1
 800a7a4:	46b1      	mov	r9, r6
 800a7a6:	9307      	str	r3, [sp, #28]
 800a7a8:	4606      	mov	r6, r0
 800a7aa:	4639      	mov	r1, r7
 800a7ac:	9804      	ldr	r0, [sp, #16]
 800a7ae:	f7ff faa5 	bl	8009cfc <quorem>
 800a7b2:	4649      	mov	r1, r9
 800a7b4:	4605      	mov	r5, r0
 800a7b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a7ba:	9804      	ldr	r0, [sp, #16]
 800a7bc:	f000 fc92 	bl	800b0e4 <__mcmp>
 800a7c0:	4632      	mov	r2, r6
 800a7c2:	9000      	str	r0, [sp, #0]
 800a7c4:	4639      	mov	r1, r7
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	f000 fca6 	bl	800b118 <__mdiff>
 800a7cc:	68c3      	ldr	r3, [r0, #12]
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	bb03      	cbnz	r3, 800a814 <_dtoa_r+0x9fc>
 800a7d2:	4601      	mov	r1, r0
 800a7d4:	9008      	str	r0, [sp, #32]
 800a7d6:	9804      	ldr	r0, [sp, #16]
 800a7d8:	f000 fc84 	bl	800b0e4 <__mcmp>
 800a7dc:	9a08      	ldr	r2, [sp, #32]
 800a7de:	4603      	mov	r3, r0
 800a7e0:	4611      	mov	r1, r2
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	9308      	str	r3, [sp, #32]
 800a7e6:	f000 fa9b 	bl	800ad20 <_Bfree>
 800a7ea:	9b08      	ldr	r3, [sp, #32]
 800a7ec:	b9a3      	cbnz	r3, 800a818 <_dtoa_r+0xa00>
 800a7ee:	9a06      	ldr	r2, [sp, #24]
 800a7f0:	b992      	cbnz	r2, 800a818 <_dtoa_r+0xa00>
 800a7f2:	9a07      	ldr	r2, [sp, #28]
 800a7f4:	b982      	cbnz	r2, 800a818 <_dtoa_r+0xa00>
 800a7f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a7fa:	d029      	beq.n	800a850 <_dtoa_r+0xa38>
 800a7fc:	9b00      	ldr	r3, [sp, #0]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	dd01      	ble.n	800a806 <_dtoa_r+0x9ee>
 800a802:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a806:	9b05      	ldr	r3, [sp, #20]
 800a808:	1c5d      	adds	r5, r3, #1
 800a80a:	f883 8000 	strb.w	r8, [r3]
 800a80e:	e782      	b.n	800a716 <_dtoa_r+0x8fe>
 800a810:	4630      	mov	r0, r6
 800a812:	e7c2      	b.n	800a79a <_dtoa_r+0x982>
 800a814:	2301      	movs	r3, #1
 800a816:	e7e3      	b.n	800a7e0 <_dtoa_r+0x9c8>
 800a818:	9a00      	ldr	r2, [sp, #0]
 800a81a:	2a00      	cmp	r2, #0
 800a81c:	db04      	blt.n	800a828 <_dtoa_r+0xa10>
 800a81e:	d125      	bne.n	800a86c <_dtoa_r+0xa54>
 800a820:	9a06      	ldr	r2, [sp, #24]
 800a822:	bb1a      	cbnz	r2, 800a86c <_dtoa_r+0xa54>
 800a824:	9a07      	ldr	r2, [sp, #28]
 800a826:	bb0a      	cbnz	r2, 800a86c <_dtoa_r+0xa54>
 800a828:	2b00      	cmp	r3, #0
 800a82a:	ddec      	ble.n	800a806 <_dtoa_r+0x9ee>
 800a82c:	2201      	movs	r2, #1
 800a82e:	9904      	ldr	r1, [sp, #16]
 800a830:	4620      	mov	r0, r4
 800a832:	f000 fc03 	bl	800b03c <__lshift>
 800a836:	4639      	mov	r1, r7
 800a838:	9004      	str	r0, [sp, #16]
 800a83a:	f000 fc53 	bl	800b0e4 <__mcmp>
 800a83e:	2800      	cmp	r0, #0
 800a840:	dc03      	bgt.n	800a84a <_dtoa_r+0xa32>
 800a842:	d1e0      	bne.n	800a806 <_dtoa_r+0x9ee>
 800a844:	f018 0f01 	tst.w	r8, #1
 800a848:	d0dd      	beq.n	800a806 <_dtoa_r+0x9ee>
 800a84a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a84e:	d1d8      	bne.n	800a802 <_dtoa_r+0x9ea>
 800a850:	9b05      	ldr	r3, [sp, #20]
 800a852:	9a05      	ldr	r2, [sp, #20]
 800a854:	1c5d      	adds	r5, r3, #1
 800a856:	2339      	movs	r3, #57	; 0x39
 800a858:	7013      	strb	r3, [r2, #0]
 800a85a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a85e:	2b39      	cmp	r3, #57	; 0x39
 800a860:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800a864:	d04f      	beq.n	800a906 <_dtoa_r+0xaee>
 800a866:	3301      	adds	r3, #1
 800a868:	7013      	strb	r3, [r2, #0]
 800a86a:	e754      	b.n	800a716 <_dtoa_r+0x8fe>
 800a86c:	9a05      	ldr	r2, [sp, #20]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	f102 0501 	add.w	r5, r2, #1
 800a874:	dd06      	ble.n	800a884 <_dtoa_r+0xa6c>
 800a876:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a87a:	d0e9      	beq.n	800a850 <_dtoa_r+0xa38>
 800a87c:	f108 0801 	add.w	r8, r8, #1
 800a880:	9b05      	ldr	r3, [sp, #20]
 800a882:	e7c2      	b.n	800a80a <_dtoa_r+0x9f2>
 800a884:	9a02      	ldr	r2, [sp, #8]
 800a886:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a88a:	eba5 030b 	sub.w	r3, r5, fp
 800a88e:	4293      	cmp	r3, r2
 800a890:	d021      	beq.n	800a8d6 <_dtoa_r+0xabe>
 800a892:	2300      	movs	r3, #0
 800a894:	220a      	movs	r2, #10
 800a896:	9904      	ldr	r1, [sp, #16]
 800a898:	4620      	mov	r0, r4
 800a89a:	f000 fa58 	bl	800ad4e <__multadd>
 800a89e:	45b1      	cmp	r9, r6
 800a8a0:	9004      	str	r0, [sp, #16]
 800a8a2:	f04f 0300 	mov.w	r3, #0
 800a8a6:	f04f 020a 	mov.w	r2, #10
 800a8aa:	4649      	mov	r1, r9
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	d105      	bne.n	800a8bc <_dtoa_r+0xaa4>
 800a8b0:	f000 fa4d 	bl	800ad4e <__multadd>
 800a8b4:	4681      	mov	r9, r0
 800a8b6:	4606      	mov	r6, r0
 800a8b8:	9505      	str	r5, [sp, #20]
 800a8ba:	e776      	b.n	800a7aa <_dtoa_r+0x992>
 800a8bc:	f000 fa47 	bl	800ad4e <__multadd>
 800a8c0:	4631      	mov	r1, r6
 800a8c2:	4681      	mov	r9, r0
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	220a      	movs	r2, #10
 800a8c8:	4620      	mov	r0, r4
 800a8ca:	f000 fa40 	bl	800ad4e <__multadd>
 800a8ce:	4606      	mov	r6, r0
 800a8d0:	e7f2      	b.n	800a8b8 <_dtoa_r+0xaa0>
 800a8d2:	f04f 0900 	mov.w	r9, #0
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	9904      	ldr	r1, [sp, #16]
 800a8da:	4620      	mov	r0, r4
 800a8dc:	f000 fbae 	bl	800b03c <__lshift>
 800a8e0:	4639      	mov	r1, r7
 800a8e2:	9004      	str	r0, [sp, #16]
 800a8e4:	f000 fbfe 	bl	800b0e4 <__mcmp>
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	dcb6      	bgt.n	800a85a <_dtoa_r+0xa42>
 800a8ec:	d102      	bne.n	800a8f4 <_dtoa_r+0xadc>
 800a8ee:	f018 0f01 	tst.w	r8, #1
 800a8f2:	d1b2      	bne.n	800a85a <_dtoa_r+0xa42>
 800a8f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a8f8:	2b30      	cmp	r3, #48	; 0x30
 800a8fa:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800a8fe:	f47f af0a 	bne.w	800a716 <_dtoa_r+0x8fe>
 800a902:	4615      	mov	r5, r2
 800a904:	e7f6      	b.n	800a8f4 <_dtoa_r+0xadc>
 800a906:	4593      	cmp	fp, r2
 800a908:	d105      	bne.n	800a916 <_dtoa_r+0xafe>
 800a90a:	2331      	movs	r3, #49	; 0x31
 800a90c:	f10a 0a01 	add.w	sl, sl, #1
 800a910:	f88b 3000 	strb.w	r3, [fp]
 800a914:	e6ff      	b.n	800a716 <_dtoa_r+0x8fe>
 800a916:	4615      	mov	r5, r2
 800a918:	e79f      	b.n	800a85a <_dtoa_r+0xa42>
 800a91a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a980 <_dtoa_r+0xb68>
 800a91e:	e007      	b.n	800a930 <_dtoa_r+0xb18>
 800a920:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a922:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a984 <_dtoa_r+0xb6c>
 800a926:	b11b      	cbz	r3, 800a930 <_dtoa_r+0xb18>
 800a928:	f10b 0308 	add.w	r3, fp, #8
 800a92c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a92e:	6013      	str	r3, [r2, #0]
 800a930:	4658      	mov	r0, fp
 800a932:	b017      	add	sp, #92	; 0x5c
 800a934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a938:	9b06      	ldr	r3, [sp, #24]
 800a93a:	2b01      	cmp	r3, #1
 800a93c:	f77f ae35 	ble.w	800a5aa <_dtoa_r+0x792>
 800a940:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a942:	9307      	str	r3, [sp, #28]
 800a944:	e649      	b.n	800a5da <_dtoa_r+0x7c2>
 800a946:	9b02      	ldr	r3, [sp, #8]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	dc03      	bgt.n	800a954 <_dtoa_r+0xb3c>
 800a94c:	9b06      	ldr	r3, [sp, #24]
 800a94e:	2b02      	cmp	r3, #2
 800a950:	f73f aecc 	bgt.w	800a6ec <_dtoa_r+0x8d4>
 800a954:	465d      	mov	r5, fp
 800a956:	4639      	mov	r1, r7
 800a958:	9804      	ldr	r0, [sp, #16]
 800a95a:	f7ff f9cf 	bl	8009cfc <quorem>
 800a95e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a962:	f805 8b01 	strb.w	r8, [r5], #1
 800a966:	9a02      	ldr	r2, [sp, #8]
 800a968:	eba5 030b 	sub.w	r3, r5, fp
 800a96c:	429a      	cmp	r2, r3
 800a96e:	ddb0      	ble.n	800a8d2 <_dtoa_r+0xaba>
 800a970:	2300      	movs	r3, #0
 800a972:	220a      	movs	r2, #10
 800a974:	9904      	ldr	r1, [sp, #16]
 800a976:	4620      	mov	r0, r4
 800a978:	f000 f9e9 	bl	800ad4e <__multadd>
 800a97c:	9004      	str	r0, [sp, #16]
 800a97e:	e7ea      	b.n	800a956 <_dtoa_r+0xb3e>
 800a980:	0801864c 	.word	0x0801864c
 800a984:	0801840b 	.word	0x0801840b

0800a988 <__sflags>:
 800a988:	780b      	ldrb	r3, [r1, #0]
 800a98a:	2b72      	cmp	r3, #114	; 0x72
 800a98c:	b530      	push	{r4, r5, lr}
 800a98e:	d02c      	beq.n	800a9ea <__sflags+0x62>
 800a990:	2b77      	cmp	r3, #119	; 0x77
 800a992:	d007      	beq.n	800a9a4 <__sflags+0x1c>
 800a994:	2b61      	cmp	r3, #97	; 0x61
 800a996:	d10f      	bne.n	800a9b8 <__sflags+0x30>
 800a998:	f44f 7402 	mov.w	r4, #520	; 0x208
 800a99c:	2301      	movs	r3, #1
 800a99e:	f44f 7084 	mov.w	r0, #264	; 0x108
 800a9a2:	e003      	b.n	800a9ac <__sflags+0x24>
 800a9a4:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	2008      	movs	r0, #8
 800a9ac:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800a9b0:	b935      	cbnz	r5, 800a9c0 <__sflags+0x38>
 800a9b2:	4323      	orrs	r3, r4
 800a9b4:	6013      	str	r3, [r2, #0]
 800a9b6:	e002      	b.n	800a9be <__sflags+0x36>
 800a9b8:	2316      	movs	r3, #22
 800a9ba:	6003      	str	r3, [r0, #0]
 800a9bc:	2000      	movs	r0, #0
 800a9be:	bd30      	pop	{r4, r5, pc}
 800a9c0:	2d62      	cmp	r5, #98	; 0x62
 800a9c2:	d00c      	beq.n	800a9de <__sflags+0x56>
 800a9c4:	2d78      	cmp	r5, #120	; 0x78
 800a9c6:	d00d      	beq.n	800a9e4 <__sflags+0x5c>
 800a9c8:	2d2b      	cmp	r5, #43	; 0x2b
 800a9ca:	d1ef      	bne.n	800a9ac <__sflags+0x24>
 800a9cc:	f020 001c 	bic.w	r0, r0, #28
 800a9d0:	f023 0303 	bic.w	r3, r3, #3
 800a9d4:	f040 0010 	orr.w	r0, r0, #16
 800a9d8:	f043 0302 	orr.w	r3, r3, #2
 800a9dc:	e7e6      	b.n	800a9ac <__sflags+0x24>
 800a9de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9e2:	e7e3      	b.n	800a9ac <__sflags+0x24>
 800a9e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a9e8:	e7e0      	b.n	800a9ac <__sflags+0x24>
 800a9ea:	2400      	movs	r4, #0
 800a9ec:	4623      	mov	r3, r4
 800a9ee:	2004      	movs	r0, #4
 800a9f0:	e7dc      	b.n	800a9ac <__sflags+0x24>
	...

0800a9f4 <_fstat_r>:
 800a9f4:	b538      	push	{r3, r4, r5, lr}
 800a9f6:	4c07      	ldr	r4, [pc, #28]	; (800aa14 <_fstat_r+0x20>)
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	4605      	mov	r5, r0
 800a9fc:	4608      	mov	r0, r1
 800a9fe:	4611      	mov	r1, r2
 800aa00:	6023      	str	r3, [r4, #0]
 800aa02:	f7f7 fb12 	bl	800202a <_fstat>
 800aa06:	1c43      	adds	r3, r0, #1
 800aa08:	d102      	bne.n	800aa10 <_fstat_r+0x1c>
 800aa0a:	6823      	ldr	r3, [r4, #0]
 800aa0c:	b103      	cbz	r3, 800aa10 <_fstat_r+0x1c>
 800aa0e:	602b      	str	r3, [r5, #0]
 800aa10:	bd38      	pop	{r3, r4, r5, pc}
 800aa12:	bf00      	nop
 800aa14:	20000470 	.word	0x20000470

0800aa18 <_findenv_r>:
 800aa18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa1c:	4607      	mov	r7, r0
 800aa1e:	468b      	mov	fp, r1
 800aa20:	4690      	mov	r8, r2
 800aa22:	f000 fe14 	bl	800b64e <__env_lock>
 800aa26:	4b19      	ldr	r3, [pc, #100]	; (800aa8c <_findenv_r+0x74>)
 800aa28:	681d      	ldr	r5, [r3, #0]
 800aa2a:	469a      	mov	sl, r3
 800aa2c:	b13d      	cbz	r5, 800aa3e <_findenv_r+0x26>
 800aa2e:	465c      	mov	r4, fp
 800aa30:	4623      	mov	r3, r4
 800aa32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa36:	b32a      	cbz	r2, 800aa84 <_findenv_r+0x6c>
 800aa38:	2a3d      	cmp	r2, #61	; 0x3d
 800aa3a:	461c      	mov	r4, r3
 800aa3c:	d1f8      	bne.n	800aa30 <_findenv_r+0x18>
 800aa3e:	4638      	mov	r0, r7
 800aa40:	f000 fe06 	bl	800b650 <__env_unlock>
 800aa44:	2000      	movs	r0, #0
 800aa46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa4a:	464d      	mov	r5, r9
 800aa4c:	46a9      	mov	r9, r5
 800aa4e:	f859 0b04 	ldr.w	r0, [r9], #4
 800aa52:	2800      	cmp	r0, #0
 800aa54:	d0f3      	beq.n	800aa3e <_findenv_r+0x26>
 800aa56:	4622      	mov	r2, r4
 800aa58:	4659      	mov	r1, fp
 800aa5a:	f000 fdd9 	bl	800b610 <strncmp>
 800aa5e:	2800      	cmp	r0, #0
 800aa60:	d1f3      	bne.n	800aa4a <_findenv_r+0x32>
 800aa62:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800aa66:	191e      	adds	r6, r3, r4
 800aa68:	5d1b      	ldrb	r3, [r3, r4]
 800aa6a:	2b3d      	cmp	r3, #61	; 0x3d
 800aa6c:	d1ed      	bne.n	800aa4a <_findenv_r+0x32>
 800aa6e:	f8da 3000 	ldr.w	r3, [sl]
 800aa72:	1aed      	subs	r5, r5, r3
 800aa74:	10ad      	asrs	r5, r5, #2
 800aa76:	4638      	mov	r0, r7
 800aa78:	f8c8 5000 	str.w	r5, [r8]
 800aa7c:	f000 fde8 	bl	800b650 <__env_unlock>
 800aa80:	1c70      	adds	r0, r6, #1
 800aa82:	e7e0      	b.n	800aa46 <_findenv_r+0x2e>
 800aa84:	eba4 040b 	sub.w	r4, r4, fp
 800aa88:	e7e0      	b.n	800aa4c <_findenv_r+0x34>
 800aa8a:	bf00      	nop
 800aa8c:	20000064 	.word	0x20000064

0800aa90 <_getenv_r>:
 800aa90:	b507      	push	{r0, r1, r2, lr}
 800aa92:	aa01      	add	r2, sp, #4
 800aa94:	f7ff ffc0 	bl	800aa18 <_findenv_r>
 800aa98:	b003      	add	sp, #12
 800aa9a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800aaa0 <__gettzinfo>:
 800aaa0:	4800      	ldr	r0, [pc, #0]	; (800aaa4 <__gettzinfo+0x4>)
 800aaa2:	4770      	bx	lr
 800aaa4:	20000100 	.word	0x20000100

0800aaa8 <gmtime_r>:
 800aaa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaac:	e9d0 8900 	ldrd	r8, r9, [r0]
 800aab0:	460c      	mov	r4, r1
 800aab2:	4a50      	ldr	r2, [pc, #320]	; (800abf4 <gmtime_r+0x14c>)
 800aab4:	2300      	movs	r3, #0
 800aab6:	4640      	mov	r0, r8
 800aab8:	4649      	mov	r1, r9
 800aaba:	f7f6 f8d5 	bl	8000c68 <__aeabi_ldivmod>
 800aabe:	4a4d      	ldr	r2, [pc, #308]	; (800abf4 <gmtime_r+0x14c>)
 800aac0:	f500 262f 	add.w	r6, r0, #716800	; 0xaf000
 800aac4:	2300      	movs	r3, #0
 800aac6:	4640      	mov	r0, r8
 800aac8:	4649      	mov	r1, r9
 800aaca:	f7f6 f8cd 	bl	8000c68 <__aeabi_ldivmod>
 800aace:	2a00      	cmp	r2, #0
 800aad0:	bfbc      	itt	lt
 800aad2:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800aad6:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800aada:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800aade:	fb92 f3f1 	sdiv	r3, r2, r1
 800aae2:	fb01 2213 	mls	r2, r1, r3, r2
 800aae6:	f04f 013c 	mov.w	r1, #60	; 0x3c
 800aaea:	f606 256c 	addw	r5, r6, #2668	; 0xa6c
 800aaee:	60a3      	str	r3, [r4, #8]
 800aaf0:	bfb8      	it	lt
 800aaf2:	f606 256b 	addwlt	r5, r6, #2667	; 0xa6b
 800aaf6:	fb92 f3f1 	sdiv	r3, r2, r1
 800aafa:	fb01 2213 	mls	r2, r1, r3, r2
 800aafe:	6063      	str	r3, [r4, #4]
 800ab00:	6022      	str	r2, [r4, #0]
 800ab02:	1ceb      	adds	r3, r5, #3
 800ab04:	2207      	movs	r2, #7
 800ab06:	fb93 f2f2 	sdiv	r2, r3, r2
 800ab0a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800ab0e:	1a9b      	subs	r3, r3, r2
 800ab10:	bf48      	it	mi
 800ab12:	3307      	addmi	r3, #7
 800ab14:	2d00      	cmp	r5, #0
 800ab16:	61a3      	str	r3, [r4, #24]
 800ab18:	bfb8      	it	lt
 800ab1a:	f5a5 330e 	sublt.w	r3, r5, #145408	; 0x23800
 800ab1e:	4836      	ldr	r0, [pc, #216]	; (800abf8 <gmtime_r+0x150>)
 800ab20:	bfae      	itee	ge
 800ab22:	fb95 f0f0 	sdivge	r0, r5, r0
 800ab26:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 800ab2a:	fb93 f0f0 	sdivlt	r0, r3, r0
 800ab2e:	4b33      	ldr	r3, [pc, #204]	; (800abfc <gmtime_r+0x154>)
 800ab30:	fb03 5300 	mla	r3, r3, r0, r5
 800ab34:	f648 61ac 	movw	r1, #36524	; 0x8eac
 800ab38:	fbb3 f1f1 	udiv	r1, r3, r1
 800ab3c:	4419      	add	r1, r3
 800ab3e:	f240 57b4 	movw	r7, #1460	; 0x5b4
 800ab42:	fbb3 f2f7 	udiv	r2, r3, r7
 800ab46:	1a89      	subs	r1, r1, r2
 800ab48:	4a2d      	ldr	r2, [pc, #180]	; (800ac00 <gmtime_r+0x158>)
 800ab4a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ab4e:	1a8a      	subs	r2, r1, r2
 800ab50:	f648 6194 	movw	r1, #36500	; 0x8e94
 800ab54:	fbb2 f1f1 	udiv	r1, r2, r1
 800ab58:	440b      	add	r3, r1
 800ab5a:	f240 166d 	movw	r6, #365	; 0x16d
 800ab5e:	fbb2 f5f6 	udiv	r5, r2, r6
 800ab62:	fbb2 f2f7 	udiv	r2, r2, r7
 800ab66:	1a9a      	subs	r2, r3, r2
 800ab68:	fb06 2315 	mls	r3, r6, r5, r2
 800ab6c:	2199      	movs	r1, #153	; 0x99
 800ab6e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800ab72:	1c5e      	adds	r6, r3, #1
 800ab74:	3202      	adds	r2, #2
 800ab76:	fbb2 f2f1 	udiv	r2, r2, r1
 800ab7a:	2a0a      	cmp	r2, #10
 800ab7c:	fb01 f102 	mul.w	r1, r1, r2
 800ab80:	f101 0102 	add.w	r1, r1, #2
 800ab84:	f04f 0705 	mov.w	r7, #5
 800ab88:	fbb1 f1f7 	udiv	r1, r1, r7
 800ab8c:	eba6 0101 	sub.w	r1, r6, r1
 800ab90:	bf34      	ite	cc
 800ab92:	2602      	movcc	r6, #2
 800ab94:	f06f 0609 	mvncs.w	r6, #9
 800ab98:	4416      	add	r6, r2
 800ab9a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ab9e:	fb02 5000 	mla	r0, r2, r0, r5
 800aba2:	2e01      	cmp	r6, #1
 800aba4:	bf98      	it	ls
 800aba6:	3001      	addls	r0, #1
 800aba8:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800abac:	d30c      	bcc.n	800abc8 <gmtime_r+0x120>
 800abae:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800abb2:	61e3      	str	r3, [r4, #28]
 800abb4:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
 800abb8:	2300      	movs	r3, #0
 800abba:	e9c4 6004 	strd	r6, r0, [r4, #16]
 800abbe:	60e1      	str	r1, [r4, #12]
 800abc0:	6223      	str	r3, [r4, #32]
 800abc2:	4620      	mov	r0, r4
 800abc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abc8:	07aa      	lsls	r2, r5, #30
 800abca:	d105      	bne.n	800abd8 <gmtime_r+0x130>
 800abcc:	2764      	movs	r7, #100	; 0x64
 800abce:	fbb5 f2f7 	udiv	r2, r5, r7
 800abd2:	fb07 5212 	mls	r2, r7, r2, r5
 800abd6:	b95a      	cbnz	r2, 800abf0 <gmtime_r+0x148>
 800abd8:	f44f 77c8 	mov.w	r7, #400	; 0x190
 800abdc:	fbb5 f2f7 	udiv	r2, r5, r7
 800abe0:	fb07 5212 	mls	r2, r7, r2, r5
 800abe4:	fab2 f282 	clz	r2, r2
 800abe8:	0952      	lsrs	r2, r2, #5
 800abea:	333b      	adds	r3, #59	; 0x3b
 800abec:	4413      	add	r3, r2
 800abee:	e7e0      	b.n	800abb2 <gmtime_r+0x10a>
 800abf0:	2201      	movs	r2, #1
 800abf2:	e7fa      	b.n	800abea <gmtime_r+0x142>
 800abf4:	00015180 	.word	0x00015180
 800abf8:	00023ab1 	.word	0x00023ab1
 800abfc:	fffdc54f 	.word	0xfffdc54f
 800ac00:	00023ab0 	.word	0x00023ab0

0800ac04 <_isatty_r>:
 800ac04:	b538      	push	{r3, r4, r5, lr}
 800ac06:	4c06      	ldr	r4, [pc, #24]	; (800ac20 <_isatty_r+0x1c>)
 800ac08:	2300      	movs	r3, #0
 800ac0a:	4605      	mov	r5, r0
 800ac0c:	4608      	mov	r0, r1
 800ac0e:	6023      	str	r3, [r4, #0]
 800ac10:	f7f7 fa1b 	bl	800204a <_isatty>
 800ac14:	1c43      	adds	r3, r0, #1
 800ac16:	d102      	bne.n	800ac1e <_isatty_r+0x1a>
 800ac18:	6823      	ldr	r3, [r4, #0]
 800ac1a:	b103      	cbz	r3, 800ac1e <_isatty_r+0x1a>
 800ac1c:	602b      	str	r3, [r5, #0]
 800ac1e:	bd38      	pop	{r3, r4, r5, pc}
 800ac20:	20000470 	.word	0x20000470

0800ac24 <labs>:
 800ac24:	2800      	cmp	r0, #0
 800ac26:	bfb8      	it	lt
 800ac28:	4240      	neglt	r0, r0
 800ac2a:	4770      	bx	lr

0800ac2c <__locale_ctype_ptr_l>:
 800ac2c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800ac30:	4770      	bx	lr
	...

0800ac34 <__locale_ctype_ptr>:
 800ac34:	4b04      	ldr	r3, [pc, #16]	; (800ac48 <__locale_ctype_ptr+0x14>)
 800ac36:	4a05      	ldr	r2, [pc, #20]	; (800ac4c <__locale_ctype_ptr+0x18>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	6a1b      	ldr	r3, [r3, #32]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	bf08      	it	eq
 800ac40:	4613      	moveq	r3, r2
 800ac42:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800ac46:	4770      	bx	lr
 800ac48:	20000094 	.word	0x20000094
 800ac4c:	20000158 	.word	0x20000158

0800ac50 <_localeconv_r>:
 800ac50:	4b04      	ldr	r3, [pc, #16]	; (800ac64 <_localeconv_r+0x14>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	6a18      	ldr	r0, [r3, #32]
 800ac56:	4b04      	ldr	r3, [pc, #16]	; (800ac68 <_localeconv_r+0x18>)
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	bf08      	it	eq
 800ac5c:	4618      	moveq	r0, r3
 800ac5e:	30f0      	adds	r0, #240	; 0xf0
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop
 800ac64:	20000094 	.word	0x20000094
 800ac68:	20000158 	.word	0x20000158

0800ac6c <_lseek_r>:
 800ac6c:	b538      	push	{r3, r4, r5, lr}
 800ac6e:	4c07      	ldr	r4, [pc, #28]	; (800ac8c <_lseek_r+0x20>)
 800ac70:	4605      	mov	r5, r0
 800ac72:	4608      	mov	r0, r1
 800ac74:	4611      	mov	r1, r2
 800ac76:	2200      	movs	r2, #0
 800ac78:	6022      	str	r2, [r4, #0]
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	f7f7 f9f0 	bl	8002060 <_lseek>
 800ac80:	1c43      	adds	r3, r0, #1
 800ac82:	d102      	bne.n	800ac8a <_lseek_r+0x1e>
 800ac84:	6823      	ldr	r3, [r4, #0]
 800ac86:	b103      	cbz	r3, 800ac8a <_lseek_r+0x1e>
 800ac88:	602b      	str	r3, [r5, #0]
 800ac8a:	bd38      	pop	{r3, r4, r5, pc}
 800ac8c:	20000470 	.word	0x20000470

0800ac90 <__ascii_mbtowc>:
 800ac90:	b082      	sub	sp, #8
 800ac92:	b901      	cbnz	r1, 800ac96 <__ascii_mbtowc+0x6>
 800ac94:	a901      	add	r1, sp, #4
 800ac96:	b142      	cbz	r2, 800acaa <__ascii_mbtowc+0x1a>
 800ac98:	b14b      	cbz	r3, 800acae <__ascii_mbtowc+0x1e>
 800ac9a:	7813      	ldrb	r3, [r2, #0]
 800ac9c:	600b      	str	r3, [r1, #0]
 800ac9e:	7812      	ldrb	r2, [r2, #0]
 800aca0:	1c10      	adds	r0, r2, #0
 800aca2:	bf18      	it	ne
 800aca4:	2001      	movne	r0, #1
 800aca6:	b002      	add	sp, #8
 800aca8:	4770      	bx	lr
 800acaa:	4610      	mov	r0, r2
 800acac:	e7fb      	b.n	800aca6 <__ascii_mbtowc+0x16>
 800acae:	f06f 0001 	mvn.w	r0, #1
 800acb2:	e7f8      	b.n	800aca6 <__ascii_mbtowc+0x16>

0800acb4 <__malloc_lock>:
 800acb4:	4770      	bx	lr

0800acb6 <__malloc_unlock>:
 800acb6:	4770      	bx	lr

0800acb8 <_Balloc>:
 800acb8:	b570      	push	{r4, r5, r6, lr}
 800acba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800acbc:	4604      	mov	r4, r0
 800acbe:	460e      	mov	r6, r1
 800acc0:	b93d      	cbnz	r5, 800acd2 <_Balloc+0x1a>
 800acc2:	2010      	movs	r0, #16
 800acc4:	f7fc fd8e 	bl	80077e4 <malloc>
 800acc8:	6260      	str	r0, [r4, #36]	; 0x24
 800acca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800acce:	6005      	str	r5, [r0, #0]
 800acd0:	60c5      	str	r5, [r0, #12]
 800acd2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800acd4:	68eb      	ldr	r3, [r5, #12]
 800acd6:	b183      	cbz	r3, 800acfa <_Balloc+0x42>
 800acd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acda:	68db      	ldr	r3, [r3, #12]
 800acdc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ace0:	b9b8      	cbnz	r0, 800ad12 <_Balloc+0x5a>
 800ace2:	2101      	movs	r1, #1
 800ace4:	fa01 f506 	lsl.w	r5, r1, r6
 800ace8:	1d6a      	adds	r2, r5, #5
 800acea:	0092      	lsls	r2, r2, #2
 800acec:	4620      	mov	r0, r4
 800acee:	f000 fabf 	bl	800b270 <_calloc_r>
 800acf2:	b160      	cbz	r0, 800ad0e <_Balloc+0x56>
 800acf4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800acf8:	e00e      	b.n	800ad18 <_Balloc+0x60>
 800acfa:	2221      	movs	r2, #33	; 0x21
 800acfc:	2104      	movs	r1, #4
 800acfe:	4620      	mov	r0, r4
 800ad00:	f000 fab6 	bl	800b270 <_calloc_r>
 800ad04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad06:	60e8      	str	r0, [r5, #12]
 800ad08:	68db      	ldr	r3, [r3, #12]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d1e4      	bne.n	800acd8 <_Balloc+0x20>
 800ad0e:	2000      	movs	r0, #0
 800ad10:	bd70      	pop	{r4, r5, r6, pc}
 800ad12:	6802      	ldr	r2, [r0, #0]
 800ad14:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800ad18:	2300      	movs	r3, #0
 800ad1a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ad1e:	e7f7      	b.n	800ad10 <_Balloc+0x58>

0800ad20 <_Bfree>:
 800ad20:	b570      	push	{r4, r5, r6, lr}
 800ad22:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ad24:	4606      	mov	r6, r0
 800ad26:	460d      	mov	r5, r1
 800ad28:	b93c      	cbnz	r4, 800ad3a <_Bfree+0x1a>
 800ad2a:	2010      	movs	r0, #16
 800ad2c:	f7fc fd5a 	bl	80077e4 <malloc>
 800ad30:	6270      	str	r0, [r6, #36]	; 0x24
 800ad32:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ad36:	6004      	str	r4, [r0, #0]
 800ad38:	60c4      	str	r4, [r0, #12]
 800ad3a:	b13d      	cbz	r5, 800ad4c <_Bfree+0x2c>
 800ad3c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ad3e:	686a      	ldr	r2, [r5, #4]
 800ad40:	68db      	ldr	r3, [r3, #12]
 800ad42:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad46:	6029      	str	r1, [r5, #0]
 800ad48:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ad4c:	bd70      	pop	{r4, r5, r6, pc}

0800ad4e <__multadd>:
 800ad4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad52:	690d      	ldr	r5, [r1, #16]
 800ad54:	461f      	mov	r7, r3
 800ad56:	4606      	mov	r6, r0
 800ad58:	460c      	mov	r4, r1
 800ad5a:	f101 0c14 	add.w	ip, r1, #20
 800ad5e:	2300      	movs	r3, #0
 800ad60:	f8dc 0000 	ldr.w	r0, [ip]
 800ad64:	b281      	uxth	r1, r0
 800ad66:	fb02 7101 	mla	r1, r2, r1, r7
 800ad6a:	0c0f      	lsrs	r7, r1, #16
 800ad6c:	0c00      	lsrs	r0, r0, #16
 800ad6e:	fb02 7000 	mla	r0, r2, r0, r7
 800ad72:	b289      	uxth	r1, r1
 800ad74:	3301      	adds	r3, #1
 800ad76:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ad7a:	429d      	cmp	r5, r3
 800ad7c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ad80:	f84c 1b04 	str.w	r1, [ip], #4
 800ad84:	dcec      	bgt.n	800ad60 <__multadd+0x12>
 800ad86:	b1d7      	cbz	r7, 800adbe <__multadd+0x70>
 800ad88:	68a3      	ldr	r3, [r4, #8]
 800ad8a:	42ab      	cmp	r3, r5
 800ad8c:	dc12      	bgt.n	800adb4 <__multadd+0x66>
 800ad8e:	6861      	ldr	r1, [r4, #4]
 800ad90:	4630      	mov	r0, r6
 800ad92:	3101      	adds	r1, #1
 800ad94:	f7ff ff90 	bl	800acb8 <_Balloc>
 800ad98:	6922      	ldr	r2, [r4, #16]
 800ad9a:	3202      	adds	r2, #2
 800ad9c:	f104 010c 	add.w	r1, r4, #12
 800ada0:	4680      	mov	r8, r0
 800ada2:	0092      	lsls	r2, r2, #2
 800ada4:	300c      	adds	r0, #12
 800ada6:	f7fc fd2d 	bl	8007804 <memcpy>
 800adaa:	4621      	mov	r1, r4
 800adac:	4630      	mov	r0, r6
 800adae:	f7ff ffb7 	bl	800ad20 <_Bfree>
 800adb2:	4644      	mov	r4, r8
 800adb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800adb8:	3501      	adds	r5, #1
 800adba:	615f      	str	r7, [r3, #20]
 800adbc:	6125      	str	r5, [r4, #16]
 800adbe:	4620      	mov	r0, r4
 800adc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800adc4 <__hi0bits>:
 800adc4:	0c02      	lsrs	r2, r0, #16
 800adc6:	0412      	lsls	r2, r2, #16
 800adc8:	4603      	mov	r3, r0
 800adca:	b9b2      	cbnz	r2, 800adfa <__hi0bits+0x36>
 800adcc:	0403      	lsls	r3, r0, #16
 800adce:	2010      	movs	r0, #16
 800add0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800add4:	bf04      	itt	eq
 800add6:	021b      	lsleq	r3, r3, #8
 800add8:	3008      	addeq	r0, #8
 800adda:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800adde:	bf04      	itt	eq
 800ade0:	011b      	lsleq	r3, r3, #4
 800ade2:	3004      	addeq	r0, #4
 800ade4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ade8:	bf04      	itt	eq
 800adea:	009b      	lsleq	r3, r3, #2
 800adec:	3002      	addeq	r0, #2
 800adee:	2b00      	cmp	r3, #0
 800adf0:	db06      	blt.n	800ae00 <__hi0bits+0x3c>
 800adf2:	005b      	lsls	r3, r3, #1
 800adf4:	d503      	bpl.n	800adfe <__hi0bits+0x3a>
 800adf6:	3001      	adds	r0, #1
 800adf8:	4770      	bx	lr
 800adfa:	2000      	movs	r0, #0
 800adfc:	e7e8      	b.n	800add0 <__hi0bits+0xc>
 800adfe:	2020      	movs	r0, #32
 800ae00:	4770      	bx	lr

0800ae02 <__lo0bits>:
 800ae02:	6803      	ldr	r3, [r0, #0]
 800ae04:	f013 0207 	ands.w	r2, r3, #7
 800ae08:	4601      	mov	r1, r0
 800ae0a:	d00b      	beq.n	800ae24 <__lo0bits+0x22>
 800ae0c:	07da      	lsls	r2, r3, #31
 800ae0e:	d423      	bmi.n	800ae58 <__lo0bits+0x56>
 800ae10:	0798      	lsls	r0, r3, #30
 800ae12:	bf49      	itett	mi
 800ae14:	085b      	lsrmi	r3, r3, #1
 800ae16:	089b      	lsrpl	r3, r3, #2
 800ae18:	2001      	movmi	r0, #1
 800ae1a:	600b      	strmi	r3, [r1, #0]
 800ae1c:	bf5c      	itt	pl
 800ae1e:	600b      	strpl	r3, [r1, #0]
 800ae20:	2002      	movpl	r0, #2
 800ae22:	4770      	bx	lr
 800ae24:	b298      	uxth	r0, r3
 800ae26:	b9a8      	cbnz	r0, 800ae54 <__lo0bits+0x52>
 800ae28:	0c1b      	lsrs	r3, r3, #16
 800ae2a:	2010      	movs	r0, #16
 800ae2c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ae30:	bf04      	itt	eq
 800ae32:	0a1b      	lsreq	r3, r3, #8
 800ae34:	3008      	addeq	r0, #8
 800ae36:	071a      	lsls	r2, r3, #28
 800ae38:	bf04      	itt	eq
 800ae3a:	091b      	lsreq	r3, r3, #4
 800ae3c:	3004      	addeq	r0, #4
 800ae3e:	079a      	lsls	r2, r3, #30
 800ae40:	bf04      	itt	eq
 800ae42:	089b      	lsreq	r3, r3, #2
 800ae44:	3002      	addeq	r0, #2
 800ae46:	07da      	lsls	r2, r3, #31
 800ae48:	d402      	bmi.n	800ae50 <__lo0bits+0x4e>
 800ae4a:	085b      	lsrs	r3, r3, #1
 800ae4c:	d006      	beq.n	800ae5c <__lo0bits+0x5a>
 800ae4e:	3001      	adds	r0, #1
 800ae50:	600b      	str	r3, [r1, #0]
 800ae52:	4770      	bx	lr
 800ae54:	4610      	mov	r0, r2
 800ae56:	e7e9      	b.n	800ae2c <__lo0bits+0x2a>
 800ae58:	2000      	movs	r0, #0
 800ae5a:	4770      	bx	lr
 800ae5c:	2020      	movs	r0, #32
 800ae5e:	4770      	bx	lr

0800ae60 <__i2b>:
 800ae60:	b510      	push	{r4, lr}
 800ae62:	460c      	mov	r4, r1
 800ae64:	2101      	movs	r1, #1
 800ae66:	f7ff ff27 	bl	800acb8 <_Balloc>
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	6144      	str	r4, [r0, #20]
 800ae6e:	6102      	str	r2, [r0, #16]
 800ae70:	bd10      	pop	{r4, pc}

0800ae72 <__multiply>:
 800ae72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae76:	4614      	mov	r4, r2
 800ae78:	690a      	ldr	r2, [r1, #16]
 800ae7a:	6923      	ldr	r3, [r4, #16]
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	bfb8      	it	lt
 800ae80:	460b      	movlt	r3, r1
 800ae82:	4688      	mov	r8, r1
 800ae84:	bfbc      	itt	lt
 800ae86:	46a0      	movlt	r8, r4
 800ae88:	461c      	movlt	r4, r3
 800ae8a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ae8e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ae92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae96:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ae9a:	eb07 0609 	add.w	r6, r7, r9
 800ae9e:	42b3      	cmp	r3, r6
 800aea0:	bfb8      	it	lt
 800aea2:	3101      	addlt	r1, #1
 800aea4:	f7ff ff08 	bl	800acb8 <_Balloc>
 800aea8:	f100 0514 	add.w	r5, r0, #20
 800aeac:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800aeb0:	462b      	mov	r3, r5
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	4573      	cmp	r3, lr
 800aeb6:	d316      	bcc.n	800aee6 <__multiply+0x74>
 800aeb8:	f104 0214 	add.w	r2, r4, #20
 800aebc:	f108 0114 	add.w	r1, r8, #20
 800aec0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800aec4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800aec8:	9300      	str	r3, [sp, #0]
 800aeca:	9b00      	ldr	r3, [sp, #0]
 800aecc:	9201      	str	r2, [sp, #4]
 800aece:	4293      	cmp	r3, r2
 800aed0:	d80c      	bhi.n	800aeec <__multiply+0x7a>
 800aed2:	2e00      	cmp	r6, #0
 800aed4:	dd03      	ble.n	800aede <__multiply+0x6c>
 800aed6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d05d      	beq.n	800af9a <__multiply+0x128>
 800aede:	6106      	str	r6, [r0, #16]
 800aee0:	b003      	add	sp, #12
 800aee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aee6:	f843 2b04 	str.w	r2, [r3], #4
 800aeea:	e7e3      	b.n	800aeb4 <__multiply+0x42>
 800aeec:	f8b2 b000 	ldrh.w	fp, [r2]
 800aef0:	f1bb 0f00 	cmp.w	fp, #0
 800aef4:	d023      	beq.n	800af3e <__multiply+0xcc>
 800aef6:	4689      	mov	r9, r1
 800aef8:	46ac      	mov	ip, r5
 800aefa:	f04f 0800 	mov.w	r8, #0
 800aefe:	f859 4b04 	ldr.w	r4, [r9], #4
 800af02:	f8dc a000 	ldr.w	sl, [ip]
 800af06:	b2a3      	uxth	r3, r4
 800af08:	fa1f fa8a 	uxth.w	sl, sl
 800af0c:	fb0b a303 	mla	r3, fp, r3, sl
 800af10:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800af14:	f8dc 4000 	ldr.w	r4, [ip]
 800af18:	4443      	add	r3, r8
 800af1a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800af1e:	fb0b 840a 	mla	r4, fp, sl, r8
 800af22:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800af26:	46e2      	mov	sl, ip
 800af28:	b29b      	uxth	r3, r3
 800af2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800af2e:	454f      	cmp	r7, r9
 800af30:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800af34:	f84a 3b04 	str.w	r3, [sl], #4
 800af38:	d82b      	bhi.n	800af92 <__multiply+0x120>
 800af3a:	f8cc 8004 	str.w	r8, [ip, #4]
 800af3e:	9b01      	ldr	r3, [sp, #4]
 800af40:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800af44:	3204      	adds	r2, #4
 800af46:	f1ba 0f00 	cmp.w	sl, #0
 800af4a:	d020      	beq.n	800af8e <__multiply+0x11c>
 800af4c:	682b      	ldr	r3, [r5, #0]
 800af4e:	4689      	mov	r9, r1
 800af50:	46a8      	mov	r8, r5
 800af52:	f04f 0b00 	mov.w	fp, #0
 800af56:	f8b9 c000 	ldrh.w	ip, [r9]
 800af5a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800af5e:	fb0a 440c 	mla	r4, sl, ip, r4
 800af62:	445c      	add	r4, fp
 800af64:	46c4      	mov	ip, r8
 800af66:	b29b      	uxth	r3, r3
 800af68:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800af6c:	f84c 3b04 	str.w	r3, [ip], #4
 800af70:	f859 3b04 	ldr.w	r3, [r9], #4
 800af74:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800af78:	0c1b      	lsrs	r3, r3, #16
 800af7a:	fb0a b303 	mla	r3, sl, r3, fp
 800af7e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800af82:	454f      	cmp	r7, r9
 800af84:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800af88:	d805      	bhi.n	800af96 <__multiply+0x124>
 800af8a:	f8c8 3004 	str.w	r3, [r8, #4]
 800af8e:	3504      	adds	r5, #4
 800af90:	e79b      	b.n	800aeca <__multiply+0x58>
 800af92:	46d4      	mov	ip, sl
 800af94:	e7b3      	b.n	800aefe <__multiply+0x8c>
 800af96:	46e0      	mov	r8, ip
 800af98:	e7dd      	b.n	800af56 <__multiply+0xe4>
 800af9a:	3e01      	subs	r6, #1
 800af9c:	e799      	b.n	800aed2 <__multiply+0x60>
	...

0800afa0 <__pow5mult>:
 800afa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afa4:	4615      	mov	r5, r2
 800afa6:	f012 0203 	ands.w	r2, r2, #3
 800afaa:	4606      	mov	r6, r0
 800afac:	460f      	mov	r7, r1
 800afae:	d007      	beq.n	800afc0 <__pow5mult+0x20>
 800afb0:	3a01      	subs	r2, #1
 800afb2:	4c21      	ldr	r4, [pc, #132]	; (800b038 <__pow5mult+0x98>)
 800afb4:	2300      	movs	r3, #0
 800afb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800afba:	f7ff fec8 	bl	800ad4e <__multadd>
 800afbe:	4607      	mov	r7, r0
 800afc0:	10ad      	asrs	r5, r5, #2
 800afc2:	d035      	beq.n	800b030 <__pow5mult+0x90>
 800afc4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800afc6:	b93c      	cbnz	r4, 800afd8 <__pow5mult+0x38>
 800afc8:	2010      	movs	r0, #16
 800afca:	f7fc fc0b 	bl	80077e4 <malloc>
 800afce:	6270      	str	r0, [r6, #36]	; 0x24
 800afd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800afd4:	6004      	str	r4, [r0, #0]
 800afd6:	60c4      	str	r4, [r0, #12]
 800afd8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800afdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800afe0:	b94c      	cbnz	r4, 800aff6 <__pow5mult+0x56>
 800afe2:	f240 2171 	movw	r1, #625	; 0x271
 800afe6:	4630      	mov	r0, r6
 800afe8:	f7ff ff3a 	bl	800ae60 <__i2b>
 800afec:	2300      	movs	r3, #0
 800afee:	f8c8 0008 	str.w	r0, [r8, #8]
 800aff2:	4604      	mov	r4, r0
 800aff4:	6003      	str	r3, [r0, #0]
 800aff6:	f04f 0800 	mov.w	r8, #0
 800affa:	07eb      	lsls	r3, r5, #31
 800affc:	d50a      	bpl.n	800b014 <__pow5mult+0x74>
 800affe:	4639      	mov	r1, r7
 800b000:	4622      	mov	r2, r4
 800b002:	4630      	mov	r0, r6
 800b004:	f7ff ff35 	bl	800ae72 <__multiply>
 800b008:	4639      	mov	r1, r7
 800b00a:	4681      	mov	r9, r0
 800b00c:	4630      	mov	r0, r6
 800b00e:	f7ff fe87 	bl	800ad20 <_Bfree>
 800b012:	464f      	mov	r7, r9
 800b014:	106d      	asrs	r5, r5, #1
 800b016:	d00b      	beq.n	800b030 <__pow5mult+0x90>
 800b018:	6820      	ldr	r0, [r4, #0]
 800b01a:	b938      	cbnz	r0, 800b02c <__pow5mult+0x8c>
 800b01c:	4622      	mov	r2, r4
 800b01e:	4621      	mov	r1, r4
 800b020:	4630      	mov	r0, r6
 800b022:	f7ff ff26 	bl	800ae72 <__multiply>
 800b026:	6020      	str	r0, [r4, #0]
 800b028:	f8c0 8000 	str.w	r8, [r0]
 800b02c:	4604      	mov	r4, r0
 800b02e:	e7e4      	b.n	800affa <__pow5mult+0x5a>
 800b030:	4638      	mov	r0, r7
 800b032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b036:	bf00      	nop
 800b038:	08018518 	.word	0x08018518

0800b03c <__lshift>:
 800b03c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b040:	460c      	mov	r4, r1
 800b042:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b046:	6923      	ldr	r3, [r4, #16]
 800b048:	6849      	ldr	r1, [r1, #4]
 800b04a:	eb0a 0903 	add.w	r9, sl, r3
 800b04e:	68a3      	ldr	r3, [r4, #8]
 800b050:	4607      	mov	r7, r0
 800b052:	4616      	mov	r6, r2
 800b054:	f109 0501 	add.w	r5, r9, #1
 800b058:	42ab      	cmp	r3, r5
 800b05a:	db32      	blt.n	800b0c2 <__lshift+0x86>
 800b05c:	4638      	mov	r0, r7
 800b05e:	f7ff fe2b 	bl	800acb8 <_Balloc>
 800b062:	2300      	movs	r3, #0
 800b064:	4680      	mov	r8, r0
 800b066:	f100 0114 	add.w	r1, r0, #20
 800b06a:	461a      	mov	r2, r3
 800b06c:	4553      	cmp	r3, sl
 800b06e:	db2b      	blt.n	800b0c8 <__lshift+0x8c>
 800b070:	6920      	ldr	r0, [r4, #16]
 800b072:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b076:	f104 0314 	add.w	r3, r4, #20
 800b07a:	f016 021f 	ands.w	r2, r6, #31
 800b07e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b082:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b086:	d025      	beq.n	800b0d4 <__lshift+0x98>
 800b088:	f1c2 0e20 	rsb	lr, r2, #32
 800b08c:	2000      	movs	r0, #0
 800b08e:	681e      	ldr	r6, [r3, #0]
 800b090:	468a      	mov	sl, r1
 800b092:	4096      	lsls	r6, r2
 800b094:	4330      	orrs	r0, r6
 800b096:	f84a 0b04 	str.w	r0, [sl], #4
 800b09a:	f853 0b04 	ldr.w	r0, [r3], #4
 800b09e:	459c      	cmp	ip, r3
 800b0a0:	fa20 f00e 	lsr.w	r0, r0, lr
 800b0a4:	d814      	bhi.n	800b0d0 <__lshift+0x94>
 800b0a6:	6048      	str	r0, [r1, #4]
 800b0a8:	b108      	cbz	r0, 800b0ae <__lshift+0x72>
 800b0aa:	f109 0502 	add.w	r5, r9, #2
 800b0ae:	3d01      	subs	r5, #1
 800b0b0:	4638      	mov	r0, r7
 800b0b2:	f8c8 5010 	str.w	r5, [r8, #16]
 800b0b6:	4621      	mov	r1, r4
 800b0b8:	f7ff fe32 	bl	800ad20 <_Bfree>
 800b0bc:	4640      	mov	r0, r8
 800b0be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0c2:	3101      	adds	r1, #1
 800b0c4:	005b      	lsls	r3, r3, #1
 800b0c6:	e7c7      	b.n	800b058 <__lshift+0x1c>
 800b0c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b0cc:	3301      	adds	r3, #1
 800b0ce:	e7cd      	b.n	800b06c <__lshift+0x30>
 800b0d0:	4651      	mov	r1, sl
 800b0d2:	e7dc      	b.n	800b08e <__lshift+0x52>
 800b0d4:	3904      	subs	r1, #4
 800b0d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0da:	f841 2f04 	str.w	r2, [r1, #4]!
 800b0de:	459c      	cmp	ip, r3
 800b0e0:	d8f9      	bhi.n	800b0d6 <__lshift+0x9a>
 800b0e2:	e7e4      	b.n	800b0ae <__lshift+0x72>

0800b0e4 <__mcmp>:
 800b0e4:	6903      	ldr	r3, [r0, #16]
 800b0e6:	690a      	ldr	r2, [r1, #16]
 800b0e8:	1a9b      	subs	r3, r3, r2
 800b0ea:	b530      	push	{r4, r5, lr}
 800b0ec:	d10c      	bne.n	800b108 <__mcmp+0x24>
 800b0ee:	0092      	lsls	r2, r2, #2
 800b0f0:	3014      	adds	r0, #20
 800b0f2:	3114      	adds	r1, #20
 800b0f4:	1884      	adds	r4, r0, r2
 800b0f6:	4411      	add	r1, r2
 800b0f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b0fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b100:	4295      	cmp	r5, r2
 800b102:	d003      	beq.n	800b10c <__mcmp+0x28>
 800b104:	d305      	bcc.n	800b112 <__mcmp+0x2e>
 800b106:	2301      	movs	r3, #1
 800b108:	4618      	mov	r0, r3
 800b10a:	bd30      	pop	{r4, r5, pc}
 800b10c:	42a0      	cmp	r0, r4
 800b10e:	d3f3      	bcc.n	800b0f8 <__mcmp+0x14>
 800b110:	e7fa      	b.n	800b108 <__mcmp+0x24>
 800b112:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b116:	e7f7      	b.n	800b108 <__mcmp+0x24>

0800b118 <__mdiff>:
 800b118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b11c:	460d      	mov	r5, r1
 800b11e:	4607      	mov	r7, r0
 800b120:	4611      	mov	r1, r2
 800b122:	4628      	mov	r0, r5
 800b124:	4614      	mov	r4, r2
 800b126:	f7ff ffdd 	bl	800b0e4 <__mcmp>
 800b12a:	1e06      	subs	r6, r0, #0
 800b12c:	d108      	bne.n	800b140 <__mdiff+0x28>
 800b12e:	4631      	mov	r1, r6
 800b130:	4638      	mov	r0, r7
 800b132:	f7ff fdc1 	bl	800acb8 <_Balloc>
 800b136:	2301      	movs	r3, #1
 800b138:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b13c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b140:	bfa4      	itt	ge
 800b142:	4623      	movge	r3, r4
 800b144:	462c      	movge	r4, r5
 800b146:	4638      	mov	r0, r7
 800b148:	6861      	ldr	r1, [r4, #4]
 800b14a:	bfa6      	itte	ge
 800b14c:	461d      	movge	r5, r3
 800b14e:	2600      	movge	r6, #0
 800b150:	2601      	movlt	r6, #1
 800b152:	f7ff fdb1 	bl	800acb8 <_Balloc>
 800b156:	692b      	ldr	r3, [r5, #16]
 800b158:	60c6      	str	r6, [r0, #12]
 800b15a:	6926      	ldr	r6, [r4, #16]
 800b15c:	f105 0914 	add.w	r9, r5, #20
 800b160:	f104 0214 	add.w	r2, r4, #20
 800b164:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b168:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b16c:	f100 0514 	add.w	r5, r0, #20
 800b170:	f04f 0e00 	mov.w	lr, #0
 800b174:	f852 ab04 	ldr.w	sl, [r2], #4
 800b178:	f859 4b04 	ldr.w	r4, [r9], #4
 800b17c:	fa1e f18a 	uxtah	r1, lr, sl
 800b180:	b2a3      	uxth	r3, r4
 800b182:	1ac9      	subs	r1, r1, r3
 800b184:	0c23      	lsrs	r3, r4, #16
 800b186:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b18a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b18e:	b289      	uxth	r1, r1
 800b190:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b194:	45c8      	cmp	r8, r9
 800b196:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b19a:	4694      	mov	ip, r2
 800b19c:	f845 3b04 	str.w	r3, [r5], #4
 800b1a0:	d8e8      	bhi.n	800b174 <__mdiff+0x5c>
 800b1a2:	45bc      	cmp	ip, r7
 800b1a4:	d304      	bcc.n	800b1b0 <__mdiff+0x98>
 800b1a6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b1aa:	b183      	cbz	r3, 800b1ce <__mdiff+0xb6>
 800b1ac:	6106      	str	r6, [r0, #16]
 800b1ae:	e7c5      	b.n	800b13c <__mdiff+0x24>
 800b1b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b1b4:	fa1e f381 	uxtah	r3, lr, r1
 800b1b8:	141a      	asrs	r2, r3, #16
 800b1ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b1be:	b29b      	uxth	r3, r3
 800b1c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b1c4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b1c8:	f845 3b04 	str.w	r3, [r5], #4
 800b1cc:	e7e9      	b.n	800b1a2 <__mdiff+0x8a>
 800b1ce:	3e01      	subs	r6, #1
 800b1d0:	e7e9      	b.n	800b1a6 <__mdiff+0x8e>

0800b1d2 <__d2b>:
 800b1d2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b1d6:	460e      	mov	r6, r1
 800b1d8:	2101      	movs	r1, #1
 800b1da:	ec59 8b10 	vmov	r8, r9, d0
 800b1de:	4615      	mov	r5, r2
 800b1e0:	f7ff fd6a 	bl	800acb8 <_Balloc>
 800b1e4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b1e8:	4607      	mov	r7, r0
 800b1ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b1ee:	bb34      	cbnz	r4, 800b23e <__d2b+0x6c>
 800b1f0:	9301      	str	r3, [sp, #4]
 800b1f2:	f1b8 0300 	subs.w	r3, r8, #0
 800b1f6:	d027      	beq.n	800b248 <__d2b+0x76>
 800b1f8:	a802      	add	r0, sp, #8
 800b1fa:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b1fe:	f7ff fe00 	bl	800ae02 <__lo0bits>
 800b202:	9900      	ldr	r1, [sp, #0]
 800b204:	b1f0      	cbz	r0, 800b244 <__d2b+0x72>
 800b206:	9a01      	ldr	r2, [sp, #4]
 800b208:	f1c0 0320 	rsb	r3, r0, #32
 800b20c:	fa02 f303 	lsl.w	r3, r2, r3
 800b210:	430b      	orrs	r3, r1
 800b212:	40c2      	lsrs	r2, r0
 800b214:	617b      	str	r3, [r7, #20]
 800b216:	9201      	str	r2, [sp, #4]
 800b218:	9b01      	ldr	r3, [sp, #4]
 800b21a:	61bb      	str	r3, [r7, #24]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	bf14      	ite	ne
 800b220:	2102      	movne	r1, #2
 800b222:	2101      	moveq	r1, #1
 800b224:	6139      	str	r1, [r7, #16]
 800b226:	b1c4      	cbz	r4, 800b25a <__d2b+0x88>
 800b228:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b22c:	4404      	add	r4, r0
 800b22e:	6034      	str	r4, [r6, #0]
 800b230:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b234:	6028      	str	r0, [r5, #0]
 800b236:	4638      	mov	r0, r7
 800b238:	b003      	add	sp, #12
 800b23a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b23e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b242:	e7d5      	b.n	800b1f0 <__d2b+0x1e>
 800b244:	6179      	str	r1, [r7, #20]
 800b246:	e7e7      	b.n	800b218 <__d2b+0x46>
 800b248:	a801      	add	r0, sp, #4
 800b24a:	f7ff fdda 	bl	800ae02 <__lo0bits>
 800b24e:	9b01      	ldr	r3, [sp, #4]
 800b250:	617b      	str	r3, [r7, #20]
 800b252:	2101      	movs	r1, #1
 800b254:	6139      	str	r1, [r7, #16]
 800b256:	3020      	adds	r0, #32
 800b258:	e7e5      	b.n	800b226 <__d2b+0x54>
 800b25a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b25e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b262:	6030      	str	r0, [r6, #0]
 800b264:	6918      	ldr	r0, [r3, #16]
 800b266:	f7ff fdad 	bl	800adc4 <__hi0bits>
 800b26a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b26e:	e7e1      	b.n	800b234 <__d2b+0x62>

0800b270 <_calloc_r>:
 800b270:	b538      	push	{r3, r4, r5, lr}
 800b272:	fb02 f401 	mul.w	r4, r2, r1
 800b276:	4621      	mov	r1, r4
 800b278:	f7fc fdba 	bl	8007df0 <_malloc_r>
 800b27c:	4605      	mov	r5, r0
 800b27e:	b118      	cbz	r0, 800b288 <_calloc_r+0x18>
 800b280:	4622      	mov	r2, r4
 800b282:	2100      	movs	r1, #0
 800b284:	f7fc fac9 	bl	800781a <memset>
 800b288:	4628      	mov	r0, r5
 800b28a:	bd38      	pop	{r3, r4, r5, pc}

0800b28c <__ssputs_r>:
 800b28c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b290:	688e      	ldr	r6, [r1, #8]
 800b292:	429e      	cmp	r6, r3
 800b294:	4682      	mov	sl, r0
 800b296:	460c      	mov	r4, r1
 800b298:	4690      	mov	r8, r2
 800b29a:	4699      	mov	r9, r3
 800b29c:	d837      	bhi.n	800b30e <__ssputs_r+0x82>
 800b29e:	898a      	ldrh	r2, [r1, #12]
 800b2a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b2a4:	d031      	beq.n	800b30a <__ssputs_r+0x7e>
 800b2a6:	6825      	ldr	r5, [r4, #0]
 800b2a8:	6909      	ldr	r1, [r1, #16]
 800b2aa:	1a6f      	subs	r7, r5, r1
 800b2ac:	6965      	ldr	r5, [r4, #20]
 800b2ae:	2302      	movs	r3, #2
 800b2b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b2b4:	fb95 f5f3 	sdiv	r5, r5, r3
 800b2b8:	f109 0301 	add.w	r3, r9, #1
 800b2bc:	443b      	add	r3, r7
 800b2be:	429d      	cmp	r5, r3
 800b2c0:	bf38      	it	cc
 800b2c2:	461d      	movcc	r5, r3
 800b2c4:	0553      	lsls	r3, r2, #21
 800b2c6:	d530      	bpl.n	800b32a <__ssputs_r+0x9e>
 800b2c8:	4629      	mov	r1, r5
 800b2ca:	f7fc fd91 	bl	8007df0 <_malloc_r>
 800b2ce:	4606      	mov	r6, r0
 800b2d0:	b950      	cbnz	r0, 800b2e8 <__ssputs_r+0x5c>
 800b2d2:	230c      	movs	r3, #12
 800b2d4:	f8ca 3000 	str.w	r3, [sl]
 800b2d8:	89a3      	ldrh	r3, [r4, #12]
 800b2da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2de:	81a3      	strh	r3, [r4, #12]
 800b2e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b2e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2e8:	463a      	mov	r2, r7
 800b2ea:	6921      	ldr	r1, [r4, #16]
 800b2ec:	f7fc fa8a 	bl	8007804 <memcpy>
 800b2f0:	89a3      	ldrh	r3, [r4, #12]
 800b2f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b2f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2fa:	81a3      	strh	r3, [r4, #12]
 800b2fc:	6126      	str	r6, [r4, #16]
 800b2fe:	6165      	str	r5, [r4, #20]
 800b300:	443e      	add	r6, r7
 800b302:	1bed      	subs	r5, r5, r7
 800b304:	6026      	str	r6, [r4, #0]
 800b306:	60a5      	str	r5, [r4, #8]
 800b308:	464e      	mov	r6, r9
 800b30a:	454e      	cmp	r6, r9
 800b30c:	d900      	bls.n	800b310 <__ssputs_r+0x84>
 800b30e:	464e      	mov	r6, r9
 800b310:	4632      	mov	r2, r6
 800b312:	4641      	mov	r1, r8
 800b314:	6820      	ldr	r0, [r4, #0]
 800b316:	f000 f99c 	bl	800b652 <memmove>
 800b31a:	68a3      	ldr	r3, [r4, #8]
 800b31c:	1b9b      	subs	r3, r3, r6
 800b31e:	60a3      	str	r3, [r4, #8]
 800b320:	6823      	ldr	r3, [r4, #0]
 800b322:	441e      	add	r6, r3
 800b324:	6026      	str	r6, [r4, #0]
 800b326:	2000      	movs	r0, #0
 800b328:	e7dc      	b.n	800b2e4 <__ssputs_r+0x58>
 800b32a:	462a      	mov	r2, r5
 800b32c:	f000 f9aa 	bl	800b684 <_realloc_r>
 800b330:	4606      	mov	r6, r0
 800b332:	2800      	cmp	r0, #0
 800b334:	d1e2      	bne.n	800b2fc <__ssputs_r+0x70>
 800b336:	6921      	ldr	r1, [r4, #16]
 800b338:	4650      	mov	r0, sl
 800b33a:	f7fc fd0b 	bl	8007d54 <_free_r>
 800b33e:	e7c8      	b.n	800b2d2 <__ssputs_r+0x46>

0800b340 <_svfiprintf_r>:
 800b340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b344:	461d      	mov	r5, r3
 800b346:	898b      	ldrh	r3, [r1, #12]
 800b348:	061f      	lsls	r7, r3, #24
 800b34a:	b09d      	sub	sp, #116	; 0x74
 800b34c:	4680      	mov	r8, r0
 800b34e:	460c      	mov	r4, r1
 800b350:	4616      	mov	r6, r2
 800b352:	d50f      	bpl.n	800b374 <_svfiprintf_r+0x34>
 800b354:	690b      	ldr	r3, [r1, #16]
 800b356:	b96b      	cbnz	r3, 800b374 <_svfiprintf_r+0x34>
 800b358:	2140      	movs	r1, #64	; 0x40
 800b35a:	f7fc fd49 	bl	8007df0 <_malloc_r>
 800b35e:	6020      	str	r0, [r4, #0]
 800b360:	6120      	str	r0, [r4, #16]
 800b362:	b928      	cbnz	r0, 800b370 <_svfiprintf_r+0x30>
 800b364:	230c      	movs	r3, #12
 800b366:	f8c8 3000 	str.w	r3, [r8]
 800b36a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b36e:	e0c8      	b.n	800b502 <_svfiprintf_r+0x1c2>
 800b370:	2340      	movs	r3, #64	; 0x40
 800b372:	6163      	str	r3, [r4, #20]
 800b374:	2300      	movs	r3, #0
 800b376:	9309      	str	r3, [sp, #36]	; 0x24
 800b378:	2320      	movs	r3, #32
 800b37a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b37e:	2330      	movs	r3, #48	; 0x30
 800b380:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b384:	9503      	str	r5, [sp, #12]
 800b386:	f04f 0b01 	mov.w	fp, #1
 800b38a:	4637      	mov	r7, r6
 800b38c:	463d      	mov	r5, r7
 800b38e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b392:	b10b      	cbz	r3, 800b398 <_svfiprintf_r+0x58>
 800b394:	2b25      	cmp	r3, #37	; 0x25
 800b396:	d13e      	bne.n	800b416 <_svfiprintf_r+0xd6>
 800b398:	ebb7 0a06 	subs.w	sl, r7, r6
 800b39c:	d00b      	beq.n	800b3b6 <_svfiprintf_r+0x76>
 800b39e:	4653      	mov	r3, sl
 800b3a0:	4632      	mov	r2, r6
 800b3a2:	4621      	mov	r1, r4
 800b3a4:	4640      	mov	r0, r8
 800b3a6:	f7ff ff71 	bl	800b28c <__ssputs_r>
 800b3aa:	3001      	adds	r0, #1
 800b3ac:	f000 80a4 	beq.w	800b4f8 <_svfiprintf_r+0x1b8>
 800b3b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3b2:	4453      	add	r3, sl
 800b3b4:	9309      	str	r3, [sp, #36]	; 0x24
 800b3b6:	783b      	ldrb	r3, [r7, #0]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	f000 809d 	beq.w	800b4f8 <_svfiprintf_r+0x1b8>
 800b3be:	2300      	movs	r3, #0
 800b3c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b3c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3c8:	9304      	str	r3, [sp, #16]
 800b3ca:	9307      	str	r3, [sp, #28]
 800b3cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b3d0:	931a      	str	r3, [sp, #104]	; 0x68
 800b3d2:	462f      	mov	r7, r5
 800b3d4:	2205      	movs	r2, #5
 800b3d6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b3da:	4850      	ldr	r0, [pc, #320]	; (800b51c <_svfiprintf_r+0x1dc>)
 800b3dc:	f7f4 ff10 	bl	8000200 <memchr>
 800b3e0:	9b04      	ldr	r3, [sp, #16]
 800b3e2:	b9d0      	cbnz	r0, 800b41a <_svfiprintf_r+0xda>
 800b3e4:	06d9      	lsls	r1, r3, #27
 800b3e6:	bf44      	itt	mi
 800b3e8:	2220      	movmi	r2, #32
 800b3ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b3ee:	071a      	lsls	r2, r3, #28
 800b3f0:	bf44      	itt	mi
 800b3f2:	222b      	movmi	r2, #43	; 0x2b
 800b3f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b3f8:	782a      	ldrb	r2, [r5, #0]
 800b3fa:	2a2a      	cmp	r2, #42	; 0x2a
 800b3fc:	d015      	beq.n	800b42a <_svfiprintf_r+0xea>
 800b3fe:	9a07      	ldr	r2, [sp, #28]
 800b400:	462f      	mov	r7, r5
 800b402:	2000      	movs	r0, #0
 800b404:	250a      	movs	r5, #10
 800b406:	4639      	mov	r1, r7
 800b408:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b40c:	3b30      	subs	r3, #48	; 0x30
 800b40e:	2b09      	cmp	r3, #9
 800b410:	d94d      	bls.n	800b4ae <_svfiprintf_r+0x16e>
 800b412:	b1b8      	cbz	r0, 800b444 <_svfiprintf_r+0x104>
 800b414:	e00f      	b.n	800b436 <_svfiprintf_r+0xf6>
 800b416:	462f      	mov	r7, r5
 800b418:	e7b8      	b.n	800b38c <_svfiprintf_r+0x4c>
 800b41a:	4a40      	ldr	r2, [pc, #256]	; (800b51c <_svfiprintf_r+0x1dc>)
 800b41c:	1a80      	subs	r0, r0, r2
 800b41e:	fa0b f000 	lsl.w	r0, fp, r0
 800b422:	4318      	orrs	r0, r3
 800b424:	9004      	str	r0, [sp, #16]
 800b426:	463d      	mov	r5, r7
 800b428:	e7d3      	b.n	800b3d2 <_svfiprintf_r+0x92>
 800b42a:	9a03      	ldr	r2, [sp, #12]
 800b42c:	1d11      	adds	r1, r2, #4
 800b42e:	6812      	ldr	r2, [r2, #0]
 800b430:	9103      	str	r1, [sp, #12]
 800b432:	2a00      	cmp	r2, #0
 800b434:	db01      	blt.n	800b43a <_svfiprintf_r+0xfa>
 800b436:	9207      	str	r2, [sp, #28]
 800b438:	e004      	b.n	800b444 <_svfiprintf_r+0x104>
 800b43a:	4252      	negs	r2, r2
 800b43c:	f043 0302 	orr.w	r3, r3, #2
 800b440:	9207      	str	r2, [sp, #28]
 800b442:	9304      	str	r3, [sp, #16]
 800b444:	783b      	ldrb	r3, [r7, #0]
 800b446:	2b2e      	cmp	r3, #46	; 0x2e
 800b448:	d10c      	bne.n	800b464 <_svfiprintf_r+0x124>
 800b44a:	787b      	ldrb	r3, [r7, #1]
 800b44c:	2b2a      	cmp	r3, #42	; 0x2a
 800b44e:	d133      	bne.n	800b4b8 <_svfiprintf_r+0x178>
 800b450:	9b03      	ldr	r3, [sp, #12]
 800b452:	1d1a      	adds	r2, r3, #4
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	9203      	str	r2, [sp, #12]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	bfb8      	it	lt
 800b45c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b460:	3702      	adds	r7, #2
 800b462:	9305      	str	r3, [sp, #20]
 800b464:	4d2e      	ldr	r5, [pc, #184]	; (800b520 <_svfiprintf_r+0x1e0>)
 800b466:	7839      	ldrb	r1, [r7, #0]
 800b468:	2203      	movs	r2, #3
 800b46a:	4628      	mov	r0, r5
 800b46c:	f7f4 fec8 	bl	8000200 <memchr>
 800b470:	b138      	cbz	r0, 800b482 <_svfiprintf_r+0x142>
 800b472:	2340      	movs	r3, #64	; 0x40
 800b474:	1b40      	subs	r0, r0, r5
 800b476:	fa03 f000 	lsl.w	r0, r3, r0
 800b47a:	9b04      	ldr	r3, [sp, #16]
 800b47c:	4303      	orrs	r3, r0
 800b47e:	3701      	adds	r7, #1
 800b480:	9304      	str	r3, [sp, #16]
 800b482:	7839      	ldrb	r1, [r7, #0]
 800b484:	4827      	ldr	r0, [pc, #156]	; (800b524 <_svfiprintf_r+0x1e4>)
 800b486:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b48a:	2206      	movs	r2, #6
 800b48c:	1c7e      	adds	r6, r7, #1
 800b48e:	f7f4 feb7 	bl	8000200 <memchr>
 800b492:	2800      	cmp	r0, #0
 800b494:	d038      	beq.n	800b508 <_svfiprintf_r+0x1c8>
 800b496:	4b24      	ldr	r3, [pc, #144]	; (800b528 <_svfiprintf_r+0x1e8>)
 800b498:	bb13      	cbnz	r3, 800b4e0 <_svfiprintf_r+0x1a0>
 800b49a:	9b03      	ldr	r3, [sp, #12]
 800b49c:	3307      	adds	r3, #7
 800b49e:	f023 0307 	bic.w	r3, r3, #7
 800b4a2:	3308      	adds	r3, #8
 800b4a4:	9303      	str	r3, [sp, #12]
 800b4a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4a8:	444b      	add	r3, r9
 800b4aa:	9309      	str	r3, [sp, #36]	; 0x24
 800b4ac:	e76d      	b.n	800b38a <_svfiprintf_r+0x4a>
 800b4ae:	fb05 3202 	mla	r2, r5, r2, r3
 800b4b2:	2001      	movs	r0, #1
 800b4b4:	460f      	mov	r7, r1
 800b4b6:	e7a6      	b.n	800b406 <_svfiprintf_r+0xc6>
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	3701      	adds	r7, #1
 800b4bc:	9305      	str	r3, [sp, #20]
 800b4be:	4619      	mov	r1, r3
 800b4c0:	250a      	movs	r5, #10
 800b4c2:	4638      	mov	r0, r7
 800b4c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4c8:	3a30      	subs	r2, #48	; 0x30
 800b4ca:	2a09      	cmp	r2, #9
 800b4cc:	d903      	bls.n	800b4d6 <_svfiprintf_r+0x196>
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d0c8      	beq.n	800b464 <_svfiprintf_r+0x124>
 800b4d2:	9105      	str	r1, [sp, #20]
 800b4d4:	e7c6      	b.n	800b464 <_svfiprintf_r+0x124>
 800b4d6:	fb05 2101 	mla	r1, r5, r1, r2
 800b4da:	2301      	movs	r3, #1
 800b4dc:	4607      	mov	r7, r0
 800b4de:	e7f0      	b.n	800b4c2 <_svfiprintf_r+0x182>
 800b4e0:	ab03      	add	r3, sp, #12
 800b4e2:	9300      	str	r3, [sp, #0]
 800b4e4:	4622      	mov	r2, r4
 800b4e6:	4b11      	ldr	r3, [pc, #68]	; (800b52c <_svfiprintf_r+0x1ec>)
 800b4e8:	a904      	add	r1, sp, #16
 800b4ea:	4640      	mov	r0, r8
 800b4ec:	f7fc fd6e 	bl	8007fcc <_printf_float>
 800b4f0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b4f4:	4681      	mov	r9, r0
 800b4f6:	d1d6      	bne.n	800b4a6 <_svfiprintf_r+0x166>
 800b4f8:	89a3      	ldrh	r3, [r4, #12]
 800b4fa:	065b      	lsls	r3, r3, #25
 800b4fc:	f53f af35 	bmi.w	800b36a <_svfiprintf_r+0x2a>
 800b500:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b502:	b01d      	add	sp, #116	; 0x74
 800b504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b508:	ab03      	add	r3, sp, #12
 800b50a:	9300      	str	r3, [sp, #0]
 800b50c:	4622      	mov	r2, r4
 800b50e:	4b07      	ldr	r3, [pc, #28]	; (800b52c <_svfiprintf_r+0x1ec>)
 800b510:	a904      	add	r1, sp, #16
 800b512:	4640      	mov	r0, r8
 800b514:	f7fd f810 	bl	8008538 <_printf_i>
 800b518:	e7ea      	b.n	800b4f0 <_svfiprintf_r+0x1b0>
 800b51a:	bf00      	nop
 800b51c:	08018524 	.word	0x08018524
 800b520:	0801852a 	.word	0x0801852a
 800b524:	0801852e 	.word	0x0801852e
 800b528:	08007fcd 	.word	0x08007fcd
 800b52c:	0800b28d 	.word	0x0800b28d

0800b530 <_read_r>:
 800b530:	b538      	push	{r3, r4, r5, lr}
 800b532:	4c07      	ldr	r4, [pc, #28]	; (800b550 <_read_r+0x20>)
 800b534:	4605      	mov	r5, r0
 800b536:	4608      	mov	r0, r1
 800b538:	4611      	mov	r1, r2
 800b53a:	2200      	movs	r2, #0
 800b53c:	6022      	str	r2, [r4, #0]
 800b53e:	461a      	mov	r2, r3
 800b540:	f7f6 fd2e 	bl	8001fa0 <_read>
 800b544:	1c43      	adds	r3, r0, #1
 800b546:	d102      	bne.n	800b54e <_read_r+0x1e>
 800b548:	6823      	ldr	r3, [r4, #0]
 800b54a:	b103      	cbz	r3, 800b54e <_read_r+0x1e>
 800b54c:	602b      	str	r3, [r5, #0]
 800b54e:	bd38      	pop	{r3, r4, r5, pc}
 800b550:	20000470 	.word	0x20000470

0800b554 <sniprintf>:
 800b554:	b40c      	push	{r2, r3}
 800b556:	b530      	push	{r4, r5, lr}
 800b558:	4b17      	ldr	r3, [pc, #92]	; (800b5b8 <sniprintf+0x64>)
 800b55a:	1e0c      	subs	r4, r1, #0
 800b55c:	b09d      	sub	sp, #116	; 0x74
 800b55e:	681d      	ldr	r5, [r3, #0]
 800b560:	da08      	bge.n	800b574 <sniprintf+0x20>
 800b562:	238b      	movs	r3, #139	; 0x8b
 800b564:	602b      	str	r3, [r5, #0]
 800b566:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b56a:	b01d      	add	sp, #116	; 0x74
 800b56c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b570:	b002      	add	sp, #8
 800b572:	4770      	bx	lr
 800b574:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b578:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b57c:	bf14      	ite	ne
 800b57e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800b582:	4623      	moveq	r3, r4
 800b584:	9304      	str	r3, [sp, #16]
 800b586:	9307      	str	r3, [sp, #28]
 800b588:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b58c:	9002      	str	r0, [sp, #8]
 800b58e:	9006      	str	r0, [sp, #24]
 800b590:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b594:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b596:	ab21      	add	r3, sp, #132	; 0x84
 800b598:	a902      	add	r1, sp, #8
 800b59a:	4628      	mov	r0, r5
 800b59c:	9301      	str	r3, [sp, #4]
 800b59e:	f7ff fecf 	bl	800b340 <_svfiprintf_r>
 800b5a2:	1c43      	adds	r3, r0, #1
 800b5a4:	bfbc      	itt	lt
 800b5a6:	238b      	movlt	r3, #139	; 0x8b
 800b5a8:	602b      	strlt	r3, [r5, #0]
 800b5aa:	2c00      	cmp	r4, #0
 800b5ac:	d0dd      	beq.n	800b56a <sniprintf+0x16>
 800b5ae:	9b02      	ldr	r3, [sp, #8]
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	701a      	strb	r2, [r3, #0]
 800b5b4:	e7d9      	b.n	800b56a <sniprintf+0x16>
 800b5b6:	bf00      	nop
 800b5b8:	20000094 	.word	0x20000094

0800b5bc <siscanf>:
 800b5bc:	b40e      	push	{r1, r2, r3}
 800b5be:	b530      	push	{r4, r5, lr}
 800b5c0:	b09c      	sub	sp, #112	; 0x70
 800b5c2:	ac1f      	add	r4, sp, #124	; 0x7c
 800b5c4:	f44f 7201 	mov.w	r2, #516	; 0x204
 800b5c8:	f854 5b04 	ldr.w	r5, [r4], #4
 800b5cc:	f8ad 2014 	strh.w	r2, [sp, #20]
 800b5d0:	9002      	str	r0, [sp, #8]
 800b5d2:	9006      	str	r0, [sp, #24]
 800b5d4:	f7f4 fe06 	bl	80001e4 <strlen>
 800b5d8:	4b0b      	ldr	r3, [pc, #44]	; (800b608 <siscanf+0x4c>)
 800b5da:	9003      	str	r0, [sp, #12]
 800b5dc:	9007      	str	r0, [sp, #28]
 800b5de:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5e0:	480a      	ldr	r0, [pc, #40]	; (800b60c <siscanf+0x50>)
 800b5e2:	9401      	str	r4, [sp, #4]
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5e8:	9314      	str	r3, [sp, #80]	; 0x50
 800b5ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b5ee:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b5f2:	462a      	mov	r2, r5
 800b5f4:	4623      	mov	r3, r4
 800b5f6:	a902      	add	r1, sp, #8
 800b5f8:	6800      	ldr	r0, [r0, #0]
 800b5fa:	f000 f8c3 	bl	800b784 <__ssvfiscanf_r>
 800b5fe:	b01c      	add	sp, #112	; 0x70
 800b600:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b604:	b003      	add	sp, #12
 800b606:	4770      	bx	lr
 800b608:	080089e7 	.word	0x080089e7
 800b60c:	20000094 	.word	0x20000094

0800b610 <strncmp>:
 800b610:	b510      	push	{r4, lr}
 800b612:	b16a      	cbz	r2, 800b630 <strncmp+0x20>
 800b614:	3901      	subs	r1, #1
 800b616:	1884      	adds	r4, r0, r2
 800b618:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b61c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b620:	4293      	cmp	r3, r2
 800b622:	d103      	bne.n	800b62c <strncmp+0x1c>
 800b624:	42a0      	cmp	r0, r4
 800b626:	d001      	beq.n	800b62c <strncmp+0x1c>
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d1f5      	bne.n	800b618 <strncmp+0x8>
 800b62c:	1a98      	subs	r0, r3, r2
 800b62e:	bd10      	pop	{r4, pc}
 800b630:	4610      	mov	r0, r2
 800b632:	e7fc      	b.n	800b62e <strncmp+0x1e>

0800b634 <__ascii_wctomb>:
 800b634:	b149      	cbz	r1, 800b64a <__ascii_wctomb+0x16>
 800b636:	2aff      	cmp	r2, #255	; 0xff
 800b638:	bf85      	ittet	hi
 800b63a:	238a      	movhi	r3, #138	; 0x8a
 800b63c:	6003      	strhi	r3, [r0, #0]
 800b63e:	700a      	strbls	r2, [r1, #0]
 800b640:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b644:	bf98      	it	ls
 800b646:	2001      	movls	r0, #1
 800b648:	4770      	bx	lr
 800b64a:	4608      	mov	r0, r1
 800b64c:	4770      	bx	lr

0800b64e <__env_lock>:
 800b64e:	4770      	bx	lr

0800b650 <__env_unlock>:
 800b650:	4770      	bx	lr

0800b652 <memmove>:
 800b652:	4288      	cmp	r0, r1
 800b654:	b510      	push	{r4, lr}
 800b656:	eb01 0302 	add.w	r3, r1, r2
 800b65a:	d807      	bhi.n	800b66c <memmove+0x1a>
 800b65c:	1e42      	subs	r2, r0, #1
 800b65e:	4299      	cmp	r1, r3
 800b660:	d00a      	beq.n	800b678 <memmove+0x26>
 800b662:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b666:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b66a:	e7f8      	b.n	800b65e <memmove+0xc>
 800b66c:	4283      	cmp	r3, r0
 800b66e:	d9f5      	bls.n	800b65c <memmove+0xa>
 800b670:	1881      	adds	r1, r0, r2
 800b672:	1ad2      	subs	r2, r2, r3
 800b674:	42d3      	cmn	r3, r2
 800b676:	d100      	bne.n	800b67a <memmove+0x28>
 800b678:	bd10      	pop	{r4, pc}
 800b67a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b67e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b682:	e7f7      	b.n	800b674 <memmove+0x22>

0800b684 <_realloc_r>:
 800b684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b686:	4607      	mov	r7, r0
 800b688:	4614      	mov	r4, r2
 800b68a:	460e      	mov	r6, r1
 800b68c:	b921      	cbnz	r1, 800b698 <_realloc_r+0x14>
 800b68e:	4611      	mov	r1, r2
 800b690:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b694:	f7fc bbac 	b.w	8007df0 <_malloc_r>
 800b698:	b922      	cbnz	r2, 800b6a4 <_realloc_r+0x20>
 800b69a:	f7fc fb5b 	bl	8007d54 <_free_r>
 800b69e:	4625      	mov	r5, r4
 800b6a0:	4628      	mov	r0, r5
 800b6a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6a4:	f000 fc10 	bl	800bec8 <_malloc_usable_size_r>
 800b6a8:	42a0      	cmp	r0, r4
 800b6aa:	d20f      	bcs.n	800b6cc <_realloc_r+0x48>
 800b6ac:	4621      	mov	r1, r4
 800b6ae:	4638      	mov	r0, r7
 800b6b0:	f7fc fb9e 	bl	8007df0 <_malloc_r>
 800b6b4:	4605      	mov	r5, r0
 800b6b6:	2800      	cmp	r0, #0
 800b6b8:	d0f2      	beq.n	800b6a0 <_realloc_r+0x1c>
 800b6ba:	4631      	mov	r1, r6
 800b6bc:	4622      	mov	r2, r4
 800b6be:	f7fc f8a1 	bl	8007804 <memcpy>
 800b6c2:	4631      	mov	r1, r6
 800b6c4:	4638      	mov	r0, r7
 800b6c6:	f7fc fb45 	bl	8007d54 <_free_r>
 800b6ca:	e7e9      	b.n	800b6a0 <_realloc_r+0x1c>
 800b6cc:	4635      	mov	r5, r6
 800b6ce:	e7e7      	b.n	800b6a0 <_realloc_r+0x1c>

0800b6d0 <_sungetc_r>:
 800b6d0:	b538      	push	{r3, r4, r5, lr}
 800b6d2:	1c4b      	adds	r3, r1, #1
 800b6d4:	4614      	mov	r4, r2
 800b6d6:	d103      	bne.n	800b6e0 <_sungetc_r+0x10>
 800b6d8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b6dc:	4628      	mov	r0, r5
 800b6de:	bd38      	pop	{r3, r4, r5, pc}
 800b6e0:	8993      	ldrh	r3, [r2, #12]
 800b6e2:	f023 0320 	bic.w	r3, r3, #32
 800b6e6:	8193      	strh	r3, [r2, #12]
 800b6e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b6ea:	6852      	ldr	r2, [r2, #4]
 800b6ec:	b2cd      	uxtb	r5, r1
 800b6ee:	b18b      	cbz	r3, 800b714 <_sungetc_r+0x44>
 800b6f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	dd08      	ble.n	800b708 <_sungetc_r+0x38>
 800b6f6:	6823      	ldr	r3, [r4, #0]
 800b6f8:	1e5a      	subs	r2, r3, #1
 800b6fa:	6022      	str	r2, [r4, #0]
 800b6fc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b700:	6863      	ldr	r3, [r4, #4]
 800b702:	3301      	adds	r3, #1
 800b704:	6063      	str	r3, [r4, #4]
 800b706:	e7e9      	b.n	800b6dc <_sungetc_r+0xc>
 800b708:	4621      	mov	r1, r4
 800b70a:	f000 fba3 	bl	800be54 <__submore>
 800b70e:	2800      	cmp	r0, #0
 800b710:	d0f1      	beq.n	800b6f6 <_sungetc_r+0x26>
 800b712:	e7e1      	b.n	800b6d8 <_sungetc_r+0x8>
 800b714:	6921      	ldr	r1, [r4, #16]
 800b716:	6823      	ldr	r3, [r4, #0]
 800b718:	b151      	cbz	r1, 800b730 <_sungetc_r+0x60>
 800b71a:	4299      	cmp	r1, r3
 800b71c:	d208      	bcs.n	800b730 <_sungetc_r+0x60>
 800b71e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b722:	42a9      	cmp	r1, r5
 800b724:	d104      	bne.n	800b730 <_sungetc_r+0x60>
 800b726:	3b01      	subs	r3, #1
 800b728:	3201      	adds	r2, #1
 800b72a:	6023      	str	r3, [r4, #0]
 800b72c:	6062      	str	r2, [r4, #4]
 800b72e:	e7d5      	b.n	800b6dc <_sungetc_r+0xc>
 800b730:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b734:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b738:	6363      	str	r3, [r4, #52]	; 0x34
 800b73a:	2303      	movs	r3, #3
 800b73c:	63a3      	str	r3, [r4, #56]	; 0x38
 800b73e:	4623      	mov	r3, r4
 800b740:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b744:	6023      	str	r3, [r4, #0]
 800b746:	2301      	movs	r3, #1
 800b748:	e7dc      	b.n	800b704 <_sungetc_r+0x34>

0800b74a <__ssrefill_r>:
 800b74a:	b510      	push	{r4, lr}
 800b74c:	460c      	mov	r4, r1
 800b74e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b750:	b169      	cbz	r1, 800b76e <__ssrefill_r+0x24>
 800b752:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b756:	4299      	cmp	r1, r3
 800b758:	d001      	beq.n	800b75e <__ssrefill_r+0x14>
 800b75a:	f7fc fafb 	bl	8007d54 <_free_r>
 800b75e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b760:	6063      	str	r3, [r4, #4]
 800b762:	2000      	movs	r0, #0
 800b764:	6360      	str	r0, [r4, #52]	; 0x34
 800b766:	b113      	cbz	r3, 800b76e <__ssrefill_r+0x24>
 800b768:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b76a:	6023      	str	r3, [r4, #0]
 800b76c:	bd10      	pop	{r4, pc}
 800b76e:	6923      	ldr	r3, [r4, #16]
 800b770:	6023      	str	r3, [r4, #0]
 800b772:	2300      	movs	r3, #0
 800b774:	6063      	str	r3, [r4, #4]
 800b776:	89a3      	ldrh	r3, [r4, #12]
 800b778:	f043 0320 	orr.w	r3, r3, #32
 800b77c:	81a3      	strh	r3, [r4, #12]
 800b77e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b782:	e7f3      	b.n	800b76c <__ssrefill_r+0x22>

0800b784 <__ssvfiscanf_r>:
 800b784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b788:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800b78c:	460c      	mov	r4, r1
 800b78e:	2100      	movs	r1, #0
 800b790:	9144      	str	r1, [sp, #272]	; 0x110
 800b792:	9145      	str	r1, [sp, #276]	; 0x114
 800b794:	499f      	ldr	r1, [pc, #636]	; (800ba14 <__ssvfiscanf_r+0x290>)
 800b796:	91a0      	str	r1, [sp, #640]	; 0x280
 800b798:	f10d 0804 	add.w	r8, sp, #4
 800b79c:	499e      	ldr	r1, [pc, #632]	; (800ba18 <__ssvfiscanf_r+0x294>)
 800b79e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800ba1c <__ssvfiscanf_r+0x298>
 800b7a2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b7a6:	4606      	mov	r6, r0
 800b7a8:	4692      	mov	sl, r2
 800b7aa:	91a1      	str	r1, [sp, #644]	; 0x284
 800b7ac:	9300      	str	r3, [sp, #0]
 800b7ae:	270a      	movs	r7, #10
 800b7b0:	f89a 3000 	ldrb.w	r3, [sl]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	f000 812a 	beq.w	800ba0e <__ssvfiscanf_r+0x28a>
 800b7ba:	4655      	mov	r5, sl
 800b7bc:	f7ff fa3a 	bl	800ac34 <__locale_ctype_ptr>
 800b7c0:	f815 bb01 	ldrb.w	fp, [r5], #1
 800b7c4:	4458      	add	r0, fp
 800b7c6:	7843      	ldrb	r3, [r0, #1]
 800b7c8:	f013 0308 	ands.w	r3, r3, #8
 800b7cc:	d01c      	beq.n	800b808 <__ssvfiscanf_r+0x84>
 800b7ce:	6863      	ldr	r3, [r4, #4]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	dd12      	ble.n	800b7fa <__ssvfiscanf_r+0x76>
 800b7d4:	f7ff fa2e 	bl	800ac34 <__locale_ctype_ptr>
 800b7d8:	6823      	ldr	r3, [r4, #0]
 800b7da:	781a      	ldrb	r2, [r3, #0]
 800b7dc:	4410      	add	r0, r2
 800b7de:	7842      	ldrb	r2, [r0, #1]
 800b7e0:	0712      	lsls	r2, r2, #28
 800b7e2:	d401      	bmi.n	800b7e8 <__ssvfiscanf_r+0x64>
 800b7e4:	46aa      	mov	sl, r5
 800b7e6:	e7e3      	b.n	800b7b0 <__ssvfiscanf_r+0x2c>
 800b7e8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b7ea:	3201      	adds	r2, #1
 800b7ec:	9245      	str	r2, [sp, #276]	; 0x114
 800b7ee:	6862      	ldr	r2, [r4, #4]
 800b7f0:	3301      	adds	r3, #1
 800b7f2:	3a01      	subs	r2, #1
 800b7f4:	6062      	str	r2, [r4, #4]
 800b7f6:	6023      	str	r3, [r4, #0]
 800b7f8:	e7e9      	b.n	800b7ce <__ssvfiscanf_r+0x4a>
 800b7fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b7fc:	4621      	mov	r1, r4
 800b7fe:	4630      	mov	r0, r6
 800b800:	4798      	blx	r3
 800b802:	2800      	cmp	r0, #0
 800b804:	d0e6      	beq.n	800b7d4 <__ssvfiscanf_r+0x50>
 800b806:	e7ed      	b.n	800b7e4 <__ssvfiscanf_r+0x60>
 800b808:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800b80c:	f040 8082 	bne.w	800b914 <__ssvfiscanf_r+0x190>
 800b810:	9343      	str	r3, [sp, #268]	; 0x10c
 800b812:	9341      	str	r3, [sp, #260]	; 0x104
 800b814:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800b818:	2b2a      	cmp	r3, #42	; 0x2a
 800b81a:	d103      	bne.n	800b824 <__ssvfiscanf_r+0xa0>
 800b81c:	2310      	movs	r3, #16
 800b81e:	9341      	str	r3, [sp, #260]	; 0x104
 800b820:	f10a 0502 	add.w	r5, sl, #2
 800b824:	46aa      	mov	sl, r5
 800b826:	f815 1b01 	ldrb.w	r1, [r5], #1
 800b82a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b82e:	2a09      	cmp	r2, #9
 800b830:	d922      	bls.n	800b878 <__ssvfiscanf_r+0xf4>
 800b832:	2203      	movs	r2, #3
 800b834:	4879      	ldr	r0, [pc, #484]	; (800ba1c <__ssvfiscanf_r+0x298>)
 800b836:	f7f4 fce3 	bl	8000200 <memchr>
 800b83a:	b138      	cbz	r0, 800b84c <__ssvfiscanf_r+0xc8>
 800b83c:	eba0 0309 	sub.w	r3, r0, r9
 800b840:	2001      	movs	r0, #1
 800b842:	4098      	lsls	r0, r3
 800b844:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b846:	4318      	orrs	r0, r3
 800b848:	9041      	str	r0, [sp, #260]	; 0x104
 800b84a:	46aa      	mov	sl, r5
 800b84c:	f89a 3000 	ldrb.w	r3, [sl]
 800b850:	2b67      	cmp	r3, #103	; 0x67
 800b852:	f10a 0501 	add.w	r5, sl, #1
 800b856:	d82b      	bhi.n	800b8b0 <__ssvfiscanf_r+0x12c>
 800b858:	2b65      	cmp	r3, #101	; 0x65
 800b85a:	f080 809f 	bcs.w	800b99c <__ssvfiscanf_r+0x218>
 800b85e:	2b47      	cmp	r3, #71	; 0x47
 800b860:	d810      	bhi.n	800b884 <__ssvfiscanf_r+0x100>
 800b862:	2b45      	cmp	r3, #69	; 0x45
 800b864:	f080 809a 	bcs.w	800b99c <__ssvfiscanf_r+0x218>
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d06c      	beq.n	800b946 <__ssvfiscanf_r+0x1c2>
 800b86c:	2b25      	cmp	r3, #37	; 0x25
 800b86e:	d051      	beq.n	800b914 <__ssvfiscanf_r+0x190>
 800b870:	2303      	movs	r3, #3
 800b872:	9347      	str	r3, [sp, #284]	; 0x11c
 800b874:	9742      	str	r7, [sp, #264]	; 0x108
 800b876:	e027      	b.n	800b8c8 <__ssvfiscanf_r+0x144>
 800b878:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b87a:	fb07 1303 	mla	r3, r7, r3, r1
 800b87e:	3b30      	subs	r3, #48	; 0x30
 800b880:	9343      	str	r3, [sp, #268]	; 0x10c
 800b882:	e7cf      	b.n	800b824 <__ssvfiscanf_r+0xa0>
 800b884:	2b5b      	cmp	r3, #91	; 0x5b
 800b886:	d06a      	beq.n	800b95e <__ssvfiscanf_r+0x1da>
 800b888:	d80c      	bhi.n	800b8a4 <__ssvfiscanf_r+0x120>
 800b88a:	2b58      	cmp	r3, #88	; 0x58
 800b88c:	d1f0      	bne.n	800b870 <__ssvfiscanf_r+0xec>
 800b88e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b890:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b894:	9241      	str	r2, [sp, #260]	; 0x104
 800b896:	2210      	movs	r2, #16
 800b898:	9242      	str	r2, [sp, #264]	; 0x108
 800b89a:	2b6e      	cmp	r3, #110	; 0x6e
 800b89c:	bf8c      	ite	hi
 800b89e:	2304      	movhi	r3, #4
 800b8a0:	2303      	movls	r3, #3
 800b8a2:	e010      	b.n	800b8c6 <__ssvfiscanf_r+0x142>
 800b8a4:	2b63      	cmp	r3, #99	; 0x63
 800b8a6:	d065      	beq.n	800b974 <__ssvfiscanf_r+0x1f0>
 800b8a8:	2b64      	cmp	r3, #100	; 0x64
 800b8aa:	d1e1      	bne.n	800b870 <__ssvfiscanf_r+0xec>
 800b8ac:	9742      	str	r7, [sp, #264]	; 0x108
 800b8ae:	e7f4      	b.n	800b89a <__ssvfiscanf_r+0x116>
 800b8b0:	2b70      	cmp	r3, #112	; 0x70
 800b8b2:	d04b      	beq.n	800b94c <__ssvfiscanf_r+0x1c8>
 800b8b4:	d826      	bhi.n	800b904 <__ssvfiscanf_r+0x180>
 800b8b6:	2b6e      	cmp	r3, #110	; 0x6e
 800b8b8:	d062      	beq.n	800b980 <__ssvfiscanf_r+0x1fc>
 800b8ba:	d84c      	bhi.n	800b956 <__ssvfiscanf_r+0x1d2>
 800b8bc:	2b69      	cmp	r3, #105	; 0x69
 800b8be:	d1d7      	bne.n	800b870 <__ssvfiscanf_r+0xec>
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	9342      	str	r3, [sp, #264]	; 0x108
 800b8c4:	2303      	movs	r3, #3
 800b8c6:	9347      	str	r3, [sp, #284]	; 0x11c
 800b8c8:	6863      	ldr	r3, [r4, #4]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	dd68      	ble.n	800b9a0 <__ssvfiscanf_r+0x21c>
 800b8ce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b8d0:	0659      	lsls	r1, r3, #25
 800b8d2:	d407      	bmi.n	800b8e4 <__ssvfiscanf_r+0x160>
 800b8d4:	f7ff f9ae 	bl	800ac34 <__locale_ctype_ptr>
 800b8d8:	6823      	ldr	r3, [r4, #0]
 800b8da:	781a      	ldrb	r2, [r3, #0]
 800b8dc:	4410      	add	r0, r2
 800b8de:	7842      	ldrb	r2, [r0, #1]
 800b8e0:	0712      	lsls	r2, r2, #28
 800b8e2:	d464      	bmi.n	800b9ae <__ssvfiscanf_r+0x22a>
 800b8e4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b8e6:	2b02      	cmp	r3, #2
 800b8e8:	dc73      	bgt.n	800b9d2 <__ssvfiscanf_r+0x24e>
 800b8ea:	466b      	mov	r3, sp
 800b8ec:	4622      	mov	r2, r4
 800b8ee:	a941      	add	r1, sp, #260	; 0x104
 800b8f0:	4630      	mov	r0, r6
 800b8f2:	f000 f897 	bl	800ba24 <_scanf_chars>
 800b8f6:	2801      	cmp	r0, #1
 800b8f8:	f000 8089 	beq.w	800ba0e <__ssvfiscanf_r+0x28a>
 800b8fc:	2802      	cmp	r0, #2
 800b8fe:	f47f af71 	bne.w	800b7e4 <__ssvfiscanf_r+0x60>
 800b902:	e01d      	b.n	800b940 <__ssvfiscanf_r+0x1bc>
 800b904:	2b75      	cmp	r3, #117	; 0x75
 800b906:	d0d1      	beq.n	800b8ac <__ssvfiscanf_r+0x128>
 800b908:	2b78      	cmp	r3, #120	; 0x78
 800b90a:	d0c0      	beq.n	800b88e <__ssvfiscanf_r+0x10a>
 800b90c:	2b73      	cmp	r3, #115	; 0x73
 800b90e:	d1af      	bne.n	800b870 <__ssvfiscanf_r+0xec>
 800b910:	2302      	movs	r3, #2
 800b912:	e7d8      	b.n	800b8c6 <__ssvfiscanf_r+0x142>
 800b914:	6863      	ldr	r3, [r4, #4]
 800b916:	2b00      	cmp	r3, #0
 800b918:	dd0c      	ble.n	800b934 <__ssvfiscanf_r+0x1b0>
 800b91a:	6823      	ldr	r3, [r4, #0]
 800b91c:	781a      	ldrb	r2, [r3, #0]
 800b91e:	455a      	cmp	r2, fp
 800b920:	d175      	bne.n	800ba0e <__ssvfiscanf_r+0x28a>
 800b922:	3301      	adds	r3, #1
 800b924:	6862      	ldr	r2, [r4, #4]
 800b926:	6023      	str	r3, [r4, #0]
 800b928:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b92a:	3a01      	subs	r2, #1
 800b92c:	3301      	adds	r3, #1
 800b92e:	6062      	str	r2, [r4, #4]
 800b930:	9345      	str	r3, [sp, #276]	; 0x114
 800b932:	e757      	b.n	800b7e4 <__ssvfiscanf_r+0x60>
 800b934:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b936:	4621      	mov	r1, r4
 800b938:	4630      	mov	r0, r6
 800b93a:	4798      	blx	r3
 800b93c:	2800      	cmp	r0, #0
 800b93e:	d0ec      	beq.n	800b91a <__ssvfiscanf_r+0x196>
 800b940:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b942:	2800      	cmp	r0, #0
 800b944:	d159      	bne.n	800b9fa <__ssvfiscanf_r+0x276>
 800b946:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b94a:	e05c      	b.n	800ba06 <__ssvfiscanf_r+0x282>
 800b94c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b94e:	f042 0220 	orr.w	r2, r2, #32
 800b952:	9241      	str	r2, [sp, #260]	; 0x104
 800b954:	e79b      	b.n	800b88e <__ssvfiscanf_r+0x10a>
 800b956:	2308      	movs	r3, #8
 800b958:	9342      	str	r3, [sp, #264]	; 0x108
 800b95a:	2304      	movs	r3, #4
 800b95c:	e7b3      	b.n	800b8c6 <__ssvfiscanf_r+0x142>
 800b95e:	4629      	mov	r1, r5
 800b960:	4640      	mov	r0, r8
 800b962:	f000 f9b7 	bl	800bcd4 <__sccl>
 800b966:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b96c:	9341      	str	r3, [sp, #260]	; 0x104
 800b96e:	4605      	mov	r5, r0
 800b970:	2301      	movs	r3, #1
 800b972:	e7a8      	b.n	800b8c6 <__ssvfiscanf_r+0x142>
 800b974:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b97a:	9341      	str	r3, [sp, #260]	; 0x104
 800b97c:	2300      	movs	r3, #0
 800b97e:	e7a2      	b.n	800b8c6 <__ssvfiscanf_r+0x142>
 800b980:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b982:	06c3      	lsls	r3, r0, #27
 800b984:	f53f af2e 	bmi.w	800b7e4 <__ssvfiscanf_r+0x60>
 800b988:	9b00      	ldr	r3, [sp, #0]
 800b98a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b98c:	1d19      	adds	r1, r3, #4
 800b98e:	9100      	str	r1, [sp, #0]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	07c0      	lsls	r0, r0, #31
 800b994:	bf4c      	ite	mi
 800b996:	801a      	strhmi	r2, [r3, #0]
 800b998:	601a      	strpl	r2, [r3, #0]
 800b99a:	e723      	b.n	800b7e4 <__ssvfiscanf_r+0x60>
 800b99c:	2305      	movs	r3, #5
 800b99e:	e792      	b.n	800b8c6 <__ssvfiscanf_r+0x142>
 800b9a0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b9a2:	4621      	mov	r1, r4
 800b9a4:	4630      	mov	r0, r6
 800b9a6:	4798      	blx	r3
 800b9a8:	2800      	cmp	r0, #0
 800b9aa:	d090      	beq.n	800b8ce <__ssvfiscanf_r+0x14a>
 800b9ac:	e7c8      	b.n	800b940 <__ssvfiscanf_r+0x1bc>
 800b9ae:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b9b0:	3201      	adds	r2, #1
 800b9b2:	9245      	str	r2, [sp, #276]	; 0x114
 800b9b4:	6862      	ldr	r2, [r4, #4]
 800b9b6:	3a01      	subs	r2, #1
 800b9b8:	2a00      	cmp	r2, #0
 800b9ba:	6062      	str	r2, [r4, #4]
 800b9bc:	dd02      	ble.n	800b9c4 <__ssvfiscanf_r+0x240>
 800b9be:	3301      	adds	r3, #1
 800b9c0:	6023      	str	r3, [r4, #0]
 800b9c2:	e787      	b.n	800b8d4 <__ssvfiscanf_r+0x150>
 800b9c4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b9c6:	4621      	mov	r1, r4
 800b9c8:	4630      	mov	r0, r6
 800b9ca:	4798      	blx	r3
 800b9cc:	2800      	cmp	r0, #0
 800b9ce:	d081      	beq.n	800b8d4 <__ssvfiscanf_r+0x150>
 800b9d0:	e7b6      	b.n	800b940 <__ssvfiscanf_r+0x1bc>
 800b9d2:	2b04      	cmp	r3, #4
 800b9d4:	dc06      	bgt.n	800b9e4 <__ssvfiscanf_r+0x260>
 800b9d6:	466b      	mov	r3, sp
 800b9d8:	4622      	mov	r2, r4
 800b9da:	a941      	add	r1, sp, #260	; 0x104
 800b9dc:	4630      	mov	r0, r6
 800b9de:	f000 f885 	bl	800baec <_scanf_i>
 800b9e2:	e788      	b.n	800b8f6 <__ssvfiscanf_r+0x172>
 800b9e4:	4b0e      	ldr	r3, [pc, #56]	; (800ba20 <__ssvfiscanf_r+0x29c>)
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	f43f aefc 	beq.w	800b7e4 <__ssvfiscanf_r+0x60>
 800b9ec:	466b      	mov	r3, sp
 800b9ee:	4622      	mov	r2, r4
 800b9f0:	a941      	add	r1, sp, #260	; 0x104
 800b9f2:	4630      	mov	r0, r6
 800b9f4:	f3af 8000 	nop.w
 800b9f8:	e77d      	b.n	800b8f6 <__ssvfiscanf_r+0x172>
 800b9fa:	89a3      	ldrh	r3, [r4, #12]
 800b9fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ba00:	bf18      	it	ne
 800ba02:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800ba06:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800ba0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba0e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ba10:	e7f9      	b.n	800ba06 <__ssvfiscanf_r+0x282>
 800ba12:	bf00      	nop
 800ba14:	0800b6d1 	.word	0x0800b6d1
 800ba18:	0800b74b 	.word	0x0800b74b
 800ba1c:	0801852a 	.word	0x0801852a
 800ba20:	00000000 	.word	0x00000000

0800ba24 <_scanf_chars>:
 800ba24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba28:	4615      	mov	r5, r2
 800ba2a:	688a      	ldr	r2, [r1, #8]
 800ba2c:	4680      	mov	r8, r0
 800ba2e:	460c      	mov	r4, r1
 800ba30:	b932      	cbnz	r2, 800ba40 <_scanf_chars+0x1c>
 800ba32:	698a      	ldr	r2, [r1, #24]
 800ba34:	2a00      	cmp	r2, #0
 800ba36:	bf14      	ite	ne
 800ba38:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800ba3c:	2201      	moveq	r2, #1
 800ba3e:	608a      	str	r2, [r1, #8]
 800ba40:	6822      	ldr	r2, [r4, #0]
 800ba42:	06d1      	lsls	r1, r2, #27
 800ba44:	bf5f      	itttt	pl
 800ba46:	681a      	ldrpl	r2, [r3, #0]
 800ba48:	1d11      	addpl	r1, r2, #4
 800ba4a:	6019      	strpl	r1, [r3, #0]
 800ba4c:	6817      	ldrpl	r7, [r2, #0]
 800ba4e:	2600      	movs	r6, #0
 800ba50:	69a3      	ldr	r3, [r4, #24]
 800ba52:	b1db      	cbz	r3, 800ba8c <_scanf_chars+0x68>
 800ba54:	2b01      	cmp	r3, #1
 800ba56:	d107      	bne.n	800ba68 <_scanf_chars+0x44>
 800ba58:	682b      	ldr	r3, [r5, #0]
 800ba5a:	6962      	ldr	r2, [r4, #20]
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	5cd3      	ldrb	r3, [r2, r3]
 800ba60:	b9a3      	cbnz	r3, 800ba8c <_scanf_chars+0x68>
 800ba62:	2e00      	cmp	r6, #0
 800ba64:	d132      	bne.n	800bacc <_scanf_chars+0xa8>
 800ba66:	e006      	b.n	800ba76 <_scanf_chars+0x52>
 800ba68:	2b02      	cmp	r3, #2
 800ba6a:	d007      	beq.n	800ba7c <_scanf_chars+0x58>
 800ba6c:	2e00      	cmp	r6, #0
 800ba6e:	d12d      	bne.n	800bacc <_scanf_chars+0xa8>
 800ba70:	69a3      	ldr	r3, [r4, #24]
 800ba72:	2b01      	cmp	r3, #1
 800ba74:	d12a      	bne.n	800bacc <_scanf_chars+0xa8>
 800ba76:	2001      	movs	r0, #1
 800ba78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba7c:	f7ff f8da 	bl	800ac34 <__locale_ctype_ptr>
 800ba80:	682b      	ldr	r3, [r5, #0]
 800ba82:	781b      	ldrb	r3, [r3, #0]
 800ba84:	4418      	add	r0, r3
 800ba86:	7843      	ldrb	r3, [r0, #1]
 800ba88:	071b      	lsls	r3, r3, #28
 800ba8a:	d4ef      	bmi.n	800ba6c <_scanf_chars+0x48>
 800ba8c:	6823      	ldr	r3, [r4, #0]
 800ba8e:	06da      	lsls	r2, r3, #27
 800ba90:	bf5e      	ittt	pl
 800ba92:	682b      	ldrpl	r3, [r5, #0]
 800ba94:	781b      	ldrbpl	r3, [r3, #0]
 800ba96:	703b      	strbpl	r3, [r7, #0]
 800ba98:	682a      	ldr	r2, [r5, #0]
 800ba9a:	686b      	ldr	r3, [r5, #4]
 800ba9c:	f102 0201 	add.w	r2, r2, #1
 800baa0:	602a      	str	r2, [r5, #0]
 800baa2:	68a2      	ldr	r2, [r4, #8]
 800baa4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800baa8:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800baac:	606b      	str	r3, [r5, #4]
 800baae:	f106 0601 	add.w	r6, r6, #1
 800bab2:	bf58      	it	pl
 800bab4:	3701      	addpl	r7, #1
 800bab6:	60a2      	str	r2, [r4, #8]
 800bab8:	b142      	cbz	r2, 800bacc <_scanf_chars+0xa8>
 800baba:	2b00      	cmp	r3, #0
 800babc:	dcc8      	bgt.n	800ba50 <_scanf_chars+0x2c>
 800babe:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bac2:	4629      	mov	r1, r5
 800bac4:	4640      	mov	r0, r8
 800bac6:	4798      	blx	r3
 800bac8:	2800      	cmp	r0, #0
 800baca:	d0c1      	beq.n	800ba50 <_scanf_chars+0x2c>
 800bacc:	6823      	ldr	r3, [r4, #0]
 800bace:	f013 0310 	ands.w	r3, r3, #16
 800bad2:	d105      	bne.n	800bae0 <_scanf_chars+0xbc>
 800bad4:	68e2      	ldr	r2, [r4, #12]
 800bad6:	3201      	adds	r2, #1
 800bad8:	60e2      	str	r2, [r4, #12]
 800bada:	69a2      	ldr	r2, [r4, #24]
 800badc:	b102      	cbz	r2, 800bae0 <_scanf_chars+0xbc>
 800bade:	703b      	strb	r3, [r7, #0]
 800bae0:	6923      	ldr	r3, [r4, #16]
 800bae2:	441e      	add	r6, r3
 800bae4:	6126      	str	r6, [r4, #16]
 800bae6:	2000      	movs	r0, #0
 800bae8:	e7c6      	b.n	800ba78 <_scanf_chars+0x54>
	...

0800baec <_scanf_i>:
 800baec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baf0:	469a      	mov	sl, r3
 800baf2:	4b74      	ldr	r3, [pc, #464]	; (800bcc4 <_scanf_i+0x1d8>)
 800baf4:	460c      	mov	r4, r1
 800baf6:	4683      	mov	fp, r0
 800baf8:	4616      	mov	r6, r2
 800bafa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bafe:	b087      	sub	sp, #28
 800bb00:	ab03      	add	r3, sp, #12
 800bb02:	68a7      	ldr	r7, [r4, #8]
 800bb04:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bb08:	4b6f      	ldr	r3, [pc, #444]	; (800bcc8 <_scanf_i+0x1dc>)
 800bb0a:	69a1      	ldr	r1, [r4, #24]
 800bb0c:	4a6f      	ldr	r2, [pc, #444]	; (800bccc <_scanf_i+0x1e0>)
 800bb0e:	2903      	cmp	r1, #3
 800bb10:	bf08      	it	eq
 800bb12:	461a      	moveq	r2, r3
 800bb14:	1e7b      	subs	r3, r7, #1
 800bb16:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800bb1a:	bf84      	itt	hi
 800bb1c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bb20:	60a3      	strhi	r3, [r4, #8]
 800bb22:	6823      	ldr	r3, [r4, #0]
 800bb24:	9200      	str	r2, [sp, #0]
 800bb26:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800bb2a:	bf88      	it	hi
 800bb2c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bb30:	f104 091c 	add.w	r9, r4, #28
 800bb34:	6023      	str	r3, [r4, #0]
 800bb36:	bf8c      	ite	hi
 800bb38:	197f      	addhi	r7, r7, r5
 800bb3a:	2700      	movls	r7, #0
 800bb3c:	464b      	mov	r3, r9
 800bb3e:	f04f 0800 	mov.w	r8, #0
 800bb42:	9301      	str	r3, [sp, #4]
 800bb44:	6831      	ldr	r1, [r6, #0]
 800bb46:	ab03      	add	r3, sp, #12
 800bb48:	2202      	movs	r2, #2
 800bb4a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800bb4e:	7809      	ldrb	r1, [r1, #0]
 800bb50:	f7f4 fb56 	bl	8000200 <memchr>
 800bb54:	9b01      	ldr	r3, [sp, #4]
 800bb56:	b330      	cbz	r0, 800bba6 <_scanf_i+0xba>
 800bb58:	f1b8 0f01 	cmp.w	r8, #1
 800bb5c:	d15a      	bne.n	800bc14 <_scanf_i+0x128>
 800bb5e:	6862      	ldr	r2, [r4, #4]
 800bb60:	b92a      	cbnz	r2, 800bb6e <_scanf_i+0x82>
 800bb62:	6822      	ldr	r2, [r4, #0]
 800bb64:	2108      	movs	r1, #8
 800bb66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb6a:	6061      	str	r1, [r4, #4]
 800bb6c:	6022      	str	r2, [r4, #0]
 800bb6e:	6822      	ldr	r2, [r4, #0]
 800bb70:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800bb74:	6022      	str	r2, [r4, #0]
 800bb76:	68a2      	ldr	r2, [r4, #8]
 800bb78:	1e51      	subs	r1, r2, #1
 800bb7a:	60a1      	str	r1, [r4, #8]
 800bb7c:	b19a      	cbz	r2, 800bba6 <_scanf_i+0xba>
 800bb7e:	6832      	ldr	r2, [r6, #0]
 800bb80:	1c51      	adds	r1, r2, #1
 800bb82:	6031      	str	r1, [r6, #0]
 800bb84:	7812      	ldrb	r2, [r2, #0]
 800bb86:	701a      	strb	r2, [r3, #0]
 800bb88:	1c5d      	adds	r5, r3, #1
 800bb8a:	6873      	ldr	r3, [r6, #4]
 800bb8c:	3b01      	subs	r3, #1
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	6073      	str	r3, [r6, #4]
 800bb92:	dc07      	bgt.n	800bba4 <_scanf_i+0xb8>
 800bb94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bb98:	4631      	mov	r1, r6
 800bb9a:	4658      	mov	r0, fp
 800bb9c:	4798      	blx	r3
 800bb9e:	2800      	cmp	r0, #0
 800bba0:	f040 8086 	bne.w	800bcb0 <_scanf_i+0x1c4>
 800bba4:	462b      	mov	r3, r5
 800bba6:	f108 0801 	add.w	r8, r8, #1
 800bbaa:	f1b8 0f03 	cmp.w	r8, #3
 800bbae:	d1c8      	bne.n	800bb42 <_scanf_i+0x56>
 800bbb0:	6862      	ldr	r2, [r4, #4]
 800bbb2:	b90a      	cbnz	r2, 800bbb8 <_scanf_i+0xcc>
 800bbb4:	220a      	movs	r2, #10
 800bbb6:	6062      	str	r2, [r4, #4]
 800bbb8:	6862      	ldr	r2, [r4, #4]
 800bbba:	4945      	ldr	r1, [pc, #276]	; (800bcd0 <_scanf_i+0x1e4>)
 800bbbc:	6960      	ldr	r0, [r4, #20]
 800bbbe:	9301      	str	r3, [sp, #4]
 800bbc0:	1a89      	subs	r1, r1, r2
 800bbc2:	f000 f887 	bl	800bcd4 <__sccl>
 800bbc6:	9b01      	ldr	r3, [sp, #4]
 800bbc8:	f04f 0800 	mov.w	r8, #0
 800bbcc:	461d      	mov	r5, r3
 800bbce:	68a3      	ldr	r3, [r4, #8]
 800bbd0:	6822      	ldr	r2, [r4, #0]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d03a      	beq.n	800bc4c <_scanf_i+0x160>
 800bbd6:	6831      	ldr	r1, [r6, #0]
 800bbd8:	6960      	ldr	r0, [r4, #20]
 800bbda:	f891 c000 	ldrb.w	ip, [r1]
 800bbde:	f810 000c 	ldrb.w	r0, [r0, ip]
 800bbe2:	2800      	cmp	r0, #0
 800bbe4:	d032      	beq.n	800bc4c <_scanf_i+0x160>
 800bbe6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800bbea:	d121      	bne.n	800bc30 <_scanf_i+0x144>
 800bbec:	0510      	lsls	r0, r2, #20
 800bbee:	d51f      	bpl.n	800bc30 <_scanf_i+0x144>
 800bbf0:	f108 0801 	add.w	r8, r8, #1
 800bbf4:	b117      	cbz	r7, 800bbfc <_scanf_i+0x110>
 800bbf6:	3301      	adds	r3, #1
 800bbf8:	3f01      	subs	r7, #1
 800bbfa:	60a3      	str	r3, [r4, #8]
 800bbfc:	6873      	ldr	r3, [r6, #4]
 800bbfe:	3b01      	subs	r3, #1
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	6073      	str	r3, [r6, #4]
 800bc04:	dd1b      	ble.n	800bc3e <_scanf_i+0x152>
 800bc06:	6833      	ldr	r3, [r6, #0]
 800bc08:	3301      	adds	r3, #1
 800bc0a:	6033      	str	r3, [r6, #0]
 800bc0c:	68a3      	ldr	r3, [r4, #8]
 800bc0e:	3b01      	subs	r3, #1
 800bc10:	60a3      	str	r3, [r4, #8]
 800bc12:	e7dc      	b.n	800bbce <_scanf_i+0xe2>
 800bc14:	f1b8 0f02 	cmp.w	r8, #2
 800bc18:	d1ad      	bne.n	800bb76 <_scanf_i+0x8a>
 800bc1a:	6822      	ldr	r2, [r4, #0]
 800bc1c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800bc20:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800bc24:	d1bf      	bne.n	800bba6 <_scanf_i+0xba>
 800bc26:	2110      	movs	r1, #16
 800bc28:	6061      	str	r1, [r4, #4]
 800bc2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bc2e:	e7a1      	b.n	800bb74 <_scanf_i+0x88>
 800bc30:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800bc34:	6022      	str	r2, [r4, #0]
 800bc36:	780b      	ldrb	r3, [r1, #0]
 800bc38:	702b      	strb	r3, [r5, #0]
 800bc3a:	3501      	adds	r5, #1
 800bc3c:	e7de      	b.n	800bbfc <_scanf_i+0x110>
 800bc3e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bc42:	4631      	mov	r1, r6
 800bc44:	4658      	mov	r0, fp
 800bc46:	4798      	blx	r3
 800bc48:	2800      	cmp	r0, #0
 800bc4a:	d0df      	beq.n	800bc0c <_scanf_i+0x120>
 800bc4c:	6823      	ldr	r3, [r4, #0]
 800bc4e:	05d9      	lsls	r1, r3, #23
 800bc50:	d50c      	bpl.n	800bc6c <_scanf_i+0x180>
 800bc52:	454d      	cmp	r5, r9
 800bc54:	d908      	bls.n	800bc68 <_scanf_i+0x17c>
 800bc56:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bc5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bc5e:	4632      	mov	r2, r6
 800bc60:	4658      	mov	r0, fp
 800bc62:	4798      	blx	r3
 800bc64:	1e6f      	subs	r7, r5, #1
 800bc66:	463d      	mov	r5, r7
 800bc68:	454d      	cmp	r5, r9
 800bc6a:	d029      	beq.n	800bcc0 <_scanf_i+0x1d4>
 800bc6c:	6822      	ldr	r2, [r4, #0]
 800bc6e:	f012 0210 	ands.w	r2, r2, #16
 800bc72:	d113      	bne.n	800bc9c <_scanf_i+0x1b0>
 800bc74:	702a      	strb	r2, [r5, #0]
 800bc76:	6863      	ldr	r3, [r4, #4]
 800bc78:	9e00      	ldr	r6, [sp, #0]
 800bc7a:	4649      	mov	r1, r9
 800bc7c:	4658      	mov	r0, fp
 800bc7e:	47b0      	blx	r6
 800bc80:	f8da 3000 	ldr.w	r3, [sl]
 800bc84:	6821      	ldr	r1, [r4, #0]
 800bc86:	1d1a      	adds	r2, r3, #4
 800bc88:	f8ca 2000 	str.w	r2, [sl]
 800bc8c:	f011 0f20 	tst.w	r1, #32
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	d010      	beq.n	800bcb6 <_scanf_i+0x1ca>
 800bc94:	6018      	str	r0, [r3, #0]
 800bc96:	68e3      	ldr	r3, [r4, #12]
 800bc98:	3301      	adds	r3, #1
 800bc9a:	60e3      	str	r3, [r4, #12]
 800bc9c:	eba5 0509 	sub.w	r5, r5, r9
 800bca0:	44a8      	add	r8, r5
 800bca2:	6925      	ldr	r5, [r4, #16]
 800bca4:	4445      	add	r5, r8
 800bca6:	6125      	str	r5, [r4, #16]
 800bca8:	2000      	movs	r0, #0
 800bcaa:	b007      	add	sp, #28
 800bcac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcb0:	f04f 0800 	mov.w	r8, #0
 800bcb4:	e7ca      	b.n	800bc4c <_scanf_i+0x160>
 800bcb6:	07ca      	lsls	r2, r1, #31
 800bcb8:	bf4c      	ite	mi
 800bcba:	8018      	strhmi	r0, [r3, #0]
 800bcbc:	6018      	strpl	r0, [r3, #0]
 800bcbe:	e7ea      	b.n	800bc96 <_scanf_i+0x1aa>
 800bcc0:	2001      	movs	r0, #1
 800bcc2:	e7f2      	b.n	800bcaa <_scanf_i+0x1be>
 800bcc4:	0800c248 	.word	0x0800c248
 800bcc8:	0800be31 	.word	0x0800be31
 800bccc:	0800965d 	.word	0x0800965d
 800bcd0:	08018646 	.word	0x08018646

0800bcd4 <__sccl>:
 800bcd4:	b570      	push	{r4, r5, r6, lr}
 800bcd6:	780b      	ldrb	r3, [r1, #0]
 800bcd8:	2b5e      	cmp	r3, #94	; 0x5e
 800bcda:	bf13      	iteet	ne
 800bcdc:	1c4a      	addne	r2, r1, #1
 800bcde:	1c8a      	addeq	r2, r1, #2
 800bce0:	784b      	ldrbeq	r3, [r1, #1]
 800bce2:	2100      	movne	r1, #0
 800bce4:	bf08      	it	eq
 800bce6:	2101      	moveq	r1, #1
 800bce8:	1e44      	subs	r4, r0, #1
 800bcea:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800bcee:	f804 1f01 	strb.w	r1, [r4, #1]!
 800bcf2:	42ac      	cmp	r4, r5
 800bcf4:	d1fb      	bne.n	800bcee <__sccl+0x1a>
 800bcf6:	b913      	cbnz	r3, 800bcfe <__sccl+0x2a>
 800bcf8:	3a01      	subs	r2, #1
 800bcfa:	4610      	mov	r0, r2
 800bcfc:	bd70      	pop	{r4, r5, r6, pc}
 800bcfe:	f081 0401 	eor.w	r4, r1, #1
 800bd02:	54c4      	strb	r4, [r0, r3]
 800bd04:	1c51      	adds	r1, r2, #1
 800bd06:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800bd0a:	2d2d      	cmp	r5, #45	; 0x2d
 800bd0c:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
 800bd10:	460a      	mov	r2, r1
 800bd12:	d006      	beq.n	800bd22 <__sccl+0x4e>
 800bd14:	2d5d      	cmp	r5, #93	; 0x5d
 800bd16:	d0f0      	beq.n	800bcfa <__sccl+0x26>
 800bd18:	b90d      	cbnz	r5, 800bd1e <__sccl+0x4a>
 800bd1a:	4632      	mov	r2, r6
 800bd1c:	e7ed      	b.n	800bcfa <__sccl+0x26>
 800bd1e:	462b      	mov	r3, r5
 800bd20:	e7ef      	b.n	800bd02 <__sccl+0x2e>
 800bd22:	780e      	ldrb	r6, [r1, #0]
 800bd24:	2e5d      	cmp	r6, #93	; 0x5d
 800bd26:	d0fa      	beq.n	800bd1e <__sccl+0x4a>
 800bd28:	42b3      	cmp	r3, r6
 800bd2a:	dcf8      	bgt.n	800bd1e <__sccl+0x4a>
 800bd2c:	3301      	adds	r3, #1
 800bd2e:	429e      	cmp	r6, r3
 800bd30:	54c4      	strb	r4, [r0, r3]
 800bd32:	dcfb      	bgt.n	800bd2c <__sccl+0x58>
 800bd34:	3102      	adds	r1, #2
 800bd36:	e7e6      	b.n	800bd06 <__sccl+0x32>

0800bd38 <_strtol_l.isra.0>:
 800bd38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd3c:	4680      	mov	r8, r0
 800bd3e:	4689      	mov	r9, r1
 800bd40:	4692      	mov	sl, r2
 800bd42:	461e      	mov	r6, r3
 800bd44:	460f      	mov	r7, r1
 800bd46:	463d      	mov	r5, r7
 800bd48:	9808      	ldr	r0, [sp, #32]
 800bd4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd4e:	f7fe ff6d 	bl	800ac2c <__locale_ctype_ptr_l>
 800bd52:	4420      	add	r0, r4
 800bd54:	7843      	ldrb	r3, [r0, #1]
 800bd56:	f013 0308 	ands.w	r3, r3, #8
 800bd5a:	d132      	bne.n	800bdc2 <_strtol_l.isra.0+0x8a>
 800bd5c:	2c2d      	cmp	r4, #45	; 0x2d
 800bd5e:	d132      	bne.n	800bdc6 <_strtol_l.isra.0+0x8e>
 800bd60:	787c      	ldrb	r4, [r7, #1]
 800bd62:	1cbd      	adds	r5, r7, #2
 800bd64:	2201      	movs	r2, #1
 800bd66:	2e00      	cmp	r6, #0
 800bd68:	d05d      	beq.n	800be26 <_strtol_l.isra.0+0xee>
 800bd6a:	2e10      	cmp	r6, #16
 800bd6c:	d109      	bne.n	800bd82 <_strtol_l.isra.0+0x4a>
 800bd6e:	2c30      	cmp	r4, #48	; 0x30
 800bd70:	d107      	bne.n	800bd82 <_strtol_l.isra.0+0x4a>
 800bd72:	782b      	ldrb	r3, [r5, #0]
 800bd74:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bd78:	2b58      	cmp	r3, #88	; 0x58
 800bd7a:	d14f      	bne.n	800be1c <_strtol_l.isra.0+0xe4>
 800bd7c:	786c      	ldrb	r4, [r5, #1]
 800bd7e:	2610      	movs	r6, #16
 800bd80:	3502      	adds	r5, #2
 800bd82:	2a00      	cmp	r2, #0
 800bd84:	bf14      	ite	ne
 800bd86:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800bd8a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800bd8e:	2700      	movs	r7, #0
 800bd90:	fbb1 fcf6 	udiv	ip, r1, r6
 800bd94:	4638      	mov	r0, r7
 800bd96:	fb06 1e1c 	mls	lr, r6, ip, r1
 800bd9a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800bd9e:	2b09      	cmp	r3, #9
 800bda0:	d817      	bhi.n	800bdd2 <_strtol_l.isra.0+0x9a>
 800bda2:	461c      	mov	r4, r3
 800bda4:	42a6      	cmp	r6, r4
 800bda6:	dd23      	ble.n	800bdf0 <_strtol_l.isra.0+0xb8>
 800bda8:	1c7b      	adds	r3, r7, #1
 800bdaa:	d007      	beq.n	800bdbc <_strtol_l.isra.0+0x84>
 800bdac:	4584      	cmp	ip, r0
 800bdae:	d31c      	bcc.n	800bdea <_strtol_l.isra.0+0xb2>
 800bdb0:	d101      	bne.n	800bdb6 <_strtol_l.isra.0+0x7e>
 800bdb2:	45a6      	cmp	lr, r4
 800bdb4:	db19      	blt.n	800bdea <_strtol_l.isra.0+0xb2>
 800bdb6:	fb00 4006 	mla	r0, r0, r6, r4
 800bdba:	2701      	movs	r7, #1
 800bdbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bdc0:	e7eb      	b.n	800bd9a <_strtol_l.isra.0+0x62>
 800bdc2:	462f      	mov	r7, r5
 800bdc4:	e7bf      	b.n	800bd46 <_strtol_l.isra.0+0xe>
 800bdc6:	2c2b      	cmp	r4, #43	; 0x2b
 800bdc8:	bf04      	itt	eq
 800bdca:	1cbd      	addeq	r5, r7, #2
 800bdcc:	787c      	ldrbeq	r4, [r7, #1]
 800bdce:	461a      	mov	r2, r3
 800bdd0:	e7c9      	b.n	800bd66 <_strtol_l.isra.0+0x2e>
 800bdd2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800bdd6:	2b19      	cmp	r3, #25
 800bdd8:	d801      	bhi.n	800bdde <_strtol_l.isra.0+0xa6>
 800bdda:	3c37      	subs	r4, #55	; 0x37
 800bddc:	e7e2      	b.n	800bda4 <_strtol_l.isra.0+0x6c>
 800bdde:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800bde2:	2b19      	cmp	r3, #25
 800bde4:	d804      	bhi.n	800bdf0 <_strtol_l.isra.0+0xb8>
 800bde6:	3c57      	subs	r4, #87	; 0x57
 800bde8:	e7dc      	b.n	800bda4 <_strtol_l.isra.0+0x6c>
 800bdea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bdee:	e7e5      	b.n	800bdbc <_strtol_l.isra.0+0x84>
 800bdf0:	1c7b      	adds	r3, r7, #1
 800bdf2:	d108      	bne.n	800be06 <_strtol_l.isra.0+0xce>
 800bdf4:	2322      	movs	r3, #34	; 0x22
 800bdf6:	f8c8 3000 	str.w	r3, [r8]
 800bdfa:	4608      	mov	r0, r1
 800bdfc:	f1ba 0f00 	cmp.w	sl, #0
 800be00:	d107      	bne.n	800be12 <_strtol_l.isra.0+0xda>
 800be02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be06:	b102      	cbz	r2, 800be0a <_strtol_l.isra.0+0xd2>
 800be08:	4240      	negs	r0, r0
 800be0a:	f1ba 0f00 	cmp.w	sl, #0
 800be0e:	d0f8      	beq.n	800be02 <_strtol_l.isra.0+0xca>
 800be10:	b10f      	cbz	r7, 800be16 <_strtol_l.isra.0+0xde>
 800be12:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800be16:	f8ca 9000 	str.w	r9, [sl]
 800be1a:	e7f2      	b.n	800be02 <_strtol_l.isra.0+0xca>
 800be1c:	2430      	movs	r4, #48	; 0x30
 800be1e:	2e00      	cmp	r6, #0
 800be20:	d1af      	bne.n	800bd82 <_strtol_l.isra.0+0x4a>
 800be22:	2608      	movs	r6, #8
 800be24:	e7ad      	b.n	800bd82 <_strtol_l.isra.0+0x4a>
 800be26:	2c30      	cmp	r4, #48	; 0x30
 800be28:	d0a3      	beq.n	800bd72 <_strtol_l.isra.0+0x3a>
 800be2a:	260a      	movs	r6, #10
 800be2c:	e7a9      	b.n	800bd82 <_strtol_l.isra.0+0x4a>
	...

0800be30 <_strtol_r>:
 800be30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be32:	4c06      	ldr	r4, [pc, #24]	; (800be4c <_strtol_r+0x1c>)
 800be34:	4d06      	ldr	r5, [pc, #24]	; (800be50 <_strtol_r+0x20>)
 800be36:	6824      	ldr	r4, [r4, #0]
 800be38:	6a24      	ldr	r4, [r4, #32]
 800be3a:	2c00      	cmp	r4, #0
 800be3c:	bf08      	it	eq
 800be3e:	462c      	moveq	r4, r5
 800be40:	9400      	str	r4, [sp, #0]
 800be42:	f7ff ff79 	bl	800bd38 <_strtol_l.isra.0>
 800be46:	b003      	add	sp, #12
 800be48:	bd30      	pop	{r4, r5, pc}
 800be4a:	bf00      	nop
 800be4c:	20000094 	.word	0x20000094
 800be50:	20000158 	.word	0x20000158

0800be54 <__submore>:
 800be54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be58:	460c      	mov	r4, r1
 800be5a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800be5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be60:	4299      	cmp	r1, r3
 800be62:	d11d      	bne.n	800bea0 <__submore+0x4c>
 800be64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800be68:	f7fb ffc2 	bl	8007df0 <_malloc_r>
 800be6c:	b918      	cbnz	r0, 800be76 <__submore+0x22>
 800be6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be7a:	63a3      	str	r3, [r4, #56]	; 0x38
 800be7c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800be80:	6360      	str	r0, [r4, #52]	; 0x34
 800be82:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800be86:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800be8a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800be8e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800be92:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800be96:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800be9a:	6020      	str	r0, [r4, #0]
 800be9c:	2000      	movs	r0, #0
 800be9e:	e7e8      	b.n	800be72 <__submore+0x1e>
 800bea0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800bea2:	0077      	lsls	r7, r6, #1
 800bea4:	463a      	mov	r2, r7
 800bea6:	f7ff fbed 	bl	800b684 <_realloc_r>
 800beaa:	4605      	mov	r5, r0
 800beac:	2800      	cmp	r0, #0
 800beae:	d0de      	beq.n	800be6e <__submore+0x1a>
 800beb0:	eb00 0806 	add.w	r8, r0, r6
 800beb4:	4601      	mov	r1, r0
 800beb6:	4632      	mov	r2, r6
 800beb8:	4640      	mov	r0, r8
 800beba:	f7fb fca3 	bl	8007804 <memcpy>
 800bebe:	f8c4 8000 	str.w	r8, [r4]
 800bec2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800bec6:	e7e9      	b.n	800be9c <__submore+0x48>

0800bec8 <_malloc_usable_size_r>:
 800bec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800becc:	1f18      	subs	r0, r3, #4
 800bece:	2b00      	cmp	r3, #0
 800bed0:	bfbc      	itt	lt
 800bed2:	580b      	ldrlt	r3, [r1, r0]
 800bed4:	18c0      	addlt	r0, r0, r3
 800bed6:	4770      	bx	lr

0800bed8 <_init>:
 800bed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beda:	bf00      	nop
 800bedc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bede:	bc08      	pop	{r3}
 800bee0:	469e      	mov	lr, r3
 800bee2:	4770      	bx	lr

0800bee4 <_fini>:
 800bee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bee6:	bf00      	nop
 800bee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800beea:	bc08      	pop	{r3}
 800beec:	469e      	mov	lr, r3
 800beee:	4770      	bx	lr
